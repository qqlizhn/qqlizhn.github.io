{"version":3,"file":"static/chunks/pages/device-info-2b88c256941c2de0.js","mappings":"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","sources":["webpack://_N_E/?995c","webpack://_N_E/./src/pages/device-info.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.110.7_@types+react-dom@18.2.6_@types+react@18.2.14_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.110.7_@types+react-dom@18.2.6_@types+react@18.2.14_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.110.7_@types+react-dom@18.2.6_@types+react@18.2.14_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.110.7_@types+react-dom@18.2.6_@types+react@18.2.14_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.types.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.18_@types+react@18.2.14_react@18.2.0/node_modules/@fluentui/utilities/src/DelayedRender.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/device-info\",\n      function () {\n        return require(\"private-next-pages/device-info.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/device-info\"])\n      });\n    }\n  ","import {\n    Icon,\n    MessageBar,\n    Separator,\n    Stack,\n    TooltipHost,\n} from \"@fluentui/react\";\nimport { AdbFeature } from \"@yume-chan/adb\";\nimport { observer } from \"mobx-react-lite\";\nimport type { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { GLOBAL_STATE } from \"../state\";\nimport { Icons, RouteStackProps } from \"../utils\";\n\nconst KNOWN_FEATURES: Record<string, string> = {\n    [AdbFeature.ShellV2]: `\"shell\" command now supports separating child process's stdout and stderr, and returning exit code`,\n    // 'cmd': '',\n    [AdbFeature.StatV2]:\n        '\"sync\" command now supports \"STA2\" (returns more information of a file than old \"STAT\") and \"LST2\" (returns information of a directory) sub command',\n    [AdbFeature.ListV2]:\n        '\"sync\" command now supports \"LST2\" sub command which returns more information when listing a directory than old \"LIST\"',\n    [AdbFeature.FixedPushMkdir]:\n        \"Android 9 (P) introduced a bug that pushing files to a non-existing directory would fail. This feature indicates it's fixed (Android 10)\",\n    // 'apex': '',\n    // 'abb': '',\n    // 'fixed_push_symlink_timestamp': '',\n    [AdbFeature.AbbExec]:\n        'Supports \"abb_exec\" variant that can be used to install App faster',\n    // 'remount_shell': '',\n    // 'track_app': '',\n    // 'sendrecv_v2': '',\n    sendrecv_v2_brotli:\n        'Supports \"brotli\" compression algorithm when pushing/pulling files',\n    sendrecv_v2_lz4:\n        'Supports \"lz4\" compression algorithm when pushing/pulling files',\n    sendrecv_v2_zstd:\n        'Supports \"zstd\" compression algorithm when pushing/pulling files',\n    // 'sendrecv_v2_dry_run_send': '',\n};\n\nconst DeviceInfo: NextPage = () => {\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Device Info - Tango</title>\n            </Head>\n\n            <MessageBar>\n                <code>ro.product.name</code>\n                <span> field in Android Build Props</span>\n            </MessageBar>\n            <span>Product Name: {GLOBAL_STATE.adb?.banner.product}</span>\n            <Separator />\n\n            <MessageBar>\n                <code>ro.product.model</code>\n                <span> field in Android Build Props</span>\n            </MessageBar>\n            <span>Model Name: {GLOBAL_STATE.adb?.banner.model}</span>\n            <Separator />\n\n            <MessageBar>\n                <code>ro.product.device</code>\n                <span> field in Android Build Props</span>\n            </MessageBar>\n            <span>Device Name: {GLOBAL_STATE.adb?.banner.device}</span>\n            <Separator />\n\n            <MessageBar>\n                <span>\n                    Feature list decides how each individual commands should\n                    behavior.\n                </span>\n                <br />\n\n                <span>\n                    For example, it may indicate the availability of a new\n                    command,{\" \"}\n                </span>\n                <span>{`or a workaround for an old bug is not required because it's already been fixed.`}</span>\n                <br />\n            </MessageBar>\n            <span>\n                <span>Features: </span>\n                {GLOBAL_STATE.adb?.banner.features.map((feature, index) => (\n                    <span key={feature}>\n                        {index !== 0 && <span>, </span>}\n                        <span>{feature}</span>\n                        {KNOWN_FEATURES[feature] && (\n                            <TooltipHost\n                                content={<span>{KNOWN_FEATURES[feature]}</span>}\n                            >\n                                <Icon\n                                    style={{ marginLeft: 4 }}\n                                    iconName={Icons.Info}\n                                />\n                            </TooltipHost>\n                        )}\n                    </span>\n                ))}\n            </span>\n        </Stack>\n    );\n};\n\nexport default observer(DeviceInfo);\n","import * as React from 'react';\nimport { DelayedRender, classNamesFunction, getNativeProps, htmlElementProperties, css } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nimport { useId, useBoolean } from '@fluentui/react-hooks';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst ICON_MAP = {\n  [MessageBarType.info]: 'Info',\n  [MessageBarType.warning]: 'Info',\n  [MessageBarType.error]: 'ErrorBadge',\n  [MessageBarType.blocked]: 'Blocked2',\n  [MessageBarType.severeWarning]: 'Warning',\n  [MessageBarType.success]: 'Completed',\n};\n\nconst COMPONENT_NAME = 'MessageBar';\n\nconst getClassNames = classNamesFunction<IMessageBarStyleProps, IMessageBarStyles>();\n\nconst getAnnouncementPriority = (messageBarType: MessageBarType): 'assertive' | 'polite' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'assertive';\n  }\n  return 'polite';\n};\n\nconst getRole = (messageBarType: MessageBarType): 'alert' | 'status' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'alert';\n  }\n  return 'status';\n};\n\nexport const MessageBarBase: React.FunctionComponent<IMessageBarProps> = React.forwardRef<\n  HTMLDivElement,\n  IMessageBarProps\n>((props, ref) => {\n  const [expandSingleLine, { toggle: toggleExpandSingleLine }] = useBoolean(false);\n  const labelId = useId('MessageBar');\n\n  const {\n    actions,\n    className,\n    children,\n    // eslint-disable-next-line deprecation/deprecation\n    overflowButtonAriaLabel,\n    dismissIconProps,\n    styles,\n    theme,\n    messageBarType = MessageBarType.info,\n    onDismiss = undefined,\n    isMultiline = true,\n    truncated,\n    dismissButtonAriaLabel,\n    messageBarIconProps,\n    role,\n    delayedRender = true,\n    expandButtonProps,\n  } = props;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(props, htmlElementProperties, [\n    'className',\n    'role',\n  ]);\n\n  const classNames: { [key in keyof IMessageBarStyles]: string } = getClassNames(styles, {\n    theme: theme!,\n    messageBarType: messageBarType || MessageBarType.info,\n    onDismiss: onDismiss !== undefined,\n    actions: actions !== undefined,\n    truncated: truncated,\n    isMultiline: isMultiline,\n    expandSingleLine: expandSingleLine,\n    className,\n  });\n\n  const expandIconProps = { iconName: expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' };\n  const regionProps = actions || onDismiss ? { 'aria-describedby': labelId, role: 'region' } : {};\n  const actionsDiv = actions ? <div className={classNames.actions}>{actions}</div> : null;\n\n  const dismissButton = onDismiss ? (\n    <IconButton\n      disabled={false}\n      className={classNames.dismissal}\n      onClick={onDismiss}\n      iconProps={dismissIconProps ? dismissIconProps : { iconName: 'Clear' }}\n      title={dismissButtonAriaLabel}\n      ariaLabel={dismissButtonAriaLabel}\n    />\n  ) : null;\n\n  return (\n    <div ref={ref} className={classNames.root} {...regionProps}>\n      <div className={classNames.content}>\n        <div className={classNames.iconContainer} aria-hidden>\n          {messageBarIconProps ? (\n            <Icon {...messageBarIconProps} className={css(classNames.icon, messageBarIconProps.className)} />\n          ) : (\n            <Icon iconName={ICON_MAP[messageBarType!]} className={classNames.icon} />\n          )}\n        </div>\n        <div\n          className={classNames.text}\n          id={labelId}\n          role={role || getRole(messageBarType)}\n          aria-live={getAnnouncementPriority(messageBarType)}\n        >\n          <span className={classNames.innerText} {...nativeProps}>\n            {delayedRender ? (\n              <DelayedRender>\n                <span>{children}</span>\n              </DelayedRender>\n            ) : (\n              // this span is probably not necessary, but preserving it for now in case anyone\n              // has styling that expects it to be present\n              <span>{children}</span>\n            )}\n          </span>\n        </div>\n        {\n          /* singleline expand/collapse button */ !isMultiline && !actionsDiv && truncated && (\n            <div className={classNames.expandSingleLine}>\n              <IconButton\n                disabled={false}\n                className={classNames.expand}\n                onClick={toggleExpandSingleLine}\n                iconProps={expandIconProps}\n                ariaLabel={overflowButtonAriaLabel}\n                aria-expanded={expandSingleLine}\n                {...expandButtonProps}\n              />\n            </div>\n          )\n        }\n        {/* singleline actions */ !isMultiline && actionsDiv}\n        {\n          /* singleline dismiss */ !isMultiline && dismissButton && (\n            <div className={classNames.dismissSingleLine}>{dismissButton}</div>\n          )\n        }\n        {/* multiline dismiss */ isMultiline && dismissButton}\n      </div>\n      {/* multiline actions */ isMultiline && actionsDiv}\n    </div>\n  );\n});\nMessageBarBase.displayName = COMPONENT_NAME;\n","import {\n  HighContrastSelector,\n  HighContrastSelectorWhite,\n  ScreenWidthMaxSmall,\n  getScreenSelector,\n  getGlobalClassNames,\n  getFocusStyle,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { MessageBarType } from './MessageBar.types';\nimport type { IStyle, ISemanticColors } from '../../Styling';\nimport type { IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine',\n};\n\nconst backgroundColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorBackground',\n  [MessageBarType.blocked]: 'errorBackground',\n  [MessageBarType.success]: 'successBackground',\n  [MessageBarType.warning]: 'warningBackground',\n  [MessageBarType.severeWarning]: 'severeWarningBackground',\n  [MessageBarType.info]: 'infoBackground',\n};\n\nconst iconColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorIcon',\n  [MessageBarType.blocked]: 'errorIcon',\n  [MessageBarType.success]: 'successIcon',\n  [MessageBarType.warning]: 'warningIcon',\n  [MessageBarType.severeWarning]: 'severeWarningIcon',\n  [MessageBarType.info]: 'infoIcon',\n};\n\nconst highContrastBorderColor: { [key: string]: string } = {\n  [MessageBarType.error]: '#ff0000',\n  [MessageBarType.blocked]: '#ff0000',\n  [MessageBarType.success]: '#bad80a',\n  [MessageBarType.warning]: '#fff100',\n  [MessageBarType.severeWarning]: '#ff0000',\n  [MessageBarType.info]: 'WindowText',\n};\n\nconst highContrastWhiteBorderColor: { [key: string]: string } = {\n  [MessageBarType.error]: '#e81123',\n  [MessageBarType.blocked]: '#e81123',\n  [MessageBarType.success]: '#107c10',\n  [MessageBarType.warning]: '#966400',\n  [MessageBarType.severeWarning]: '#d83b01',\n  [MessageBarType.info]: 'WindowText',\n};\n\nexport const getStyles = (props: IMessageBarStyleProps): IMessageBarStyles => {\n  const {\n    theme,\n    className,\n    onDismiss,\n    truncated,\n    isMultiline,\n    expandSingleLine,\n    messageBarType = MessageBarType.info,\n  } = props;\n  const { semanticColors, fonts } = theme;\n\n  const SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const dismissalAndExpandIconStyle: IStyle = {\n    fontSize: IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: semanticColors.messageText,\n    selectors: {\n      [HighContrastSelector]: {\n        ...getHighContrastNoAdjustStyle(),\n        color: 'WindowText',\n      },\n    },\n  };\n\n  const dismissalAndExpandStyle: IStyle = [\n    getFocusStyle(theme, {\n      inset: 1,\n      highContrastStyle: {\n        outlineOffset: '-6px',\n        outline: '1px solid Highlight',\n      },\n      borderColor: 'transparent',\n    }),\n    {\n      flexShrink: 0,\n      width: 32,\n      height: 32,\n      padding: '8px 12px',\n      selectors: {\n        '& .ms-Button-icon': dismissalAndExpandIconStyle,\n        ':hover': {\n          backgroundColor: 'transparent',\n        },\n        ':active': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      messageBarType === MessageBarType.error && classNames.error,\n      messageBarType === MessageBarType.blocked && classNames.blocked,\n      messageBarType === MessageBarType.severeWarning && classNames.severeWarning,\n      messageBarType === MessageBarType.success && classNames.success,\n      messageBarType === MessageBarType.warning && classNames.warning,\n      isMultiline ? classNames.multiline : classNames.singleline,\n      !isMultiline && onDismiss && classNames.dismissalSingleLine,\n      !isMultiline && truncated && classNames.expandingSingleLine,\n      {\n        background: semanticColors[backgroundColor[messageBarType]],\n        boxSizing: 'border-box',\n        color: semanticColors.messageText,\n        minHeight: 32,\n        width: '100%',\n        display: 'flex',\n        wordBreak: 'break-word',\n        selectors: {\n          '.ms-Link': {\n            color: semanticColors.messageLink,\n            selectors: {\n              ':hover': {\n                color: semanticColors.messageLinkHovered,\n              },\n            },\n          },\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n            background: 'transparent',\n            border: `1px solid ${highContrastBorderColor[messageBarType]}`,\n            color: 'WindowText',\n          },\n          [HighContrastSelectorWhite]: {\n            border: `1px solid ${highContrastWhiteBorderColor[messageBarType]}`,\n          },\n        },\n      },\n      isMultiline && {\n        flexDirection: 'column',\n      },\n      className,\n    ],\n    content: [\n      classNames.content,\n      {\n        display: 'flex',\n        width: '100%',\n        lineHeight: 'normal',\n        [SmallScreenSelector]: {\n          display: 'grid',\n          gridTemplateColumns: 'auto 1fr auto',\n          gridTemplateRows: '1fr auto',\n          gridTemplateAreas: `\n            \"icon text close\"\n            \"action action action\"\n          `,\n        },\n      },\n    ],\n    iconContainer: [\n      classNames.iconContainer,\n      {\n        fontSize: IconFontSizes.medium,\n        minWidth: 16,\n        minHeight: 16,\n        display: 'flex',\n        flexShrink: 0,\n        margin: '8px 0 8px 12px',\n        [SmallScreenSelector]: {\n          gridArea: 'icon',\n        },\n      },\n    ],\n    icon: {\n      color: semanticColors[iconColor[messageBarType]],\n      selectors: {\n        [HighContrastSelector]: {\n          ...getHighContrastNoAdjustStyle(),\n          color: 'WindowText',\n        },\n      },\n    },\n    text: [\n      classNames.text,\n      {\n        minWidth: 0,\n        display: 'flex',\n        flexGrow: 1,\n        margin: 8,\n        ...fonts.small,\n        [SmallScreenSelector]: {\n          gridArea: 'text',\n        },\n        selectors: {\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      !onDismiss && {\n        marginRight: 12,\n      },\n    ],\n    innerText: [\n      classNames.innerText,\n      {\n        lineHeight: 16,\n        selectors: {\n          '& span a:last-child': {\n            paddingLeft: 4,\n          },\n        },\n      },\n      truncated && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n      !isMultiline && {\n        // In high contrast this causes the top and bottom of links' focus outline to be clipped\n        // (not sure of a good way around that while still maintaining text clipping)\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n      },\n      !isMultiline &&\n        !truncated && {\n          selectors: {\n            [SmallScreenSelector]: {\n              overflow: 'visible',\n              whiteSpace: 'pre-wrap',\n            },\n          },\n        },\n      expandSingleLine && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n    ],\n    dismissSingleLine: [\n      classNames.dismissSingleLine,\n      {\n        [SmallScreenSelector]: {\n          gridArea: 'close',\n        },\n      },\n    ],\n    expandSingleLine: classNames.expandSingleLine,\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [\n      isMultiline ? classNames.actions : classNames.actionsSingleline,\n      {\n        display: 'flex',\n        flexGrow: 0,\n        flexShrink: 0,\n        flexBasis: 'auto',\n        flexDirection: 'row-reverse',\n        alignItems: 'center',\n        margin: '0 12px 0 8px',\n        // reset forced colors to browser control for inner actions\n        forcedColorAdjust: 'auto',\n        MsHighContrastAdjust: 'auto',\n        [SmallScreenSelector]: {\n          gridArea: 'action',\n          marginRight: 8,\n          marginBottom: 8,\n        },\n        selectors: {\n          '& button:nth-child(n+2)': {\n            marginLeft: 8,\n            [SmallScreenSelector]: {\n              marginBottom: 0,\n            },\n          },\n        },\n      },\n      isMultiline && {\n        marginBottom: 8,\n      },\n      onDismiss &&\n        !isMultiline && {\n          marginRight: 0,\n        },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { MessageBarBase } from './MessageBar.base';\nimport { getStyles } from './MessageBar.styles';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nexport const MessageBar: React.FunctionComponent<IMessageBarProps> = styled<\n  IMessageBarProps,\n  IMessageBarStyleProps,\n  IMessageBarStyles\n>(MessageBarBase, getStyles, undefined, {\n  scope: 'MessageBar',\n});\n","import * as React from 'react';\nimport { BaseButton, Button, IButtonProps } from '../../Button';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IIconProps } from '../../Icon';\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBar {}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarProps extends React.HTMLAttributes<HTMLElement>, React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the IMessageBar interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IMessageBar>;\n\n  /**\n   * The type of MessageBar to render.\n   * @defaultvalue MessageBarType.info\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * The actions you want to show on the other side.\n   */\n  actions?: JSX.Element;\n\n  /**\n   * A description of the message bar for the benefit of screen readers.\n   * @deprecated Use native prop `aria-label` instead.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Whether the message bar has a dismiss button and its callback.\n   * If null, we don't show a dismiss button.\n   * @defaultvalue null\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  onDismiss?: (ev?: React.MouseEvent<HTMLElement | BaseButton | Button>) => any;\n\n  /**\n   * Determines if the message bar is multi lined.\n   * If false, and the text overflows over buttons or to another line, it is clipped.\n   * @defaultvalue true\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Aria label on dismiss button if onDismiss is defined.\n   */\n  dismissButtonAriaLabel?: string;\n\n  /**\n   * Determines if the message bar text is truncated.\n   * If true, a button will render to toggle between a single line view and multiline view.\n   * This prop is for single line message bars with no buttons only in a limited space scenario.\n   * @defaultvalue false\n   */\n  truncated?: boolean;\n\n  /**\n   * Aria label on overflow button if truncated is defined.\n   * @deprecated Use `expandButtonProps` instead.\n   */\n  overflowButtonAriaLabel?: string;\n\n  /**\n   * Additional CSS class(es) to apply to the MessageBar.\n   */\n  className?: string;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IMessageBarStyleProps, IMessageBarStyles>;\n\n  /**\n   * Custom icon prop to replace the dismiss icon.\n   * If unset, default will be the Fabric Clear icon.\n   */\n  dismissIconProps?: IIconProps;\n\n  /**\n   * Custom icon prop to replace the message bar icon.\n   * If unset, default will be the icon set by messageBarType.\n   */\n  messageBarIconProps?: IIconProps;\n\n  /**\n   *  Button props that can be applied to the expand button of the MessageBar.\n   */\n  expandButtonProps?: IButtonProps;\n\n  /**\n   * Custom role to apply to the MessageBar.\n   * @defaultvalue `alert` if `messageBarType` is `error`, `blocked`, or `severeWarning`;\n   * or `status` otherwise\n   */\n  role?: 'alert' | 'status' | 'none';\n\n  /**\n   * By default, MessageBar delay-renders its content within an internal live region to help ensure\n   * it's announced by screen readers. You can disable that behavior by setting this prop to `false`.\n   *\n   * If you set this prop to `false`, to ensure proper announcement you should either:\n   * - If appropriate, ensure that the `role` prop is set to `alert` (this will be done by default\n   *   if `messageBarType` is `error`, `blocked`, or `severeWarning`), OR\n   * - Set the `role` prop to `none` (to avoid nested `status` regions), wrap the whole MessageBar\n   *   in a `<div role=\"status\">` which is always rendered, and ensure that the MessageBar is\n   *   rendered either conditionally or with a delay.\n   * @default true\n   */\n  delayedRender?: boolean;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarStyleProps {\n  /**\n   * Theme (provided through customization).\n   */\n  theme: ITheme;\n\n  /**\n   * Additional CSS class(es).\n   */\n  className?: string;\n\n  /**\n   * Type of the MessageBar.\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * Whether the MessageBar contains a dismiss button.\n   */\n  onDismiss?: boolean;\n\n  /**\n   * Whether the text is truncated.\n   */\n  truncated?: boolean;\n\n  /**\n   * Whether the MessageBar is rendered in multi line (as opposed to single line) mode.\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Whether the single line MessageBar is being expanded.\n   */\n  expandSingleLine?: boolean;\n\n  /**\n   * Whether the MessageBar contains any action elements.\n   */\n  actions?: boolean;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarStyles {\n  /**\n   * Style set for the root element.\n   */\n  root?: IStyle;\n\n  /**\n   * Style set for the element containing the icon, text, and optional dismiss button.\n   */\n  content?: IStyle;\n\n  /**\n   * Style set for the element containing the icon.\n   */\n  iconContainer?: IStyle;\n\n  /**\n   * Style set for the icon.\n   */\n  icon?: IStyle;\n\n  /**\n   * Style set for the element containing the text.\n   */\n  text?: IStyle;\n\n  /**\n   * Style set for the text.\n   */\n  innerText?: IStyle;\n\n  /**\n   * Style set for the optional dismiss button.\n   */\n  dismissal?: IStyle;\n\n  /**\n   * Style set for the icon used to expand and collapse the MessageBar.\n   */\n  expand?: IStyle;\n\n  /**\n   * Style set for the element containing the dismiss button.\n   */\n  dismissSingleLine?: IStyle;\n\n  /**\n   * Style set for the element containing the expand icon.\n   */\n  expandSingleLine?: IStyle;\n\n  /**\n   * Style set for the optional element containing the action elements.\n   */\n  actions?: IStyle;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport enum MessageBarType {\n  /** Info styled MessageBar */\n  info = 0,\n  /** Error styled MessageBar */\n  error = 1,\n  /** Blocked styled MessageBar */\n  blocked = 2,\n  /** SevereWarning styled MessageBar */\n  severeWarning = 3,\n  /** Success styled MessageBar */\n  success = 4,\n  /** Warning styled MessageBar */\n  warning = 5,\n}\n","import * as React from 'react';\nimport { getWindow } from './dom/getWindow';\nimport { IReactProps } from './React.types';\n\n/**\n * DelayedRender component props.\n *\n * @public\n */\n// eslint-disable-next-line deprecation/deprecation\nexport interface IDelayedRenderProps extends IReactProps<{}> {\n  /**\n   * Number of milliseconds to delay rendering children.\n   */\n  delay?: number;\n}\n\n/**\n * DelayedRender component state.\n *\n * @internal\n */\nexport interface IDelayedRenderState {\n  /**\n   * Whether the component is rendered or not.\n   */\n  isRendered: boolean;\n}\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nexport class DelayedRender extends React.Component<IDelayedRenderProps, IDelayedRenderState> {\n  public static defaultProps = {\n    delay: 0,\n  };\n\n  private _timeoutId: number | undefined;\n\n  constructor(props: IDelayedRenderProps) {\n    super(props);\n    this.state = {\n      isRendered: getWindow() === undefined,\n    };\n  }\n\n  public componentDidMount(): void {\n    let { delay } = this.props;\n    this._timeoutId = window.setTimeout(() => {\n      this.setState({\n        isRendered: true,\n      });\n    }, delay);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  }\n\n  public render(): React.ReactElement<{}> | null {\n    return this.state.isRendered ? (React.Children.only(this.props.children) as React.ReactElement<{}>) : null;\n  }\n}\n"],"names":["window","__NEXT_P","push","__webpack_require__","KNOWN_FEATURES","AdbFeature","ShellV2","StatV2","ListV2","FixedPushMkdir","AbbExec","sendrecv_v2_brotli","sendrecv_v2_lz4","sendrecv_v2_zstd","__webpack_exports__","observer","GLOBAL_STATE","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Stack","RouteStackProps","jsx","Head","title","MessageBar","code","span","adb","banner","product","Separator","model","device","br","features","map","feature","index","TooltipHost","content","Icon","style","marginLeft","iconName","Icons","Info","ICON_MAP","_a","MessageBar_types","f","info","warning","error","blocked","severeWarning","success","getClassNames","classNamesFunction","y","getAnnouncementPriority","messageBarType","getRole","MessageBarBase","react","forwardRef","props","ref","useBoolean","k","expandSingleLine","toggleExpandSingleLine","toggle","labelId","useId","M","actions","className","children","overflowButtonAriaLabel","dismissIconProps","styles","theme","_b","_c","onDismiss","undefined","_d","isMultiline","truncated","dismissButtonAriaLabel","messageBarIconProps","role","_e","delayedRender","expandButtonProps","nativeProps","properties","pq","iY","classNames","regionProps","actionsDiv","createElement","dismissButton","IconButton","h","disabled","dismissal","onClick","iconProps","ariaLabel","tslib_es6","pi","root","iconContainer","J","css","i","icon","text","id","innerText","DelayedRender","U","expand","dismissSingleLine","displayName","GlobalClassNames","multiline","singleline","dismissalSingleLine","expandingSingleLine","actionsSingleline","backgroundColor","MessageBar_styles_a","iconColor","highContrastBorderColor","highContrastWhiteBorderColor","styled","z","_m","semanticColors","fonts","SmallScreenSelector","lib","sK","mV","Cn","dismissalAndExpandIconStyle","fontSize","ld","xSmall","height","lineHeight","color","messageText","selectors","qJ","xM","dismissalAndExpandStyle","GL","inset","highContrastStyle","outlineOffset","outline","borderColor","flexShrink","width","padding","medium","background","boxSizing","minHeight","display","wordBreak","messageLink","messageLinkHovered","border","concat","bO","flexDirection","gridTemplateColumns","gridTemplateRows","gridTemplateAreas","minWidth","margin","gridArea","flexGrow","small","_f","_g","marginRight","paddingLeft","overflow","whiteSpace","textOverflow","_h","_j","_k","flexBasis","alignItems","forcedColorAdjust","MsHighContrastAdjust","marginBottom","_l","scope","MessageBarType","_super","_this","call","state","isRendered","_dom_getWindow__WEBPACK_IMPORTED_MODULE_2__","tslib__WEBPACK_IMPORTED_MODULE_1__","ZT","prototype","componentDidMount","delay","_timeoutId","setTimeout","setState","componentWillUnmount","clearTimeout","render","react__WEBPACK_IMPORTED_MODULE_0__","Children","only","defaultProps","Component"],"sourceRoot":""}
{"version":3,"file":"static/chunks/809-4f501808bfe04560.js","mappings":"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","sources":["webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.108.1_g6eqzmexmujy3zvaqhkicj5z64/node_modules/@fluentui/react/lib/components/src/components/Layer/LayerHost.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/webm-muxer@3.0.3/node_modules/webm-muxer/build/webm-muxer.js","webpack://_N_E/<anon>"],"sourcesContent":["import * as React from 'react';\nimport { useUnmount } from '@fluentui/react-hooks';\nimport { css, getId } from '../../Utilities';\nimport { notifyHostChanged, registerLayerHost, unregisterLayerHost } from './Layer.notification';\nimport type { ILayerHost, ILayerHostProps } from './LayerHost.types';\n\nexport const LayerHost: React.FunctionComponent<ILayerHostProps> = props => {\n  const { className } = props;\n\n  const [layerHostId] = React.useState(() => getId());\n\n  const { id: hostId = layerHostId } = props;\n\n  const layerHostRef = React.useRef<ILayerHost>({\n    hostId,\n    rootRef: React.useRef<HTMLDivElement | null>(null),\n    notifyLayersChanged: () => {\n      // Nothing, since the default implementation of Layer Host does not need to react to layer changes.\n    },\n  });\n\n  React.useImperativeHandle(props.componentRef, () => layerHostRef.current);\n\n  React.useEffect(() => {\n    registerLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n\n  useUnmount(() => {\n    unregisterLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n  });\n\n  return <div {...props} className={css('ms-LayerHost', className)} ref={layerHostRef.current.rootRef} />;\n};\n","\"use strict\";\nvar WebMMuxer = (() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getOwnPropSymbols = Object.getOwnPropertySymbols;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __propIsEnum = Object.prototype.propertyIsEnumerable;\n  var __pow = Math.pow;\n  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\n  var __spreadValues = (a, b) => {\n    for (var prop in b ||= {})\n      if (__hasOwnProp.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols)\n      for (var prop of __getOwnPropSymbols(b)) {\n        if (__propIsEnum.call(b, prop))\n          __defNormalProp(a, prop, b[prop]);\n      }\n    return a;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n  var __accessCheck = (obj, member, msg) => {\n    if (!member.has(obj))\n      throw TypeError(\"Cannot \" + msg);\n  };\n  var __privateGet = (obj, member, getter) => {\n    __accessCheck(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n  };\n  var __privateAdd = (obj, member, value) => {\n    if (member.has(obj))\n      throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n  };\n  var __privateSet = (obj, member, value, setter) => {\n    __accessCheck(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n  };\n  var __privateMethod = (obj, member, method) => {\n    __accessCheck(obj, member, \"access private method\");\n    return method;\n  };\n\n  // src/index.ts\n  var src_exports = {};\n  __export(src_exports, {\n    ArrayBufferTarget: () => ArrayBufferTarget,\n    FileSystemWritableFileStreamTarget: () => FileSystemWritableFileStreamTarget,\n    Muxer: () => Muxer,\n    StreamTarget: () => StreamTarget\n  });\n\n  // src/ebml.ts\n  var EBMLFloat32 = class {\n    constructor(value) {\n      this.value = value;\n    }\n  };\n  var EBMLFloat64 = class {\n    constructor(value) {\n      this.value = value;\n    }\n  };\n  var measureUnsignedInt = (value) => {\n    if (value < 1 << 8) {\n      return 1;\n    } else if (value < 1 << 16) {\n      return 2;\n    } else if (value < 1 << 24) {\n      return 3;\n    } else if (value < __pow(2, 32)) {\n      return 4;\n    } else if (value < __pow(2, 40)) {\n      return 5;\n    } else {\n      return 6;\n    }\n  };\n  var measureEBMLVarInt = (value) => {\n    if (value < (1 << 7) - 1) {\n      return 1;\n    } else if (value < (1 << 14) - 1) {\n      return 2;\n    } else if (value < (1 << 21) - 1) {\n      return 3;\n    } else if (value < (1 << 28) - 1) {\n      return 4;\n    } else if (value < __pow(2, 35) - 1) {\n      return 5;\n    } else if (value < __pow(2, 42) - 1) {\n      return 6;\n    } else {\n      throw new Error(\"EBML VINT size not supported \" + value);\n    }\n  };\n\n  // src/misc.ts\n  var readBits = (bytes, start, end) => {\n    let result = 0;\n    for (let i = start; i < end; i++) {\n      let byteIndex = Math.floor(i / 8);\n      let byte = bytes[byteIndex];\n      let bitIndex = 7 - (i & 7);\n      let bit = (byte & 1 << bitIndex) >> bitIndex;\n      result <<= 1;\n      result |= bit;\n    }\n    return result;\n  };\n  var writeBits = (bytes, start, end, value) => {\n    for (let i = start; i < end; i++) {\n      let byteIndex = Math.floor(i / 8);\n      let byte = bytes[byteIndex];\n      let bitIndex = 7 - (i & 7);\n      byte &= ~(1 << bitIndex);\n      byte |= (value & 1 << end - i - 1) >> end - i - 1 << bitIndex;\n      bytes[byteIndex] = byte;\n    }\n  };\n\n  // src/target.ts\n  var ArrayBufferTarget = class {\n    constructor() {\n      this.buffer = null;\n    }\n  };\n  var StreamTarget = class {\n    constructor(onData, onDone, options) {\n      this.onData = onData;\n      this.onDone = onDone;\n      this.options = options;\n    }\n  };\n  var FileSystemWritableFileStreamTarget = class {\n    constructor(stream) {\n      this.stream = stream;\n    }\n  };\n\n  // src/writer.ts\n  var _helper, _helperView, _writeByte, writeByte_fn, _writeFloat32, writeFloat32_fn, _writeFloat64, writeFloat64_fn, _writeUnsignedInt, writeUnsignedInt_fn, _writeString, writeString_fn;\n  var Writer = class {\n    constructor() {\n      __privateAdd(this, _writeByte);\n      __privateAdd(this, _writeFloat32);\n      __privateAdd(this, _writeFloat64);\n      __privateAdd(this, _writeUnsignedInt);\n      __privateAdd(this, _writeString);\n      this.pos = 0;\n      __privateAdd(this, _helper, new Uint8Array(8));\n      __privateAdd(this, _helperView, new DataView(__privateGet(this, _helper).buffer));\n      this.offsets = /* @__PURE__ */ new WeakMap();\n      this.dataOffsets = /* @__PURE__ */ new WeakMap();\n    }\n    seek(newPos) {\n      this.pos = newPos;\n    }\n    writeEBMLVarInt(value, width = measureEBMLVarInt(value)) {\n      let pos = 0;\n      switch (width) {\n        case 1:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 7 | value);\n          break;\n        case 2:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 6 | value >> 8);\n          __privateGet(this, _helperView).setUint8(pos++, value);\n          break;\n        case 3:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 5 | value >> 16);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 8);\n          __privateGet(this, _helperView).setUint8(pos++, value);\n          break;\n        case 4:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 4 | value >> 24);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 16);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 8);\n          __privateGet(this, _helperView).setUint8(pos++, value);\n          break;\n        case 5:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 3 | value / __pow(2, 32) & 7);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 24);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 16);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 8);\n          __privateGet(this, _helperView).setUint8(pos++, value);\n          break;\n        case 6:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 2 | value / __pow(2, 40) & 3);\n          __privateGet(this, _helperView).setUint8(pos++, value / __pow(2, 32) | 0);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 24);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 16);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 8);\n          __privateGet(this, _helperView).setUint8(pos++, value);\n          break;\n        default:\n          throw new Error(\"Bad EBML VINT size \" + width);\n      }\n      this.write(__privateGet(this, _helper).subarray(0, pos));\n    }\n    writeEBML(data) {\n      var _a, _b;\n      if (data === null)\n        return;\n      if (data instanceof Uint8Array) {\n        this.write(data);\n      } else if (Array.isArray(data)) {\n        for (let elem of data) {\n          this.writeEBML(elem);\n        }\n      } else {\n        this.offsets.set(data, this.pos);\n        __privateMethod(this, _writeUnsignedInt, writeUnsignedInt_fn).call(this, data.id);\n        if (Array.isArray(data.data)) {\n          let sizePos = this.pos;\n          let sizeSize = data.size === -1 ? 1 : (_a = data.size) != null ? _a : 4;\n          if (data.size === -1) {\n            __privateMethod(this, _writeByte, writeByte_fn).call(this, 255);\n          } else {\n            this.seek(this.pos + sizeSize);\n          }\n          let startPos = this.pos;\n          this.dataOffsets.set(data, startPos);\n          this.writeEBML(data.data);\n          if (data.size !== -1) {\n            let size = this.pos - startPos;\n            let endPos = this.pos;\n            this.seek(sizePos);\n            this.writeEBMLVarInt(size, sizeSize);\n            this.seek(endPos);\n          }\n        } else if (typeof data.data === \"number\") {\n          let size = (_b = data.size) != null ? _b : measureUnsignedInt(data.data);\n          this.writeEBMLVarInt(size);\n          __privateMethod(this, _writeUnsignedInt, writeUnsignedInt_fn).call(this, data.data, size);\n        } else if (typeof data.data === \"string\") {\n          this.writeEBMLVarInt(data.data.length);\n          __privateMethod(this, _writeString, writeString_fn).call(this, data.data);\n        } else if (data.data instanceof Uint8Array) {\n          this.writeEBMLVarInt(data.data.byteLength, data.size);\n          this.write(data.data);\n        } else if (data.data instanceof EBMLFloat32) {\n          this.writeEBMLVarInt(4);\n          __privateMethod(this, _writeFloat32, writeFloat32_fn).call(this, data.data.value);\n        } else if (data.data instanceof EBMLFloat64) {\n          this.writeEBMLVarInt(8);\n          __privateMethod(this, _writeFloat64, writeFloat64_fn).call(this, data.data.value);\n        }\n      }\n    }\n  };\n  _helper = new WeakMap();\n  _helperView = new WeakMap();\n  _writeByte = new WeakSet();\n  writeByte_fn = function(value) {\n    __privateGet(this, _helperView).setUint8(0, value);\n    this.write(__privateGet(this, _helper).subarray(0, 1));\n  };\n  _writeFloat32 = new WeakSet();\n  writeFloat32_fn = function(value) {\n    __privateGet(this, _helperView).setFloat32(0, value, false);\n    this.write(__privateGet(this, _helper).subarray(0, 4));\n  };\n  _writeFloat64 = new WeakSet();\n  writeFloat64_fn = function(value) {\n    __privateGet(this, _helperView).setFloat64(0, value, false);\n    this.write(__privateGet(this, _helper));\n  };\n  _writeUnsignedInt = new WeakSet();\n  writeUnsignedInt_fn = function(value, width = measureUnsignedInt(value)) {\n    let pos = 0;\n    switch (width) {\n      case 6:\n        __privateGet(this, _helperView).setUint8(pos++, value / __pow(2, 40) | 0);\n      case 5:\n        __privateGet(this, _helperView).setUint8(pos++, value / __pow(2, 32) | 0);\n      case 4:\n        __privateGet(this, _helperView).setUint8(pos++, value >> 24);\n      case 3:\n        __privateGet(this, _helperView).setUint8(pos++, value >> 16);\n      case 2:\n        __privateGet(this, _helperView).setUint8(pos++, value >> 8);\n      case 1:\n        __privateGet(this, _helperView).setUint8(pos++, value);\n        break;\n      default:\n        throw new Error(\"Bad UINT size \" + width);\n    }\n    this.write(__privateGet(this, _helper).subarray(0, pos));\n  };\n  _writeString = new WeakSet();\n  writeString_fn = function(str) {\n    this.write(new Uint8Array(str.split(\"\").map((x) => x.charCodeAt(0))));\n  };\n  var _target, _buffer, _bytes, _ensureSize, ensureSize_fn;\n  var ArrayBufferTargetWriter = class extends Writer {\n    constructor(target) {\n      super();\n      __privateAdd(this, _ensureSize);\n      __privateAdd(this, _target, void 0);\n      __privateAdd(this, _buffer, new ArrayBuffer(__pow(2, 16)));\n      __privateAdd(this, _bytes, new Uint8Array(__privateGet(this, _buffer)));\n      __privateSet(this, _target, target);\n    }\n    write(data) {\n      __privateMethod(this, _ensureSize, ensureSize_fn).call(this, this.pos + data.byteLength);\n      __privateGet(this, _bytes).set(data, this.pos);\n      this.pos += data.byteLength;\n    }\n    finalize() {\n      __privateMethod(this, _ensureSize, ensureSize_fn).call(this, this.pos);\n      __privateGet(this, _target).buffer = __privateGet(this, _buffer).slice(0, this.pos);\n    }\n  };\n  _target = new WeakMap();\n  _buffer = new WeakMap();\n  _bytes = new WeakMap();\n  _ensureSize = new WeakSet();\n  ensureSize_fn = function(size) {\n    let newLength = __privateGet(this, _buffer).byteLength;\n    while (newLength < size)\n      newLength *= 2;\n    if (newLength === __privateGet(this, _buffer).byteLength)\n      return;\n    let newBuffer = new ArrayBuffer(newLength);\n    let newBytes = new Uint8Array(newBuffer);\n    newBytes.set(__privateGet(this, _bytes), 0);\n    __privateSet(this, _buffer, newBuffer);\n    __privateSet(this, _bytes, newBytes);\n  };\n  var _target2, _sections, _lastFlushEnd, _ensureMonotonicity;\n  var StreamTargetWriter = class extends Writer {\n    constructor(target, ensureMonotonicity) {\n      super();\n      __privateAdd(this, _target2, void 0);\n      __privateAdd(this, _sections, []);\n      __privateAdd(this, _lastFlushEnd, 0);\n      __privateAdd(this, _ensureMonotonicity, void 0);\n      __privateSet(this, _target2, target);\n      __privateSet(this, _ensureMonotonicity, ensureMonotonicity);\n    }\n    write(data) {\n      __privateGet(this, _sections).push({\n        data: data.slice(),\n        start: this.pos\n      });\n      this.pos += data.byteLength;\n    }\n    flush() {\n      if (__privateGet(this, _sections).length === 0)\n        return;\n      let chunks = [];\n      let sorted = [...__privateGet(this, _sections)].sort((a, b) => a.start - b.start);\n      chunks.push({\n        start: sorted[0].start,\n        size: sorted[0].data.byteLength\n      });\n      for (let i = 1; i < sorted.length; i++) {\n        let lastChunk = chunks[chunks.length - 1];\n        let section = sorted[i];\n        if (section.start <= lastChunk.start + lastChunk.size) {\n          lastChunk.size = Math.max(lastChunk.size, section.start + section.data.byteLength - lastChunk.start);\n        } else {\n          chunks.push({\n            start: section.start,\n            size: section.data.byteLength\n          });\n        }\n      }\n      for (let chunk of chunks) {\n        chunk.data = new Uint8Array(chunk.size);\n        for (let section of __privateGet(this, _sections)) {\n          if (chunk.start <= section.start && section.start < chunk.start + chunk.size) {\n            chunk.data.set(section.data, section.start - chunk.start);\n          }\n        }\n        if (__privateGet(this, _ensureMonotonicity) && chunk.start < __privateGet(this, _lastFlushEnd)) {\n          throw new Error(\"Internal error: Monotonicity violation.\");\n        }\n        __privateGet(this, _target2).onData(chunk.data, chunk.start);\n        __privateSet(this, _lastFlushEnd, chunk.start + chunk.data.byteLength);\n      }\n      __privateGet(this, _sections).length = 0;\n    }\n    finalize() {\n      var _a, _b;\n      (_b = (_a = __privateGet(this, _target2)).onDone) == null ? void 0 : _b.call(_a);\n    }\n  };\n  _target2 = new WeakMap();\n  _sections = new WeakMap();\n  _lastFlushEnd = new WeakMap();\n  _ensureMonotonicity = new WeakMap();\n  var CHUNK_SIZE = __pow(2, 24);\n  var MAX_CHUNKS_AT_ONCE = 2;\n  var _target3, _chunks, _lastFlushEnd2, _ensureMonotonicity2, _writeDataIntoChunks, writeDataIntoChunks_fn, _insertSectionIntoChunk, insertSectionIntoChunk_fn, _createChunk, createChunk_fn, _flushChunks, flushChunks_fn;\n  var ChunkedStreamTargetWriter = class extends Writer {\n    constructor(target, ensureMonotonicity) {\n      super();\n      __privateAdd(this, _writeDataIntoChunks);\n      __privateAdd(this, _insertSectionIntoChunk);\n      __privateAdd(this, _createChunk);\n      __privateAdd(this, _flushChunks);\n      __privateAdd(this, _target3, void 0);\n      __privateAdd(this, _chunks, []);\n      __privateAdd(this, _lastFlushEnd2, 0);\n      __privateAdd(this, _ensureMonotonicity2, void 0);\n      __privateSet(this, _target3, target);\n      __privateSet(this, _ensureMonotonicity2, ensureMonotonicity);\n    }\n    write(data) {\n      __privateMethod(this, _writeDataIntoChunks, writeDataIntoChunks_fn).call(this, data, this.pos);\n      __privateMethod(this, _flushChunks, flushChunks_fn).call(this);\n      this.pos += data.byteLength;\n    }\n    finalize() {\n      var _a, _b;\n      __privateMethod(this, _flushChunks, flushChunks_fn).call(this, true);\n      (_b = (_a = __privateGet(this, _target3)).onDone) == null ? void 0 : _b.call(_a);\n    }\n  };\n  _target3 = new WeakMap();\n  _chunks = new WeakMap();\n  _lastFlushEnd2 = new WeakMap();\n  _ensureMonotonicity2 = new WeakMap();\n  _writeDataIntoChunks = new WeakSet();\n  writeDataIntoChunks_fn = function(data, position) {\n    let chunkIndex = __privateGet(this, _chunks).findIndex((x) => x.start <= position && position < x.start + CHUNK_SIZE);\n    if (chunkIndex === -1)\n      chunkIndex = __privateMethod(this, _createChunk, createChunk_fn).call(this, position);\n    let chunk = __privateGet(this, _chunks)[chunkIndex];\n    let relativePosition = position - chunk.start;\n    let toWrite = data.subarray(0, Math.min(CHUNK_SIZE - relativePosition, data.byteLength));\n    chunk.data.set(toWrite, relativePosition);\n    let section = {\n      start: relativePosition,\n      end: relativePosition + toWrite.byteLength\n    };\n    __privateMethod(this, _insertSectionIntoChunk, insertSectionIntoChunk_fn).call(this, chunk, section);\n    if (chunk.written[0].start === 0 && chunk.written[0].end === CHUNK_SIZE) {\n      chunk.shouldFlush = true;\n    }\n    if (__privateGet(this, _chunks).length > MAX_CHUNKS_AT_ONCE) {\n      for (let i = 0; i < __privateGet(this, _chunks).length - 1; i++) {\n        __privateGet(this, _chunks)[i].shouldFlush = true;\n      }\n      __privateMethod(this, _flushChunks, flushChunks_fn).call(this);\n    }\n    if (toWrite.byteLength < data.byteLength) {\n      __privateMethod(this, _writeDataIntoChunks, writeDataIntoChunks_fn).call(this, data.subarray(toWrite.byteLength), position + toWrite.byteLength);\n    }\n  };\n  _insertSectionIntoChunk = new WeakSet();\n  insertSectionIntoChunk_fn = function(chunk, section) {\n    let low = 0;\n    let high = chunk.written.length - 1;\n    let index = -1;\n    while (low <= high) {\n      let mid = Math.floor(low + (high - low + 1) / 2);\n      if (chunk.written[mid].start <= section.start) {\n        low = mid + 1;\n        index = mid;\n      } else {\n        high = mid - 1;\n      }\n    }\n    chunk.written.splice(index + 1, 0, section);\n    if (index === -1 || chunk.written[index].end < section.start)\n      index++;\n    while (index < chunk.written.length - 1 && chunk.written[index].end >= chunk.written[index + 1].start) {\n      chunk.written[index].end = Math.max(chunk.written[index].end, chunk.written[index + 1].end);\n      chunk.written.splice(index + 1, 1);\n    }\n  };\n  _createChunk = new WeakSet();\n  createChunk_fn = function(includesPosition) {\n    let start = Math.floor(includesPosition / CHUNK_SIZE) * CHUNK_SIZE;\n    let chunk = {\n      start,\n      data: new Uint8Array(CHUNK_SIZE),\n      written: [],\n      shouldFlush: false\n    };\n    __privateGet(this, _chunks).push(chunk);\n    __privateGet(this, _chunks).sort((a, b) => a.start - b.start);\n    return __privateGet(this, _chunks).indexOf(chunk);\n  };\n  _flushChunks = new WeakSet();\n  flushChunks_fn = function(force = false) {\n    for (let i = 0; i < __privateGet(this, _chunks).length; i++) {\n      let chunk = __privateGet(this, _chunks)[i];\n      if (!chunk.shouldFlush && !force)\n        continue;\n      for (let section of chunk.written) {\n        if (__privateGet(this, _ensureMonotonicity2) && chunk.start + section.start < __privateGet(this, _lastFlushEnd2)) {\n          throw new Error(\"Internal error: Monotonicity violation.\");\n        }\n        __privateGet(this, _target3).onData(\n          chunk.data.subarray(section.start, section.end),\n          chunk.start + section.start\n        );\n        __privateSet(this, _lastFlushEnd2, chunk.start + section.end);\n      }\n      __privateGet(this, _chunks).splice(i--, 1);\n    }\n  };\n  var FileSystemWritableFileStreamTargetWriter = class extends ChunkedStreamTargetWriter {\n    constructor(target, ensureMonotonicity) {\n      super(new StreamTarget(\n        (data, position) => target.stream.write({\n          type: \"write\",\n          data,\n          position\n        })\n      ), ensureMonotonicity);\n    }\n  };\n\n  // src/muxer.ts\n  var VIDEO_TRACK_NUMBER = 1;\n  var AUDIO_TRACK_NUMBER = 2;\n  var VIDEO_TRACK_TYPE = 1;\n  var AUDIO_TRACK_TYPE = 2;\n  var MAX_CHUNK_LENGTH_MS = __pow(2, 15);\n  var CODEC_PRIVATE_MAX_SIZE = __pow(2, 12);\n  var APP_NAME = \"https://github.com/Vanilagy/webm-muxer\";\n  var SEGMENT_SIZE_BYTES = 6;\n  var CLUSTER_SIZE_BYTES = 5;\n  var FIRST_TIMESTAMP_BEHAVIORS = [\"strict\", \"offset\", \"permissive\"];\n  var _options, _writer, _segment, _segmentInfo, _seekHead, _tracksElement, _segmentDuration, _colourElement, _videoCodecPrivate, _audioCodecPrivate, _cues, _currentCluster, _currentClusterTimestamp, _duration, _videoChunkQueue, _audioChunkQueue, _firstVideoTimestamp, _firstAudioTimestamp, _lastVideoTimestamp, _lastAudioTimestamp, _colorSpace, _finalized, _validateOptions, validateOptions_fn, _createFileHeader, createFileHeader_fn, _writeEBMLHeader, writeEBMLHeader_fn, _createCodecPrivatePlaceholders, createCodecPrivatePlaceholders_fn, _createColourElement, createColourElement_fn, _createSeekHead, createSeekHead_fn, _createSegmentInfo, createSegmentInfo_fn, _createTracks, createTracks_fn, _createSegment, createSegment_fn, _createCues, createCues_fn, _maybeFlushStreamingTargetWriter, maybeFlushStreamingTargetWriter_fn, _segmentDataOffset, segmentDataOffset_get, _writeVideoDecoderConfig, writeVideoDecoderConfig_fn, _fixVP9ColorSpace, fixVP9ColorSpace_fn, _createInternalChunk, createInternalChunk_fn, _validateTimestamp, validateTimestamp_fn, _writeSimpleBlock, writeSimpleBlock_fn, _createCodecPrivateElement, createCodecPrivateElement_fn, _writeCodecPrivate, writeCodecPrivate_fn, _createNewCluster, createNewCluster_fn, _finalizeCurrentCluster, finalizeCurrentCluster_fn, _ensureNotFinalized, ensureNotFinalized_fn;\n  var Muxer = class {\n    constructor(options) {\n      __privateAdd(this, _validateOptions);\n      __privateAdd(this, _createFileHeader);\n      __privateAdd(this, _writeEBMLHeader);\n      __privateAdd(this, _createCodecPrivatePlaceholders);\n      __privateAdd(this, _createColourElement);\n      __privateAdd(this, _createSeekHead);\n      __privateAdd(this, _createSegmentInfo);\n      __privateAdd(this, _createTracks);\n      __privateAdd(this, _createSegment);\n      __privateAdd(this, _createCues);\n      __privateAdd(this, _maybeFlushStreamingTargetWriter);\n      __privateAdd(this, _segmentDataOffset);\n      __privateAdd(this, _writeVideoDecoderConfig);\n      __privateAdd(this, _fixVP9ColorSpace);\n      __privateAdd(this, _createInternalChunk);\n      __privateAdd(this, _validateTimestamp);\n      __privateAdd(this, _writeSimpleBlock);\n      __privateAdd(this, _createCodecPrivateElement);\n      __privateAdd(this, _writeCodecPrivate);\n      __privateAdd(this, _createNewCluster);\n      __privateAdd(this, _finalizeCurrentCluster);\n      __privateAdd(this, _ensureNotFinalized);\n      __privateAdd(this, _options, void 0);\n      __privateAdd(this, _writer, void 0);\n      __privateAdd(this, _segment, void 0);\n      __privateAdd(this, _segmentInfo, void 0);\n      __privateAdd(this, _seekHead, void 0);\n      __privateAdd(this, _tracksElement, void 0);\n      __privateAdd(this, _segmentDuration, void 0);\n      __privateAdd(this, _colourElement, void 0);\n      __privateAdd(this, _videoCodecPrivate, void 0);\n      __privateAdd(this, _audioCodecPrivate, void 0);\n      __privateAdd(this, _cues, void 0);\n      __privateAdd(this, _currentCluster, void 0);\n      __privateAdd(this, _currentClusterTimestamp, void 0);\n      __privateAdd(this, _duration, 0);\n      __privateAdd(this, _videoChunkQueue, []);\n      __privateAdd(this, _audioChunkQueue, []);\n      __privateAdd(this, _firstVideoTimestamp, void 0);\n      __privateAdd(this, _firstAudioTimestamp, void 0);\n      __privateAdd(this, _lastVideoTimestamp, -1);\n      __privateAdd(this, _lastAudioTimestamp, -1);\n      __privateAdd(this, _colorSpace, void 0);\n      __privateAdd(this, _finalized, false);\n      var _a;\n      __privateMethod(this, _validateOptions, validateOptions_fn).call(this, options);\n      __privateSet(this, _options, __spreadValues({\n        type: \"webm\",\n        firstTimestampBehavior: \"strict\"\n      }, options));\n      this.target = options.target;\n      let ensureMonotonicity = !!__privateGet(this, _options).streaming;\n      if (options.target instanceof ArrayBufferTarget) {\n        __privateSet(this, _writer, new ArrayBufferTargetWriter(options.target));\n      } else if (options.target instanceof StreamTarget) {\n        __privateSet(this, _writer, ((_a = options.target.options) == null ? void 0 : _a.chunked) ? new ChunkedStreamTargetWriter(options.target, ensureMonotonicity) : new StreamTargetWriter(options.target, ensureMonotonicity));\n      } else if (options.target instanceof FileSystemWritableFileStreamTarget) {\n        __privateSet(this, _writer, new FileSystemWritableFileStreamTargetWriter(options.target, ensureMonotonicity));\n      } else {\n        throw new Error(`Invalid target: ${options.target}`);\n      }\n      __privateMethod(this, _createFileHeader, createFileHeader_fn).call(this);\n    }\n    addVideoChunk(chunk, meta, timestamp) {\n      let data = new Uint8Array(chunk.byteLength);\n      chunk.copyTo(data);\n      this.addVideoChunkRaw(data, chunk.type, timestamp != null ? timestamp : chunk.timestamp, meta);\n    }\n    addVideoChunkRaw(data, type, timestamp, meta) {\n      __privateMethod(this, _ensureNotFinalized, ensureNotFinalized_fn).call(this);\n      if (!__privateGet(this, _options).video)\n        throw new Error(\"No video track declared.\");\n      if (__privateGet(this, _firstVideoTimestamp) === void 0)\n        __privateSet(this, _firstVideoTimestamp, timestamp);\n      if (meta)\n        __privateMethod(this, _writeVideoDecoderConfig, writeVideoDecoderConfig_fn).call(this, meta);\n      let internalChunk = __privateMethod(this, _createInternalChunk, createInternalChunk_fn).call(this, data, type, timestamp, VIDEO_TRACK_NUMBER);\n      if (__privateGet(this, _options).video.codec === \"V_VP9\")\n        __privateMethod(this, _fixVP9ColorSpace, fixVP9ColorSpace_fn).call(this, internalChunk);\n      __privateSet(this, _lastVideoTimestamp, internalChunk.timestamp);\n      while (__privateGet(this, _audioChunkQueue).length > 0 && __privateGet(this, _audioChunkQueue)[0].timestamp <= internalChunk.timestamp) {\n        let audioChunk = __privateGet(this, _audioChunkQueue).shift();\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, audioChunk);\n      }\n      if (!__privateGet(this, _options).audio || internalChunk.timestamp <= __privateGet(this, _lastAudioTimestamp)) {\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, internalChunk);\n      } else {\n        __privateGet(this, _videoChunkQueue).push(internalChunk);\n      }\n      __privateMethod(this, _maybeFlushStreamingTargetWriter, maybeFlushStreamingTargetWriter_fn).call(this);\n    }\n    addAudioChunk(chunk, meta, timestamp) {\n      let data = new Uint8Array(chunk.byteLength);\n      chunk.copyTo(data);\n      this.addAudioChunkRaw(data, chunk.type, timestamp != null ? timestamp : chunk.timestamp, meta);\n    }\n    addAudioChunkRaw(data, type, timestamp, meta) {\n      __privateMethod(this, _ensureNotFinalized, ensureNotFinalized_fn).call(this);\n      if (!__privateGet(this, _options).audio)\n        throw new Error(\"No audio track declared.\");\n      if (__privateGet(this, _firstAudioTimestamp) === void 0)\n        __privateSet(this, _firstAudioTimestamp, timestamp);\n      if (meta == null ? void 0 : meta.decoderConfig) {\n        if (__privateGet(this, _options).streaming) {\n          __privateSet(this, _audioCodecPrivate, __privateMethod(this, _createCodecPrivateElement, createCodecPrivateElement_fn).call(this, meta.decoderConfig.description));\n        } else {\n          __privateMethod(this, _writeCodecPrivate, writeCodecPrivate_fn).call(this, __privateGet(this, _audioCodecPrivate), meta.decoderConfig.description);\n        }\n      }\n      let internalChunk = __privateMethod(this, _createInternalChunk, createInternalChunk_fn).call(this, data, type, timestamp, AUDIO_TRACK_NUMBER);\n      __privateSet(this, _lastAudioTimestamp, internalChunk.timestamp);\n      while (__privateGet(this, _videoChunkQueue).length > 0 && __privateGet(this, _videoChunkQueue)[0].timestamp <= internalChunk.timestamp) {\n        let videoChunk = __privateGet(this, _videoChunkQueue).shift();\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, videoChunk);\n      }\n      if (!__privateGet(this, _options).video || internalChunk.timestamp <= __privateGet(this, _lastVideoTimestamp)) {\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, internalChunk);\n      } else {\n        __privateGet(this, _audioChunkQueue).push(internalChunk);\n      }\n      __privateMethod(this, _maybeFlushStreamingTargetWriter, maybeFlushStreamingTargetWriter_fn).call(this);\n    }\n    finalize() {\n      while (__privateGet(this, _videoChunkQueue).length > 0)\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, __privateGet(this, _videoChunkQueue).shift());\n      while (__privateGet(this, _audioChunkQueue).length > 0)\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, __privateGet(this, _audioChunkQueue).shift());\n      if (!__privateGet(this, _options).streaming) {\n        __privateMethod(this, _finalizeCurrentCluster, finalizeCurrentCluster_fn).call(this);\n      }\n      __privateGet(this, _writer).writeEBML(__privateGet(this, _cues));\n      if (!__privateGet(this, _options).streaming) {\n        let endPos = __privateGet(this, _writer).pos;\n        let segmentSize = __privateGet(this, _writer).pos - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n        __privateGet(this, _writer).seek(__privateGet(this, _writer).offsets.get(__privateGet(this, _segment)) + 4);\n        __privateGet(this, _writer).writeEBMLVarInt(segmentSize, SEGMENT_SIZE_BYTES);\n        __privateGet(this, _segmentDuration).data = new EBMLFloat64(__privateGet(this, _duration));\n        __privateGet(this, _writer).seek(__privateGet(this, _writer).offsets.get(__privateGet(this, _segmentDuration)));\n        __privateGet(this, _writer).writeEBML(__privateGet(this, _segmentDuration));\n        __privateGet(this, _seekHead).data[0].data[1].data = __privateGet(this, _writer).offsets.get(__privateGet(this, _cues)) - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n        __privateGet(this, _seekHead).data[1].data[1].data = __privateGet(this, _writer).offsets.get(__privateGet(this, _segmentInfo)) - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n        __privateGet(this, _seekHead).data[2].data[1].data = __privateGet(this, _writer).offsets.get(__privateGet(this, _tracksElement)) - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n        __privateGet(this, _writer).seek(__privateGet(this, _writer).offsets.get(__privateGet(this, _seekHead)));\n        __privateGet(this, _writer).writeEBML(__privateGet(this, _seekHead));\n        __privateGet(this, _writer).seek(endPos);\n      }\n      __privateMethod(this, _maybeFlushStreamingTargetWriter, maybeFlushStreamingTargetWriter_fn).call(this);\n      __privateGet(this, _writer).finalize();\n      __privateSet(this, _finalized, true);\n    }\n  };\n  _options = new WeakMap();\n  _writer = new WeakMap();\n  _segment = new WeakMap();\n  _segmentInfo = new WeakMap();\n  _seekHead = new WeakMap();\n  _tracksElement = new WeakMap();\n  _segmentDuration = new WeakMap();\n  _colourElement = new WeakMap();\n  _videoCodecPrivate = new WeakMap();\n  _audioCodecPrivate = new WeakMap();\n  _cues = new WeakMap();\n  _currentCluster = new WeakMap();\n  _currentClusterTimestamp = new WeakMap();\n  _duration = new WeakMap();\n  _videoChunkQueue = new WeakMap();\n  _audioChunkQueue = new WeakMap();\n  _firstVideoTimestamp = new WeakMap();\n  _firstAudioTimestamp = new WeakMap();\n  _lastVideoTimestamp = new WeakMap();\n  _lastAudioTimestamp = new WeakMap();\n  _colorSpace = new WeakMap();\n  _finalized = new WeakMap();\n  _validateOptions = new WeakSet();\n  validateOptions_fn = function(options) {\n    if (options.type && options.type !== \"webm\" && options.type !== \"matroska\") {\n      throw new Error(`Invalid type: ${options.type}`);\n    }\n    if (options.firstTimestampBehavior && !FIRST_TIMESTAMP_BEHAVIORS.includes(options.firstTimestampBehavior)) {\n      throw new Error(`Invalid first timestamp behavior: ${options.firstTimestampBehavior}`);\n    }\n  };\n  _createFileHeader = new WeakSet();\n  createFileHeader_fn = function() {\n    __privateMethod(this, _writeEBMLHeader, writeEBMLHeader_fn).call(this);\n    if (!__privateGet(this, _options).streaming) {\n      __privateMethod(this, _createSeekHead, createSeekHead_fn).call(this);\n    }\n    __privateMethod(this, _createSegmentInfo, createSegmentInfo_fn).call(this);\n    __privateMethod(this, _createCodecPrivatePlaceholders, createCodecPrivatePlaceholders_fn).call(this);\n    __privateMethod(this, _createColourElement, createColourElement_fn).call(this);\n    if (!__privateGet(this, _options).streaming) {\n      __privateMethod(this, _createTracks, createTracks_fn).call(this);\n      __privateMethod(this, _createSegment, createSegment_fn).call(this);\n    } else {\n    }\n    __privateMethod(this, _createCues, createCues_fn).call(this);\n    __privateMethod(this, _maybeFlushStreamingTargetWriter, maybeFlushStreamingTargetWriter_fn).call(this);\n  };\n  _writeEBMLHeader = new WeakSet();\n  writeEBMLHeader_fn = function() {\n    var _a;\n    let ebmlHeader = { id: 440786851 /* EBML */, data: [\n      { id: 17030 /* EBMLVersion */, data: 1 },\n      { id: 17143 /* EBMLReadVersion */, data: 1 },\n      { id: 17138 /* EBMLMaxIDLength */, data: 4 },\n      { id: 17139 /* EBMLMaxSizeLength */, data: 8 },\n      { id: 17026 /* DocType */, data: (_a = __privateGet(this, _options).type) != null ? _a : \"webm\" },\n      { id: 17031 /* DocTypeVersion */, data: 2 },\n      { id: 17029 /* DocTypeReadVersion */, data: 2 }\n    ] };\n    __privateGet(this, _writer).writeEBML(ebmlHeader);\n  };\n  _createCodecPrivatePlaceholders = new WeakSet();\n  createCodecPrivatePlaceholders_fn = function() {\n    __privateSet(this, _videoCodecPrivate, { id: 236 /* Void */, size: 4, data: new Uint8Array(CODEC_PRIVATE_MAX_SIZE) });\n    __privateSet(this, _audioCodecPrivate, { id: 236 /* Void */, size: 4, data: new Uint8Array(CODEC_PRIVATE_MAX_SIZE) });\n  };\n  _createColourElement = new WeakSet();\n  createColourElement_fn = function() {\n    __privateSet(this, _colourElement, { id: 21936 /* Colour */, data: [\n      { id: 21937 /* MatrixCoefficients */, data: 2 },\n      { id: 21946 /* TransferCharacteristics */, data: 2 },\n      { id: 21947 /* Primaries */, data: 2 },\n      { id: 21945 /* Range */, data: 0 }\n    ] });\n  };\n  _createSeekHead = new WeakSet();\n  createSeekHead_fn = function() {\n    const kaxCues = new Uint8Array([28, 83, 187, 107]);\n    const kaxInfo = new Uint8Array([21, 73, 169, 102]);\n    const kaxTracks = new Uint8Array([22, 84, 174, 107]);\n    let seekHead = { id: 290298740 /* SeekHead */, data: [\n      { id: 19899 /* Seek */, data: [\n        { id: 21419 /* SeekID */, data: kaxCues },\n        { id: 21420 /* SeekPosition */, size: 5, data: 0 }\n      ] },\n      { id: 19899 /* Seek */, data: [\n        { id: 21419 /* SeekID */, data: kaxInfo },\n        { id: 21420 /* SeekPosition */, size: 5, data: 0 }\n      ] },\n      { id: 19899 /* Seek */, data: [\n        { id: 21419 /* SeekID */, data: kaxTracks },\n        { id: 21420 /* SeekPosition */, size: 5, data: 0 }\n      ] }\n    ] };\n    __privateSet(this, _seekHead, seekHead);\n  };\n  _createSegmentInfo = new WeakSet();\n  createSegmentInfo_fn = function() {\n    let segmentDuration = { id: 17545 /* Duration */, data: new EBMLFloat64(0) };\n    __privateSet(this, _segmentDuration, segmentDuration);\n    let segmentInfo = { id: 357149030 /* Info */, data: [\n      { id: 2807729 /* TimestampScale */, data: 1e6 },\n      { id: 19840 /* MuxingApp */, data: APP_NAME },\n      { id: 22337 /* WritingApp */, data: APP_NAME },\n      !__privateGet(this, _options).streaming ? segmentDuration : null\n    ] };\n    __privateSet(this, _segmentInfo, segmentInfo);\n  };\n  _createTracks = new WeakSet();\n  createTracks_fn = function() {\n    let tracksElement = { id: 374648427 /* Tracks */, data: [] };\n    __privateSet(this, _tracksElement, tracksElement);\n    if (__privateGet(this, _options).video) {\n      tracksElement.data.push({ id: 174 /* TrackEntry */, data: [\n        { id: 215 /* TrackNumber */, data: VIDEO_TRACK_NUMBER },\n        { id: 29637 /* TrackUID */, data: VIDEO_TRACK_NUMBER },\n        { id: 131 /* TrackType */, data: VIDEO_TRACK_TYPE },\n        { id: 134 /* CodecID */, data: __privateGet(this, _options).video.codec },\n        __privateGet(this, _videoCodecPrivate),\n        __privateGet(this, _options).video.frameRate ? { id: 2352003 /* DefaultDuration */, data: 1e9 / __privateGet(this, _options).video.frameRate } : null,\n        { id: 224 /* Video */, data: [\n          { id: 176 /* PixelWidth */, data: __privateGet(this, _options).video.width },\n          { id: 186 /* PixelHeight */, data: __privateGet(this, _options).video.height },\n          __privateGet(this, _options).video.alpha ? { id: 21440 /* AlphaMode */, data: 1 } : null,\n          __privateGet(this, _colourElement)\n        ] }\n      ] });\n    }\n    if (__privateGet(this, _options).audio) {\n      __privateSet(this, _audioCodecPrivate, __privateGet(this, _options).streaming ? __privateGet(this, _audioCodecPrivate) || null : { id: 236 /* Void */, size: 4, data: new Uint8Array(CODEC_PRIVATE_MAX_SIZE) });\n      tracksElement.data.push({ id: 174 /* TrackEntry */, data: [\n        { id: 215 /* TrackNumber */, data: AUDIO_TRACK_NUMBER },\n        { id: 29637 /* TrackUID */, data: AUDIO_TRACK_NUMBER },\n        { id: 131 /* TrackType */, data: AUDIO_TRACK_TYPE },\n        { id: 134 /* CodecID */, data: __privateGet(this, _options).audio.codec },\n        __privateGet(this, _audioCodecPrivate),\n        { id: 225 /* Audio */, data: [\n          { id: 181 /* SamplingFrequency */, data: new EBMLFloat32(__privateGet(this, _options).audio.sampleRate) },\n          { id: 159 /* Channels */, data: __privateGet(this, _options).audio.numberOfChannels },\n          __privateGet(this, _options).audio.bitDepth ? { id: 25188 /* BitDepth */, data: __privateGet(this, _options).audio.bitDepth } : null\n        ] }\n      ] });\n    }\n  };\n  _createSegment = new WeakSet();\n  createSegment_fn = function() {\n    let segment = {\n      id: 408125543 /* Segment */,\n      size: __privateGet(this, _options).streaming ? -1 : SEGMENT_SIZE_BYTES,\n      data: [\n        !__privateGet(this, _options).streaming ? __privateGet(this, _seekHead) : null,\n        __privateGet(this, _segmentInfo),\n        __privateGet(this, _tracksElement)\n      ]\n    };\n    __privateSet(this, _segment, segment);\n    __privateGet(this, _writer).writeEBML(segment);\n  };\n  _createCues = new WeakSet();\n  createCues_fn = function() {\n    __privateSet(this, _cues, { id: 475249515 /* Cues */, data: [] });\n  };\n  _maybeFlushStreamingTargetWriter = new WeakSet();\n  maybeFlushStreamingTargetWriter_fn = function() {\n    if (__privateGet(this, _writer) instanceof StreamTargetWriter) {\n      __privateGet(this, _writer).flush();\n    }\n  };\n  _segmentDataOffset = new WeakSet();\n  segmentDataOffset_get = function() {\n    return __privateGet(this, _writer).dataOffsets.get(__privateGet(this, _segment));\n  };\n  _writeVideoDecoderConfig = new WeakSet();\n  writeVideoDecoderConfig_fn = function(meta) {\n    if (!meta.decoderConfig)\n      return;\n    if (meta.decoderConfig.colorSpace) {\n      let colorSpace = meta.decoderConfig.colorSpace;\n      __privateSet(this, _colorSpace, colorSpace);\n      __privateGet(this, _colourElement).data = [\n        { id: 21937 /* MatrixCoefficients */, data: {\n          \"rgb\": 1,\n          \"bt709\": 1,\n          \"bt470bg\": 5,\n          \"smpte170m\": 6\n        }[colorSpace.matrix] },\n        { id: 21946 /* TransferCharacteristics */, data: {\n          \"bt709\": 1,\n          \"smpte170m\": 6,\n          \"iec61966-2-1\": 13\n        }[colorSpace.transfer] },\n        { id: 21947 /* Primaries */, data: {\n          \"bt709\": 1,\n          \"bt470bg\": 5,\n          \"smpte170m\": 6\n        }[colorSpace.primaries] },\n        { id: 21945 /* Range */, data: [1, 2][Number(colorSpace.fullRange)] }\n      ];\n      if (!__privateGet(this, _options).streaming) {\n        let endPos = __privateGet(this, _writer).pos;\n        __privateGet(this, _writer).seek(__privateGet(this, _writer).offsets.get(__privateGet(this, _colourElement)));\n        __privateGet(this, _writer).writeEBML(__privateGet(this, _colourElement));\n        __privateGet(this, _writer).seek(endPos);\n      }\n    }\n    if (meta.decoderConfig.description) {\n      if (__privateGet(this, _options).streaming) {\n        __privateSet(this, _videoCodecPrivate, __privateMethod(this, _createCodecPrivateElement, createCodecPrivateElement_fn).call(this, meta.decoderConfig.description));\n      } else {\n        __privateMethod(this, _writeCodecPrivate, writeCodecPrivate_fn).call(this, __privateGet(this, _videoCodecPrivate), meta.decoderConfig.description);\n      }\n    }\n  };\n  _fixVP9ColorSpace = new WeakSet();\n  fixVP9ColorSpace_fn = function(chunk) {\n    if (chunk.type !== \"key\")\n      return;\n    if (!__privateGet(this, _colorSpace))\n      return;\n    let i = 0;\n    if (readBits(chunk.data, 0, 2) !== 2)\n      return;\n    i += 2;\n    let profile = (readBits(chunk.data, i + 1, i + 2) << 1) + readBits(chunk.data, i + 0, i + 1);\n    i += 2;\n    if (profile === 3)\n      i++;\n    let showExistingFrame = readBits(chunk.data, i + 0, i + 1);\n    i++;\n    if (showExistingFrame)\n      return;\n    let frameType = readBits(chunk.data, i + 0, i + 1);\n    i++;\n    if (frameType !== 0)\n      return;\n    i += 2;\n    let syncCode = readBits(chunk.data, i + 0, i + 24);\n    i += 24;\n    if (syncCode !== 4817730)\n      return;\n    if (profile >= 2)\n      i++;\n    let colorSpaceID = {\n      \"rgb\": 7,\n      \"bt709\": 2,\n      \"bt470bg\": 1,\n      \"smpte170m\": 3\n    }[__privateGet(this, _colorSpace).matrix];\n    writeBits(chunk.data, i + 0, i + 3, colorSpaceID);\n  };\n  _createInternalChunk = new WeakSet();\n  createInternalChunk_fn = function(data, type, timestamp, trackNumber) {\n    let adjustedTimestamp = __privateMethod(this, _validateTimestamp, validateTimestamp_fn).call(this, timestamp, trackNumber);\n    let internalChunk = {\n      data,\n      type,\n      timestamp: adjustedTimestamp,\n      trackNumber\n    };\n    return internalChunk;\n  };\n  _validateTimestamp = new WeakSet();\n  validateTimestamp_fn = function(timestamp, trackNumber) {\n    let firstTimestamp = trackNumber === VIDEO_TRACK_NUMBER ? __privateGet(this, _firstVideoTimestamp) : __privateGet(this, _firstAudioTimestamp);\n    let lastTimestamp = trackNumber === VIDEO_TRACK_NUMBER ? __privateGet(this, _lastVideoTimestamp) : __privateGet(this, _lastAudioTimestamp);\n    if (__privateGet(this, _options).firstTimestampBehavior === \"strict\" && lastTimestamp === -1 && timestamp !== 0) {\n      throw new Error(\n        `The first chunk for your media track must have a timestamp of 0 (received ${timestamp}). Non-zero first timestamps are often caused by directly piping frames or audio data from a MediaStreamTrack into the encoder. Their timestamps are typically relative to the age of the document, which is probably what you want.\n\nIf you want to offset all timestamps of a track such that the first one is zero, set firstTimestampBehavior: 'offset' in the options.\nIf you want to allow non-zero first timestamps, set firstTimestampBehavior: 'permissive'.\n`\n      );\n    } else if (__privateGet(this, _options).firstTimestampBehavior === \"offset\") {\n      timestamp -= firstTimestamp;\n    }\n    if (timestamp < lastTimestamp) {\n      throw new Error(\n        `Timestamps must be monotonically increasing (went from ${lastTimestamp} to ${timestamp}).`\n      );\n    }\n    return timestamp;\n  };\n  _writeSimpleBlock = new WeakSet();\n  writeSimpleBlock_fn = function(chunk) {\n    if (__privateGet(this, _options).streaming && !__privateGet(this, _tracksElement)) {\n      __privateMethod(this, _createTracks, createTracks_fn).call(this);\n      __privateMethod(this, _createSegment, createSegment_fn).call(this);\n    }\n    let msTime = Math.floor(chunk.timestamp / 1e3);\n    let clusterIsTooLong = chunk.type !== \"key\" && msTime - __privateGet(this, _currentClusterTimestamp) >= MAX_CHUNK_LENGTH_MS;\n    if (clusterIsTooLong) {\n      throw new Error(\n        `Current Matroska cluster exceeded its maximum allowed length of ${MAX_CHUNK_LENGTH_MS} milliseconds. In order to produce a correct WebM file, you must pass in a video key frame at least every ${MAX_CHUNK_LENGTH_MS} milliseconds.`\n      );\n    }\n    let shouldCreateNewClusterFromKeyFrame = (chunk.trackNumber === VIDEO_TRACK_NUMBER || !__privateGet(this, _options).video) && chunk.type === \"key\" && msTime - __privateGet(this, _currentClusterTimestamp) >= 1e3;\n    if (!__privateGet(this, _currentCluster) || shouldCreateNewClusterFromKeyFrame) {\n      __privateMethod(this, _createNewCluster, createNewCluster_fn).call(this, msTime);\n    }\n    let prelude = new Uint8Array(4);\n    let view = new DataView(prelude.buffer);\n    view.setUint8(0, 128 | chunk.trackNumber);\n    view.setUint16(1, msTime - __privateGet(this, _currentClusterTimestamp), false);\n    view.setUint8(3, Number(chunk.type === \"key\") << 7);\n    let simpleBlock = { id: 163 /* SimpleBlock */, data: [\n      prelude,\n      chunk.data\n    ] };\n    __privateGet(this, _writer).writeEBML(simpleBlock);\n    __privateSet(this, _duration, Math.max(__privateGet(this, _duration), msTime));\n  };\n  _createCodecPrivateElement = new WeakSet();\n  createCodecPrivateElement_fn = function(data) {\n    return { id: 25506 /* CodecPrivate */, size: 4, data: new Uint8Array(data) };\n  };\n  _writeCodecPrivate = new WeakSet();\n  writeCodecPrivate_fn = function(element, data) {\n    let endPos = __privateGet(this, _writer).pos;\n    __privateGet(this, _writer).seek(__privateGet(this, _writer).offsets.get(element));\n    element = [\n      __privateMethod(this, _createCodecPrivateElement, createCodecPrivateElement_fn).call(this, data),\n      { id: 236 /* Void */, size: 4, data: new Uint8Array(CODEC_PRIVATE_MAX_SIZE - 2 - 4 - data.byteLength) }\n    ];\n    __privateGet(this, _writer).writeEBML(element);\n    __privateGet(this, _writer).seek(endPos);\n  };\n  _createNewCluster = new WeakSet();\n  createNewCluster_fn = function(timestamp) {\n    if (__privateGet(this, _currentCluster) && !__privateGet(this, _options).streaming) {\n      __privateMethod(this, _finalizeCurrentCluster, finalizeCurrentCluster_fn).call(this);\n    }\n    __privateSet(this, _currentCluster, {\n      id: 524531317 /* Cluster */,\n      size: __privateGet(this, _options).streaming ? -1 : CLUSTER_SIZE_BYTES,\n      data: [\n        { id: 231 /* Timestamp */, data: timestamp }\n      ]\n    });\n    __privateGet(this, _writer).writeEBML(__privateGet(this, _currentCluster));\n    __privateSet(this, _currentClusterTimestamp, timestamp);\n    let clusterOffsetFromSegment = __privateGet(this, _writer).offsets.get(__privateGet(this, _currentCluster)) - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n    __privateGet(this, _cues).data.push({ id: 187 /* CuePoint */, data: [\n      { id: 179 /* CueTime */, data: timestamp },\n      __privateGet(this, _options).video ? { id: 183 /* CueTrackPositions */, data: [\n        { id: 247 /* CueTrack */, data: VIDEO_TRACK_NUMBER },\n        { id: 241 /* CueClusterPosition */, data: clusterOffsetFromSegment }\n      ] } : null,\n      __privateGet(this, _options).audio ? { id: 183 /* CueTrackPositions */, data: [\n        { id: 247 /* CueTrack */, data: AUDIO_TRACK_NUMBER },\n        { id: 241 /* CueClusterPosition */, data: clusterOffsetFromSegment }\n      ] } : null\n    ] });\n  };\n  _finalizeCurrentCluster = new WeakSet();\n  finalizeCurrentCluster_fn = function() {\n    let clusterSize = __privateGet(this, _writer).pos - __privateGet(this, _writer).dataOffsets.get(__privateGet(this, _currentCluster));\n    let endPos = __privateGet(this, _writer).pos;\n    __privateGet(this, _writer).seek(__privateGet(this, _writer).offsets.get(__privateGet(this, _currentCluster)) + 4);\n    __privateGet(this, _writer).writeEBMLVarInt(clusterSize, CLUSTER_SIZE_BYTES);\n    __privateGet(this, _writer).seek(endPos);\n  };\n  _ensureNotFinalized = new WeakSet();\n  ensureNotFinalized_fn = function() {\n    if (__privateGet(this, _finalized)) {\n      throw new Error(\"Cannot add new video or audio chunks after the file has been finalized.\");\n    }\n  };\n  return __toCommonJS(src_exports);\n})();\nif (typeof module === \"object\" && typeof module.exports === \"object\") {\n\tmodule.exports.Muxer = WebMMuxer.Muxer;\n\tmodule.exports.ArrayBufferTarget = WebMMuxer.ArrayBufferTarget;\n\tmodule.exports.StreamTarget = WebMMuxer.StreamTarget;\n\tmodule.exports.FileSystemWritableFileStreamTarget = WebMMuxer.FileSystemWritableFileStreamTarget;\n}\n"],"names":["LayerHost","props","className","layerHostId","react__WEBPACK_IMPORTED_MODULE_0__","useState","_Utilities__WEBPACK_IMPORTED_MODULE_1__","z","_a","id","hostId","layerHostRef","useRef","rootRef","notifyLayersChanged","useImperativeHandle","componentRef","current","useEffect","_Layer_notification__WEBPACK_IMPORTED_MODULE_2__","_Y","EQ","_fluentui_react_hooks__WEBPACK_IMPORTED_MODULE_3__","k","nw","createElement","tslib__WEBPACK_IMPORTED_MODULE_4__","pi","_Utilities__WEBPACK_IMPORTED_MODULE_5__","i","ref","_helper","_helperView","_writeByte","writeByte_fn","_writeFloat32","writeFloat32_fn","_writeFloat64","writeFloat64_fn","_writeUnsignedInt","writeUnsignedInt_fn","_writeString","writeString_fn","_target","_buffer","_bytes","_ensureSize","ensureSize_fn","_target2","_sections","_lastFlushEnd","_ensureMonotonicity","_target3","_chunks","_lastFlushEnd2","_ensureMonotonicity2","_writeDataIntoChunks","writeDataIntoChunks_fn","_insertSectionIntoChunk","insertSectionIntoChunk_fn","_createChunk","createChunk_fn","_flushChunks","flushChunks_fn","_options","_writer","_segment","_segmentInfo","_seekHead","_tracksElement","_segmentDuration","_colourElement","_videoCodecPrivate","_audioCodecPrivate","_cues","_currentCluster","_currentClusterTimestamp","_duration","_videoChunkQueue","_audioChunkQueue","_firstVideoTimestamp","_firstAudioTimestamp","_lastVideoTimestamp","_lastAudioTimestamp","_colorSpace","_finalized","_validateOptions","validateOptions_fn","_createFileHeader","createFileHeader_fn","_writeEBMLHeader","writeEBMLHeader_fn","_createCodecPrivatePlaceholders","createCodecPrivatePlaceholders_fn","_createColourElement","createColourElement_fn","_createSeekHead","createSeekHead_fn","_createSegmentInfo","createSegmentInfo_fn","_createTracks","createTracks_fn","_createSegment","createSegment_fn","_createCues","createCues_fn","_maybeFlushStreamingTargetWriter","maybeFlushStreamingTargetWriter_fn","_segmentDataOffset","segmentDataOffset_get","_writeVideoDecoderConfig","writeVideoDecoderConfig_fn","_fixVP9ColorSpace","fixVP9ColorSpace_fn","_createInternalChunk","createInternalChunk_fn","_validateTimestamp","validateTimestamp_fn","_writeSimpleBlock","writeSimpleBlock_fn","_createCodecPrivateElement","createCodecPrivateElement_fn","_writeCodecPrivate","writeCodecPrivate_fn","_createNewCluster","createNewCluster_fn","_finalizeCurrentCluster","finalizeCurrentCluster_fn","_ensureNotFinalized","ensureNotFinalized_fn","__defProp","__getOwnPropDesc","__getOwnPropNames","__getOwnPropSymbols","__hasOwnProp","__propIsEnum","__pow","__defNormalProp","__spreadValues","__accessCheck","__privateGet","__privateAdd","__privateSet","__privateMethod","src_exports","EBMLFloat32","EBMLFloat64","measureUnsignedInt","measureEBMLVarInt","readBits","writeBits","ArrayBufferTarget","StreamTarget","FileSystemWritableFileStreamTarget","Writer","ArrayBufferTargetWriter","StreamTargetWriter","CHUNK_SIZE","ChunkedStreamTargetWriter","FileSystemWritableFileStreamTargetWriter","MAX_CHUNK_LENGTH_MS","CODEC_PRIVATE_MAX_SIZE","APP_NAME","FIRST_TIMESTAMP_BEHAVIORS","Muxer","WebMMuxer","Object","defineProperty","getOwnPropertyDescriptor","getOwnPropertyNames","getOwnPropertySymbols","prototype","hasOwnProperty","propertyIsEnumerable","Math","pow","obj","key","value","enumerable","configurable","writable","a","b","prop","call","member","msg","has","TypeError","getter","get","WeakSet","add","set","setter","method","__export","target","all","name","constructor","bytes","start","end","result","byte","floor","bitIndex","byteIndex","buffer","onData","onDone","options","stream","pos","Uint8Array","DataView","offsets","WeakMap","dataOffsets","seek","newPos","writeEBMLVarInt","width","setUint8","write","subarray","writeEBML","data","_b","Array","isArray","elem","sizePos","sizeSize","size","startPos","endPos","length","byteLength","setFloat32","setFloat64","str","split","map","x","charCodeAt","ArrayBuffer","finalize","slice","newLength","newBuffer","newBytes","ensureMonotonicity","push","flush","chunks","sorted","sort","lastChunk","section","max","chunk","position","chunkIndex","findIndex","relativePosition","toWrite","min","written","shouldFlush","low","high","index","mid","splice","includesPosition","indexOf","force","type","firstTimestampBehavior","streaming","chunked","addVideoChunk","meta","timestamp","copyTo","addVideoChunkRaw","video","internalChunk","codec","audioChunk","shift","audio","addAudioChunk","addAudioChunkRaw","decoderConfig","description","videoChunk","segmentSize","includes","ebmlHeader","kaxCues","kaxInfo","kaxTracks","segmentDuration","tracksElement","frameRate","height","alpha","sampleRate","numberOfChannels","bitDepth","segment","colorSpace","matrix","transfer","primaries","Number","fullRange","profile","showExistingFrame","frameType","syncCode","colorSpaceID","trackNumber","firstTimestamp","lastTimestamp","msTime","shouldCreateNewClusterFromKeyFrame","prelude","view","setUint16","simpleBlock","element","clusterOffsetFromSegment","clusterSize","__copyProps","to","from","except","desc","module","exports"],"sourceRoot":""}
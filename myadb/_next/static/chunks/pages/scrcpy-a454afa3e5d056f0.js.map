{"version":3,"file":"static/chunks/pages/scrcpy-a454afa3e5d056f0.js","mappings":"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","sources":["webpack://_N_E/?bc71","webpack://_N_E/./src/components/command-bar-spacer-item.tsx","webpack://_N_E/../../libraries/scrcpy/src/codec/av1.ts","webpack://_N_E/../../libraries/scrcpy/src/codec/nalu.ts","webpack://_N_E/../../libraries/scrcpy/src/codec/h264.ts","webpack://_N_E/../../libraries/scrcpy/src/codec/h265.ts","webpack://_N_E/../../libraries/scrcpy/src/codec/index.ts","webpack://_N_E/../../libraries/scrcpy/src/control/basic.ts","webpack://_N_E/../../libraries/scrcpy/src/control/inject-touch.ts","webpack://_N_E/../../libraries/scrcpy/src/control/type.ts","webpack://_N_E/../../libraries/scrcpy/src/control/hover-helper.ts","webpack://_N_E/../../libraries/scrcpy/src/control/inject-keycode.ts","webpack://_N_E/../../libraries/scrcpy/src/control/inject-text.ts","webpack://_N_E/../../libraries/scrcpy/src/control/rotate-device.ts","webpack://_N_E/../../libraries/scrcpy/src/control/set-screen-power-mode.ts","webpack://_N_E/../../libraries/scrcpy/src/control/serializer.ts","webpack://_N_E/../../libraries/scrcpy/src/control/writer.ts","webpack://_N_E/../../libraries/scrcpy/src/control/index.ts","webpack://_N_E/../../libraries/scrcpy/src/device-message/type.ts","webpack://_N_E/../../libraries/scrcpy/src/device-message/ack-clipboard.ts","webpack://_N_E/../../libraries/scrcpy/src/device-message/clipboard.ts","webpack://_N_E/../../libraries/scrcpy/src/device-message/stream.ts","webpack://_N_E/../../libraries/scrcpy/src/device-message/index.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_16/codec-options.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_16/float-to-uint16.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_16/init.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_16/message.ts","webpack://_N_E/../../libraries/scrcpy/src/options/codec.ts","webpack://_N_E/../../libraries/scrcpy/src/options/types.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_16/scroll.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_16/options.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_16/index.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_17.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_18.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_21.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_22/scroll.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_22/options.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_22/index.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_23.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_24.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_25/scroll.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_25/options.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_25/index.ts","webpack://_N_E/../../libraries/scrcpy/src/options/2_0.ts","webpack://_N_E/../../libraries/scrcpy/src/options/latest.ts","webpack://_N_E/../../libraries/scrcpy/src/options/index.ts","webpack://_N_E/../../libraries/scrcpy/src/index.ts","webpack://_N_E/../../libraries/scrcpy-decoder-webcodecs/src/index.ts","webpack://_N_E/./src/components/scrcpy/recorder.ts","webpack://_N_E/../../libraries/adb-scrcpy/src/client.ts","webpack://_N_E/../../libraries/adb-scrcpy/src/connection.ts","webpack://_N_E/../../libraries/adb-scrcpy/src/options/types.ts","webpack://_N_E/../../libraries/adb-scrcpy/src/options/1_16.ts","webpack://_N_E/../../libraries/adb-scrcpy/src/options/1_22.ts","webpack://_N_E/../../libraries/adb-scrcpy/src/options/2_0.ts","webpack://_N_E/../../libraries/adb-scrcpy/src/options/latest.ts","webpack://_N_E/../../libraries/adb-scrcpy/src/options/index.ts","webpack://_N_E/../../libraries/adb-scrcpy/src/index.ts","webpack://_N_E/../../libraries/pcm-player/src/index.ts","webpack://_N_E/../../libraries/scrcpy/bin/version.js","webpack://_N_E/./src/components/scrcpy/audio-decode-stream.ts","webpack://_N_E/./src/components/scrcpy/fetch-server.ts","webpack://_N_E/./src/components/scrcpy/input.ts","webpack://_N_E/../../libraries/scrcpy-decoder-tinyh264/src/wrapper.ts","webpack://_N_E/../../libraries/scrcpy-decoder-tinyh264/src/decoder.ts","webpack://_N_E/../../libraries/scrcpy-decoder-tinyh264/src/index.ts","webpack://_N_E/./src/components/scrcpy/settings.tsx","webpack://_N_E/./src/components/scrcpy/state.tsx","webpack://_N_E/./src/components/scrcpy/command-bar.tsx","webpack://_N_E/./src/components/scrcpy/navigation-bar.tsx","webpack://_N_E/./src/components/scrcpy/video-container.tsx","webpack://_N_E/./src/components/scrcpy/index.ts","webpack://_N_E/./src/hooks/add-event-listener.ts","webpack://_N_E/./src/hooks/layout-effect.ts","webpack://_N_E/./src/hooks/stable-callback.ts","webpack://_N_E/./src/hooks/local-storage.ts","webpack://_N_E/./src/hooks/index.ts","webpack://_N_E/./src/pages/scrcpy.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/scrcpy\",\n      function () {\n        return require(\"private-next-pages/scrcpy.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/scrcpy\"])\n      });\n    }\n  ","import { useEffect, useState } from \"react\";\n\nexport function CommandBarSpacerItem() {\n    const [container, setContainer] = useState<HTMLDivElement | null>(null);\n\n    useEffect(() => {\n        if (!container) {\n            return;\n        }\n\n        const parent = container.parentElement!;\n        const originalFlexGrow = parent.style.flexGrow;\n        parent.style.flexGrow = \"1\";\n        return () => {\n            parent.style.flexGrow = originalFlexGrow;\n        };\n    }, [container]);\n\n    return <div ref={setContainer} />;\n}\n","export enum AndroidAv1Profile {\n    Main8 = 1 << 0,\n    Main10 = 1 << 1,\n    Main10Hdr10 = 1 << 12,\n    Main10Hdr10Plus = 1 << 13,\n}\n\nexport enum AndroidAv1Level {\n    Level2 = 1 << 0,\n    Level21 = 1 << 1,\n    Level22 = 1 << 2,\n    Level23 = 1 << 3,\n    Level3 = 1 << 4,\n    Level31 = 1 << 5,\n    Level32 = 1 << 6,\n    Level33 = 1 << 7,\n    Level4 = 1 << 8,\n    Level41 = 1 << 9,\n    Level42 = 1 << 10,\n    Level43 = 1 << 11,\n    Level5 = 1 << 12,\n    Level51 = 1 << 13,\n    Level52 = 1 << 14,\n    Level53 = 1 << 15,\n    Level6 = 1 << 16,\n    Level61 = 1 << 17,\n    Level62 = 1 << 18,\n    Level63 = 1 << 19,\n    Level7 = 1 << 20,\n    Level71 = 1 << 21,\n    Level72 = 1 << 22,\n    Level73 = 1 << 23,\n}\n","/**\n * Split NAL units from an H.264/H.265 Annex B stream.\n *\n * The input is not modified.\n * The returned NAL units are views of the input (no memory allocation nor copy),\n * and still contains emulation prevention bytes.\n *\n * This methods returns a generator, so it can be stopped immediately\n * after the interested NAL unit is found.\n */\nexport function* annexBSplitNalu(buffer: Uint8Array): Generator<Uint8Array> {\n    // -1 means we haven't found the first start code\n    let start = -1;\n    // How many `0x00`s in a row we have counted\n    let zeroCount = 0;\n    let inEmulation = false;\n\n    for (let i = 0; i < buffer.length; i += 1) {\n        const byte = buffer[i]!;\n\n        if (inEmulation) {\n            if (byte > 0x03) {\n                // `0x00000304` or larger are invalid\n                throw new Error(\"Invalid data\");\n            }\n\n            inEmulation = false;\n            continue;\n        }\n\n        if (byte === 0x00) {\n            zeroCount += 1;\n            continue;\n        }\n\n        const prevZeroCount = zeroCount;\n        zeroCount = 0;\n\n        if (start === -1) {\n            // 0x000001 is the start code\n            // But it can be preceded by any number of zeros\n            // So 2 is the minimal\n            if (prevZeroCount >= 2 && byte === 0x01) {\n                // Found start of first NAL unit\n                start = i + 1;\n                continue;\n            }\n\n            // Not begin with start code\n            throw new Error(\"Invalid data\");\n        }\n\n        if (prevZeroCount < 2) {\n            // zero or one `0x00`s are acceptable\n            continue;\n        }\n\n        if (byte === 0x01) {\n            // Found another NAL unit\n            yield buffer.subarray(start, i - prevZeroCount);\n\n            start = i + 1;\n            continue;\n        }\n\n        if (prevZeroCount > 2) {\n            // Too much `0x00`s\n            throw new Error(\"Invalid data\");\n        }\n\n        switch (byte) {\n            case 0x02:\n                // Didn't find why, but 7.4.1 NAL unit semantics forbids `0x000002` appearing in NAL units\n                throw new Error(\"Invalid data\");\n            case 0x03:\n                // `0x000003` is the \"emulation_prevention_three_byte\"\n                // `0x00000300`, `0x00000301`, `0x00000302` and `0x00000303` represent\n                // `0x000000`, `0x000001`, `0x000002` and `0x000003` respectively\n                inEmulation = true;\n                break;\n            default:\n                // `0x000004` or larger are as-is\n                break;\n        }\n    }\n\n    if (inEmulation) {\n        throw new Error(\"Invalid data\");\n    }\n\n    yield buffer.subarray(start, buffer.length);\n}\n\n/**\n * Remove emulation prevention bytes from a H.264/H.265 NAL Unit.\n *\n * The input is not modified.\n * If the input doesn't contain any emulation prevention bytes,\n * the input is returned as-is.\n * Otherwise, a new `Uint8Array` is created and returned.\n */\nexport function naluRemoveEmulation(buffer: Uint8Array) {\n    // output will be created when first emulation prevention byte is found\n    let output: Uint8Array | undefined;\n    let outputOffset = 0;\n\n    let zeroCount = 0;\n    let inEmulation = false;\n\n    let i = 0;\n    scan: for (; i < buffer.length; i += 1) {\n        const byte = buffer[i]!;\n\n        if (byte === 0x00) {\n            zeroCount += 1;\n            continue;\n        }\n\n        // Current byte is not zero\n        const prevZeroCount = zeroCount;\n        zeroCount = 0;\n\n        if (prevZeroCount < 2) {\n            // zero or one `0x00`s are acceptable\n            continue;\n        }\n\n        if (byte === 0x01) {\n            // Unexpected start code\n            throw new Error(\"Invalid data\");\n        }\n\n        if (prevZeroCount > 2) {\n            // Too much `0x00`s\n            throw new Error(\"Invalid data\");\n        }\n\n        switch (byte) {\n            case 0x02:\n                // Didn't find why, but 7.4.1 NAL unit semantics forbids `0x000002` appearing in NAL units\n                throw new Error(\"Invalid data\");\n            case 0x03:\n                // `0x000003` is the \"emulation_prevention_three_byte\"\n                // `0x00000300`, `0x00000301`, `0x00000302` and `0x00000303` represent\n                // `0x000000`, `0x000001`, `0x000002` and `0x000003` respectively\n                inEmulation = true;\n\n                // Create output and copy the data before the emulation prevention byte\n                // Output size is unknown, so we use the input size as an upper bound\n                output = new Uint8Array(buffer.length - 1);\n                output.set(buffer.subarray(0, i));\n                outputOffset = i;\n                i += 1;\n                break scan;\n            default:\n                // `0x000004` or larger are as-is\n                break;\n        }\n    }\n\n    if (!output) {\n        return buffer;\n    }\n\n    // Continue at the byte after the emulation prevention byte\n    for (; i < buffer.length; i += 1) {\n        const byte = buffer[i]!;\n\n        output[outputOffset] = byte;\n        outputOffset += 1;\n\n        if (inEmulation) {\n            if (byte > 0x03) {\n                // `0x00000304` or larger are invalid\n                throw new Error(\"Invalid data\");\n            }\n\n            // `00000300000300` results in `0000000000` (both `0x03` are removed)\n            // which means the `0x00` after `0x03` also counts\n            if (byte === 0x00) {\n                zeroCount += 1;\n            }\n\n            inEmulation = false;\n            continue;\n        }\n\n        if (byte === 0x00) {\n            zeroCount += 1;\n            continue;\n        }\n\n        const prevZeroCount = zeroCount;\n        zeroCount = 0;\n\n        if (prevZeroCount < 2) {\n            // zero or one `0x00`s are acceptable\n            continue;\n        }\n\n        if (byte === 0x01) {\n            // Unexpected start code\n            throw new Error(\"Invalid data\");\n        }\n\n        if (prevZeroCount > 2) {\n            // Too much `0x00`s\n            throw new Error(\"Invalid data\");\n        }\n\n        switch (byte) {\n            case 0x02:\n                // Didn't find why, but 7.4.1 NAL unit semantics forbids `0x000002` appearing in NAL units\n                throw new Error(\"Invalid data\");\n            case 0x03:\n                // `0x000003` is the \"emulation_prevention_three_byte\"\n                // `0x00000300`, `0x00000301`, `0x00000302` and `0x00000303` represent\n                // `0x000000`, `0x000001`, `0x000002` and `0x000003` respectively\n                inEmulation = true;\n\n                // Remove the emulation prevention byte\n                outputOffset -= 1;\n                break;\n            default:\n                // `0x000004` or larger are as-is\n                break;\n        }\n    }\n\n    return output.subarray(0, outputOffset);\n}\n\nexport class NaluSodbBitReader {\n    private readonly _nalu: Uint8Array;\n    private readonly _byteLength: number;\n    private readonly _stopBitIndex: number;\n\n    private _zeroCount = 0;\n    private _bytePosition = -1;\n    private _bitPosition = -1;\n    private _byte = 0;\n\n    public get byteLength() {\n        return this._byteLength;\n    }\n\n    public get stopBitIndex() {\n        return this._stopBitIndex;\n    }\n\n    public get bytePosition() {\n        return this._bytePosition;\n    }\n\n    public get bitPosition() {\n        return this._bitPosition;\n    }\n\n    public get ended() {\n        return (\n            this._bytePosition === this._byteLength &&\n            this._bitPosition === this._stopBitIndex\n        );\n    }\n\n    public constructor(nalu: Uint8Array) {\n        this._nalu = nalu;\n\n        for (let i = nalu.length - 1; i >= 0; i -= 1) {\n            if (this._nalu[i] === 0) {\n                continue;\n            }\n\n            const byte = nalu[i]!;\n            for (let j = 0; j < 8; j += 1) {\n                if (((byte >> j) & 1) === 1) {\n                    this._byteLength = i;\n                    this._stopBitIndex = j;\n                    this.readByte();\n                    return;\n                }\n            }\n        }\n\n        throw new Error(\"End bit not found\");\n    }\n\n    private readByte() {\n        this._byte = this._nalu[this._bytePosition]!;\n        if (this._zeroCount === 2 && this._byte === 3) {\n            this._zeroCount = 0;\n            this._bytePosition += 1;\n            this.readByte();\n            return;\n        }\n\n        if (this._byte === 0) {\n            this._zeroCount += 1;\n        } else {\n            this._zeroCount = 0;\n        }\n    }\n\n    public next() {\n        if (this._bitPosition === -1) {\n            this._bitPosition = 7;\n            this._bytePosition += 1;\n            this.readByte();\n        }\n\n        if (\n            this._bytePosition === this._byteLength &&\n            this._bitPosition === this._stopBitIndex\n        ) {\n            throw new Error(\"Bit index out of bounds\");\n        }\n\n        const value = (this._byte >> this._bitPosition) & 1;\n        this._bitPosition -= 1;\n        return value;\n    }\n\n    public read(length: number): number {\n        if (length > 32) {\n            throw new Error(\"Read length too large\");\n        }\n\n        let result = 0;\n        for (let i = 0; i < length; i += 1) {\n            result = (result << 1) | this.next();\n        }\n        return result;\n    }\n\n    public skip(length: number) {\n        for (let i = 0; i < length; i += 1) {\n            this.next();\n        }\n    }\n\n    public decodeExponentialGolombNumber(): number {\n        let length = 0;\n        while (this.next() === 0) {\n            length += 1;\n        }\n        if (length === 0) {\n            return 0;\n        }\n        return ((1 << length) | this.read(length)) - 1;\n    }\n\n    public peek(length: number) {\n        const { _zeroCount, _bytePosition, _bitPosition, _byte } = this;\n        const result = this.read(length);\n        Object.assign(this, { _zeroCount, _bytePosition, _bitPosition, _byte });\n        return result;\n    }\n\n    public readBytes(length: number): Uint8Array {\n        const result = new Uint8Array(length);\n        for (let i = 0; i < length; i += 1) {\n            result[i] = this.read(8);\n        }\n        return result;\n    }\n\n    public peekBytes(length: number): Uint8Array {\n        const { _zeroCount, _bytePosition, _bitPosition, _byte } = this;\n        const result = this.readBytes(length);\n        Object.assign(this, { _zeroCount, _bytePosition, _bitPosition, _byte });\n        return result;\n    }\n}\n","// cspell: ignore golomb\n// cspell: ignore qpprime\n// cspell: ignore colour\n\nimport { NaluSodbBitReader, annexBSplitNalu } from \"./nalu.js\";\n\n// From https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel\nexport enum AndroidAvcProfile {\n    Baseline = 1 << 0,\n    Main = 1 << 1,\n    Extended = 1 << 2,\n    High = 1 << 3,\n    High10 = 1 << 4,\n    High422 = 1 << 5,\n    High444 = 1 << 6,\n    ConstrainedBaseline = 1 << 16,\n    ConstrainedHigh = 1 << 19,\n}\n\nexport enum AndroidAvcLevel {\n    Level1 = 1 << 0,\n    Level1b = 1 << 1,\n    Level11 = 1 << 2,\n    Level12 = 1 << 3,\n    Level13 = 1 << 4,\n    Level2 = 1 << 5,\n    Level21 = 1 << 6,\n    Level22 = 1 << 7,\n    Level3 = 1 << 8,\n    Level31 = 1 << 9,\n    Level32 = 1 << 10,\n    Level4 = 1 << 11,\n    Level41 = 1 << 12,\n    Level42 = 1 << 13,\n    Level5 = 1 << 14,\n    Level51 = 1 << 15,\n    Level52 = 1 << 16,\n    Level6 = 1 << 17,\n    Level61 = 1 << 18,\n    Level62 = 1 << 19,\n}\n\n// H.264 has two standards: ITU-T H.264 and ISO/IEC 14496-10\n// they have the same content, and refer themselves as \"H.264\".\n// The name \"AVC\" (Advanced Video Coding) is only used in ISO spec name,\n// and other ISO specs referring to H.264.\n// Because this module parses H.264 Annex B format,\n// it's named \"h264\" instead of \"avc\".\n\n// 7.3.2.1.1 Sequence parameter set data syntax\n// Variable names in this method uses the snake_case convention as in the spec for easier referencing.\nexport function h264ParseSequenceParameterSet(nalu: Uint8Array) {\n    const reader = new NaluSodbBitReader(nalu);\n    if (reader.next() !== 0) {\n        throw new Error(\"Invalid data\");\n    }\n\n    const nal_ref_idc = reader.read(2);\n    const nal_unit_type = reader.read(5);\n\n    if (nal_unit_type !== 7) {\n        throw new Error(\"Invalid data\");\n    }\n\n    if (nal_ref_idc === 0) {\n        throw new Error(\"Invalid data\");\n    }\n\n    const profile_idc = reader.read(8);\n    const constraint_set = reader.peek(8);\n\n    const constraint_set0_flag = !!reader.next();\n    const constraint_set1_flag = !!reader.next();\n    const constraint_set2_flag = !!reader.next();\n    const constraint_set3_flag = !!reader.next();\n    const constraint_set4_flag = !!reader.next();\n    const constraint_set5_flag = !!reader.next();\n\n    // reserved_zero_2bits\n    if (reader.read(2) !== 0) {\n        throw new Error(\"Invalid data\");\n    }\n\n    const level_idc = reader.read(8);\n    const seq_parameter_set_id = reader.decodeExponentialGolombNumber();\n\n    if (\n        profile_idc === 100 ||\n        profile_idc === 110 ||\n        profile_idc === 122 ||\n        profile_idc === 244 ||\n        profile_idc === 44 ||\n        profile_idc === 83 ||\n        profile_idc === 86 ||\n        profile_idc === 118 ||\n        profile_idc === 128 ||\n        profile_idc === 138 ||\n        profile_idc === 139 ||\n        profile_idc === 134\n    ) {\n        const chroma_format_idc = reader.decodeExponentialGolombNumber();\n        if (chroma_format_idc === 3) {\n            // separate_colour_plane_flag\n            reader.next();\n        }\n\n        // bit_depth_luma_minus8\n        reader.decodeExponentialGolombNumber();\n        // bit_depth_chroma_minus8\n        reader.decodeExponentialGolombNumber();\n\n        // qpprime_y_zero_transform_bypass_flag\n        reader.next();\n\n        const seq_scaling_matrix_present_flag = !!reader.next();\n        if (seq_scaling_matrix_present_flag) {\n            const seq_scaling_list_present_flag: boolean[] = [];\n            for (let i = 0; i < (chroma_format_idc !== 3 ? 8 : 12); i += 1) {\n                seq_scaling_list_present_flag[i] = !!reader.next();\n                if (seq_scaling_list_present_flag[i])\n                    if (i < 6) {\n                        // TODO\n                        // scaling_list( ScalingList4x4[ i ], 16,\n                        //               UseDefaultScalingMatrix4x4Flag[ i ])\n                    } else {\n                        // TODO\n                        // scaling_list( ScalingList8x8[ i − 6 ], 64,\n                        //               UseDefaultScalingMatrix8x8Flag[ i − 6 ] )\n                    }\n            }\n        }\n    }\n\n    // log2_max_frame_num_minus4\n    reader.decodeExponentialGolombNumber();\n    const pic_order_cnt_type = reader.decodeExponentialGolombNumber();\n    if (pic_order_cnt_type === 0) {\n        // log2_max_pic_order_cnt_lsb_minus4\n        reader.decodeExponentialGolombNumber();\n    } else if (pic_order_cnt_type === 1) {\n        // delta_pic_order_always_zero_flag\n        reader.next();\n        // offset_for_non_ref_pic\n        reader.decodeExponentialGolombNumber();\n        // offset_for_top_to_bottom_field\n        reader.decodeExponentialGolombNumber();\n        const num_ref_frames_in_pic_order_cnt_cycle =\n            reader.decodeExponentialGolombNumber();\n        const offset_for_ref_frame: number[] = [];\n        for (let i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i += 1) {\n            offset_for_ref_frame[i] = reader.decodeExponentialGolombNumber();\n        }\n    }\n\n    // max_num_ref_frames\n    reader.decodeExponentialGolombNumber();\n    // gaps_in_frame_num_value_allowed_flag\n    reader.next();\n    const pic_width_in_mbs_minus1 = reader.decodeExponentialGolombNumber();\n    const pic_height_in_map_units_minus1 =\n        reader.decodeExponentialGolombNumber();\n\n    const frame_mbs_only_flag = reader.next();\n    if (!frame_mbs_only_flag) {\n        // mb_adaptive_frame_field_flag\n        reader.next();\n    }\n\n    // direct_8x8_inference_flag\n    reader.next();\n\n    const frame_cropping_flag = !!reader.next();\n    let frame_crop_left_offset: number;\n    let frame_crop_right_offset: number;\n    let frame_crop_top_offset: number;\n    let frame_crop_bottom_offset: number;\n    if (frame_cropping_flag) {\n        frame_crop_left_offset = reader.decodeExponentialGolombNumber();\n        frame_crop_right_offset = reader.decodeExponentialGolombNumber();\n        frame_crop_top_offset = reader.decodeExponentialGolombNumber();\n        frame_crop_bottom_offset = reader.decodeExponentialGolombNumber();\n    } else {\n        frame_crop_left_offset = 0;\n        frame_crop_right_offset = 0;\n        frame_crop_top_offset = 0;\n        frame_crop_bottom_offset = 0;\n    }\n\n    const vui_parameters_present_flag = !!reader.next();\n    if (vui_parameters_present_flag) {\n        // TODO\n        // vui_parameters( )\n    }\n\n    return {\n        profile_idc,\n        constraint_set,\n        constraint_set0_flag,\n        constraint_set1_flag,\n        constraint_set2_flag,\n        constraint_set3_flag,\n        constraint_set4_flag,\n        constraint_set5_flag,\n        level_idc,\n        seq_parameter_set_id,\n        pic_width_in_mbs_minus1,\n        pic_height_in_map_units_minus1,\n        frame_mbs_only_flag,\n        frame_cropping_flag,\n        frame_crop_left_offset,\n        frame_crop_right_offset,\n        frame_crop_top_offset,\n        frame_crop_bottom_offset,\n    };\n}\n\n/**\n * Find Sequence Parameter Set (SPS) and Picture Parameter Set (PPS)\n * from H.264 Annex B formatted data.\n */\nexport function h264SearchConfiguration(buffer: Uint8Array) {\n    let sequenceParameterSet: Uint8Array | undefined;\n    let pictureParameterSet: Uint8Array | undefined;\n\n    for (const nalu of annexBSplitNalu(buffer)) {\n        const naluType = nalu[0]! & 0x1f;\n        switch (naluType) {\n            case 7: // Sequence parameter set\n                sequenceParameterSet = nalu;\n                if (pictureParameterSet) {\n                    return {\n                        sequenceParameterSet,\n                        pictureParameterSet,\n                    };\n                }\n                break;\n            case 8: // Picture parameter set\n                pictureParameterSet = nalu;\n                if (sequenceParameterSet) {\n                    return {\n                        sequenceParameterSet,\n                        pictureParameterSet,\n                    };\n                }\n                break;\n            default:\n                // ignore\n                break;\n        }\n    }\n\n    throw new Error(\"Invalid data\");\n}\n\nexport interface H264Configuration {\n    pictureParameterSet: Uint8Array;\n    sequenceParameterSet: Uint8Array;\n\n    profileIndex: number;\n    constraintSet: number;\n    levelIndex: number;\n\n    encodedWidth: number;\n    encodedHeight: number;\n\n    cropLeft: number;\n    cropRight: number;\n    cropTop: number;\n    cropBottom: number;\n    croppedWidth: number;\n    croppedHeight: number;\n}\n\nexport function h264ParseConfiguration(data: Uint8Array): H264Configuration {\n    const { sequenceParameterSet, pictureParameterSet } =\n        h264SearchConfiguration(data);\n\n    const {\n        profile_idc: profileIndex,\n        constraint_set: constraintSet,\n        level_idc: levelIndex,\n        pic_width_in_mbs_minus1,\n        pic_height_in_map_units_minus1,\n        frame_mbs_only_flag,\n        frame_crop_left_offset,\n        frame_crop_right_offset,\n        frame_crop_top_offset,\n        frame_crop_bottom_offset,\n    } = h264ParseSequenceParameterSet(sequenceParameterSet);\n\n    const encodedWidth = (pic_width_in_mbs_minus1 + 1) * 16;\n    const encodedHeight =\n        (pic_height_in_map_units_minus1 + 1) * (2 - frame_mbs_only_flag) * 16;\n    const cropLeft = frame_crop_left_offset * 2;\n    const cropRight = frame_crop_right_offset * 2;\n    const cropTop = frame_crop_top_offset * 2;\n    const cropBottom = frame_crop_bottom_offset * 2;\n\n    const croppedWidth = encodedWidth - cropLeft - cropRight;\n    const croppedHeight = encodedHeight - cropTop - cropBottom;\n\n    return {\n        pictureParameterSet,\n        sequenceParameterSet,\n        profileIndex,\n        constraintSet,\n        levelIndex,\n        encodedWidth,\n        encodedHeight,\n        cropLeft,\n        cropRight,\n        cropTop,\n        cropBottom,\n        croppedWidth,\n        croppedHeight,\n    };\n}\n","// cspell: ignore golomb\n// cspell: ignore qpprime\n// cspell: ignore colour\n// cspell: ignore inbld\n// cspell: ignore Coef\n// cspell: ignore coeffs\n// cspell: ignore Pocs\n// cspell: ignore overscan\n// cspell: ignore disp\n// cspell: ignore bitstream\n// cspell: ignore scal\n// cspell: ignore ivmc\n// cspell: ignore dbbp\n// cspell: ignore texmc\n// cspell: ignore rbsp\n// cspell: ignore cprms\n\nimport { NaluSodbBitReader, annexBSplitNalu } from \"./nalu.js\";\n\nexport enum AndroidHevcProfile {\n    Main = 1 << 0,\n    Main10 = 1 << 1,\n    MainStill = 1 << 2,\n    Main10Hdr10 = 1 << 12,\n    Main10Hdr10Plus = 1 << 13,\n}\n\nexport enum AndroidHevcLevel {\n    MainTierLevel1 = 1 << 0,\n    HighTierLevel1 = 1 << 1,\n    MainTierLevel2 = 1 << 2,\n    HighTierLevel2 = 1 << 3,\n    MainTierLevel21 = 1 << 4,\n    HighTierLevel21 = 1 << 5,\n    MainTierLevel3 = 1 << 6,\n    HighTierLevel3 = 1 << 7,\n    MainTierLevel31 = 1 << 8,\n    HighTierLevel31 = 1 << 9,\n    MainTierLevel4 = 1 << 10,\n    HighTierLevel4 = 1 << 11,\n    MainTierLevel41 = 1 << 12,\n    HighTierLevel41 = 1 << 13,\n    MainTierLevel5 = 1 << 14,\n    HighTierLevel5 = 1 << 15,\n    MainTierLevel51 = 1 << 16,\n    HighTierLevel51 = 1 << 17,\n    MainTierLevel52 = 1 << 18,\n    HighTierLevel52 = 1 << 19,\n    MainTierLevel6 = 1 << 20,\n    HighTierLevel6 = 1 << 21,\n    MainTierLevel61 = 1 << 22,\n    HighTierLevel61 = 1 << 23,\n    MainTierLevel62 = 1 << 24,\n    HighTierLevel62 = 1 << 25,\n}\n\n/**\n * 6.2 Source, decoded and output picture formats\n */\nexport function getSubWidthC(chroma_format_idc: number) {\n    switch (chroma_format_idc) {\n        case 0:\n        case 3:\n            return 1;\n        case 1:\n        case 2:\n            return 2;\n        default:\n            throw new Error(\"Invalid chroma_format_idc\");\n    }\n}\n\n/**\n * 6.2 Source, decoded and output picture formats\n */\nexport function getSubHeightC(chroma_format_idc: number) {\n    switch (chroma_format_idc) {\n        case 0:\n        case 2:\n        case 3:\n            return 1;\n        case 1:\n            return 2;\n        default:\n            throw new Error(\"Invalid chroma_format_idc\");\n    }\n}\n\n/**\n * 7.3.1.1 General NAL unit syntax\n */\nexport function h265ParseNaluHeader(nalu: Uint8Array) {\n    const reader = new NaluSodbBitReader(nalu);\n    if (reader.next() !== 0) {\n        throw new Error(\"Invalid NALU header\");\n    }\n\n    const nal_unit_type = reader.read(6);\n    const nuh_layer_id = reader.read(6);\n    const nuh_temporal_id_plus1 = reader.read(3);\n\n    return {\n        nal_unit_type,\n        nuh_layer_id,\n        nuh_temporal_id_plus1,\n    };\n}\n\nexport type H265NaluHeader = ReturnType<typeof h265ParseNaluHeader>;\n\nexport interface H265NaluRaw extends H265NaluHeader {\n    data: Uint8Array;\n    rbsp: Uint8Array;\n}\n\n/**\n * 7.3.2.1 Video parameter set RBSP syntax\n */\nexport function h265ParseVideoParameterSet(nalu: Uint8Array) {\n    const reader = new NaluSodbBitReader(nalu);\n\n    const vps_video_parameter_set_id = reader.read(4);\n    const vps_base_layer_internal_flag = !!reader.next();\n    const vps_base_layer_available_flag = !!reader.next();\n    const vps_max_layers_minus1 = reader.read(6);\n    const vps_max_sub_layers_minus1 = reader.read(3);\n    const vps_temporal_id_nesting_flag = !!reader.next();\n    reader.skip(16);\n\n    const profileTierLevel = h265ParseProfileTierLevel(\n        reader,\n        true,\n        vps_max_sub_layers_minus1\n    );\n\n    const vps_sub_layer_ordering_info_present_flag = !!reader.next();\n    const vps_max_dec_pic_buffering_minus1: number[] = [];\n    const vps_max_num_reorder_pics: number[] = [];\n    const vps_max_latency_increase_plus1: number[] = [];\n    for (\n        let i = vps_sub_layer_ordering_info_present_flag\n            ? 0\n            : vps_max_sub_layers_minus1;\n        i <= vps_max_sub_layers_minus1;\n        i += 1\n    ) {\n        vps_max_dec_pic_buffering_minus1[i] =\n            reader.decodeExponentialGolombNumber();\n        vps_max_num_reorder_pics[i] = reader.decodeExponentialGolombNumber();\n        vps_max_latency_increase_plus1[i] =\n            reader.decodeExponentialGolombNumber();\n    }\n\n    const vps_max_layer_id = reader.read(6);\n    const vps_num_layer_sets_minus1 = reader.decodeExponentialGolombNumber();\n    const layer_id_included_flag: boolean[][] = [];\n    for (let i = 1; i <= vps_num_layer_sets_minus1; i += 1) {\n        layer_id_included_flag[i] = [];\n        for (let j = 0; j <= vps_max_layer_id; j += 1) {\n            layer_id_included_flag[i]![j] = !!reader.next();\n        }\n    }\n\n    const vps_timing_info_present_flag = !!reader.next();\n    let vps_num_units_in_tick: number | undefined;\n    let vps_time_scale: number | undefined;\n    let vps_poc_proportional_to_timing_flag: boolean | undefined;\n    let vps_num_ticks_poc_diff_one_minus1: number | undefined;\n    let vps_num_hrd_parameters: number | undefined;\n    let hrd_layer_set_idx: number[] | undefined;\n    let cprms_present_flag: boolean[] | undefined;\n    let hrdParameters: H265HrdParameters[] | undefined;\n    if (vps_timing_info_present_flag) {\n        vps_num_units_in_tick = reader.read(32);\n        vps_time_scale = reader.read(32);\n\n        vps_poc_proportional_to_timing_flag = !!reader.next();\n        if (vps_poc_proportional_to_timing_flag) {\n            vps_num_ticks_poc_diff_one_minus1 =\n                reader.decodeExponentialGolombNumber();\n        }\n\n        vps_num_hrd_parameters = reader.decodeExponentialGolombNumber();\n\n        hrd_layer_set_idx = [];\n        cprms_present_flag = [true];\n        hrdParameters = [];\n        for (let i = 0; i < vps_num_hrd_parameters; i += 1) {\n            hrd_layer_set_idx[i] = reader.decodeExponentialGolombNumber();\n            if (i > 0) {\n                cprms_present_flag[i] = !!reader.next();\n            }\n            hrdParameters[i] = h265ParseHrdParameters(\n                reader,\n                cprms_present_flag[i]!,\n                vps_max_sub_layers_minus1\n            );\n        }\n    }\n\n    const vps_extension_flag = !!reader.next();\n\n    return {\n        vps_video_parameter_set_id,\n        vps_base_layer_internal_flag,\n        vps_base_layer_available_flag,\n        vps_max_layers_minus1,\n        vps_max_sub_layers_minus1,\n        vps_temporal_id_nesting_flag,\n        profileTierLevel,\n        vps_sub_layer_ordering_info_present_flag,\n        vps_max_dec_pic_buffering_minus1,\n        vps_max_num_reorder_pics,\n        vps_max_latency_increase_plus1,\n        vps_max_layer_id,\n        vps_num_layer_sets_minus1,\n        layer_id_included_flag,\n        vps_timing_info_present_flag,\n        vps_num_units_in_tick,\n        vps_time_scale,\n        vps_poc_proportional_to_timing_flag,\n        vps_num_ticks_poc_diff_one_minus1,\n        vps_num_hrd_parameters,\n        hrd_layer_set_idx,\n        cprms_present_flag,\n        hrdParameters,\n        vps_extension_flag,\n    };\n}\n\nexport type SubLayerHrdParameters = ReturnType<\n    typeof h265ParseSubLayerHrdParameters\n>;\n\n/**\n * 7.3.2.2.1 General sequence parameter set RBSP syntax\n */\nexport function h265ParseSequenceParameterSet(nalu: Uint8Array) {\n    const reader = new NaluSodbBitReader(nalu);\n\n    const sps_video_parameter_set_id = reader.read(4);\n    const sps_max_sub_layers_minus1 = reader.read(3);\n    const sps_temporal_id_nesting_flag = !!reader.next();\n\n    const profileTierLevel = h265ParseProfileTierLevel(\n        reader,\n        true,\n        sps_max_sub_layers_minus1\n    );\n\n    const sps_seq_parameter_set_id = reader.decodeExponentialGolombNumber();\n    const chroma_format_idc = reader.decodeExponentialGolombNumber();\n    let separate_colour_plane_flag: boolean | undefined;\n    if (chroma_format_idc === 3) {\n        separate_colour_plane_flag = !!reader.next();\n    }\n\n    const pic_width_in_luma_samples = reader.decodeExponentialGolombNumber();\n    const pic_height_in_luma_samples = reader.decodeExponentialGolombNumber();\n\n    const conformance_window_flag = !!reader.next();\n    let conf_win_left_offset: number | undefined;\n    let conf_win_right_offset: number | undefined;\n    let conf_win_top_offset: number | undefined;\n    let conf_win_bottom_offset: number | undefined;\n    if (conformance_window_flag) {\n        conf_win_left_offset = reader.decodeExponentialGolombNumber();\n        conf_win_right_offset = reader.decodeExponentialGolombNumber();\n        conf_win_top_offset = reader.decodeExponentialGolombNumber();\n        conf_win_bottom_offset = reader.decodeExponentialGolombNumber();\n    }\n\n    const bit_depth_luma_minus8 = reader.decodeExponentialGolombNumber();\n    const bit_depth_chroma_minus8 = reader.decodeExponentialGolombNumber();\n    const log2_max_pic_order_cnt_lsb_minus4 =\n        reader.decodeExponentialGolombNumber();\n\n    let sps_max_dec_pic_buffering_minus1: number[] | undefined;\n    let sps_max_num_reorder_pics: number[] | undefined;\n    let sps_max_latency_increase_plus1: number[] | undefined;\n    const sps_sub_layer_ordering_info_present_flag = !!reader.next();\n    for (\n        let i = sps_sub_layer_ordering_info_present_flag\n            ? 0\n            : sps_max_sub_layers_minus1;\n        i <= sps_max_sub_layers_minus1;\n        i += 1\n    ) {\n        sps_max_dec_pic_buffering_minus1 = [];\n        sps_max_num_reorder_pics = [];\n        sps_max_latency_increase_plus1 = [];\n        for (let i = 0; i <= sps_max_sub_layers_minus1; i += 1) {\n            sps_max_dec_pic_buffering_minus1[i] =\n                reader.decodeExponentialGolombNumber();\n            sps_max_num_reorder_pics[i] =\n                reader.decodeExponentialGolombNumber();\n            sps_max_latency_increase_plus1[i] =\n                reader.decodeExponentialGolombNumber();\n        }\n    }\n\n    const log2_min_luma_coding_block_size_minus3 =\n        reader.decodeExponentialGolombNumber();\n    const log2_diff_max_min_luma_coding_block_size =\n        reader.decodeExponentialGolombNumber();\n    const log2_min_luma_transform_block_size_minus2 =\n        reader.decodeExponentialGolombNumber();\n    const log2_diff_max_min_luma_transform_block_size =\n        reader.decodeExponentialGolombNumber();\n    const max_transform_hierarchy_depth_inter =\n        reader.decodeExponentialGolombNumber();\n    const max_transform_hierarchy_depth_intra =\n        reader.decodeExponentialGolombNumber();\n\n    const scaling_list_enabled_flag = !!reader.next();\n    let sps_scaling_list_data_present_flag: boolean | undefined;\n    let scalingListData: number[][][] | undefined;\n    if (scaling_list_enabled_flag) {\n        sps_scaling_list_data_present_flag = !!reader.next();\n        if (sps_scaling_list_data_present_flag) {\n            scalingListData = h265ParseScalingListData(reader);\n        }\n    }\n\n    const amp_enabled_flag = !!reader.next();\n    const sample_adaptive_offset_enabled_flag = !!reader.next();\n    const pcm_enabled_flag = !!reader.next();\n    let pcm_sample_bit_depth_luma_minus1: number | undefined;\n    let pcm_sample_bit_depth_chroma_minus1: number | undefined;\n    let log2_min_pcm_luma_coding_block_size_minus3: number | undefined;\n    let log2_diff_max_min_pcm_luma_coding_block_size: number | undefined;\n    let pcm_loop_filter_disabled_flag: boolean | undefined;\n    if (pcm_enabled_flag) {\n        pcm_sample_bit_depth_luma_minus1 = reader.read(4);\n        pcm_sample_bit_depth_chroma_minus1 = reader.read(4);\n        log2_min_pcm_luma_coding_block_size_minus3 = reader.read(4);\n        log2_diff_max_min_pcm_luma_coding_block_size = reader.read(4);\n        pcm_loop_filter_disabled_flag = !!reader.next();\n    }\n\n    const num_short_term_ref_pic_sets = reader.decodeExponentialGolombNumber();\n    const shortTermRefPicSets: ShortTermReferencePictureSet[] = [];\n    for (let i = 0; i < num_short_term_ref_pic_sets; i += 1) {\n        shortTermRefPicSets[i] = h265ParseShortTermReferencePictureSet(\n            reader,\n            i,\n            num_short_term_ref_pic_sets,\n            shortTermRefPicSets\n        );\n    }\n\n    const long_term_ref_pics_present_flag = !!reader.next();\n    let num_long_term_ref_pics_sps: number | undefined;\n    let lt_ref_pic_poc_lsb_sps: number[] | undefined;\n    let used_by_curr_pic_lt_sps_flag: boolean[] | undefined;\n    if (long_term_ref_pics_present_flag) {\n        num_long_term_ref_pics_sps = reader.decodeExponentialGolombNumber();\n        lt_ref_pic_poc_lsb_sps = [];\n        used_by_curr_pic_lt_sps_flag = [];\n        for (let i = 0; i < num_long_term_ref_pics_sps; i += 1) {\n            lt_ref_pic_poc_lsb_sps[i] = reader.read(\n                log2_max_pic_order_cnt_lsb_minus4 + 4\n            );\n            used_by_curr_pic_lt_sps_flag[i] = !!reader.next();\n        }\n    }\n\n    const sps_temporal_mvp_enabled_flag = !!reader.next();\n    const strong_intra_smoothing_enabled_flag = !!reader.next();\n    const vui_parameters_present_flag = !!reader.next();\n    let vuiParameters: H265VuiParameters | undefined;\n    if (vui_parameters_present_flag) {\n        vuiParameters = h265ParseVuiParameters(reader);\n    }\n\n    const sps_extension_present_flag = !!reader.next();\n    let sps_range_extension_flag: boolean | undefined;\n    let sps_multilayer_extension_flag: boolean | undefined;\n    let sps_3d_extension_flag: boolean | undefined;\n    let sps_scc_extension_flag: boolean | undefined;\n    let sps_extension_4bits: number | undefined;\n    if (sps_extension_present_flag) {\n        sps_range_extension_flag = !!reader.next();\n        sps_multilayer_extension_flag = !!reader.next();\n        sps_3d_extension_flag = !!reader.next();\n        sps_scc_extension_flag = !!reader.next();\n        sps_extension_4bits = reader.read(4);\n    }\n\n    if (sps_range_extension_flag) {\n        throw new Error(\"Not implemented\");\n    }\n\n    let spsMultilayerExtension: H265SpsMultilayerExtension | undefined;\n    if (sps_multilayer_extension_flag) {\n        spsMultilayerExtension = h265ParseSpsMultilayerExtension(reader);\n    }\n\n    let sps3dExtension: H265Sps3dExtension | undefined;\n    if (sps_3d_extension_flag) {\n        sps3dExtension = h265ParseSps3dExtension(reader);\n    }\n\n    if (sps_scc_extension_flag) {\n        throw new Error(\"Not implemented\");\n    }\n\n    let sps_extension_data_flag: boolean[] | undefined;\n    if (sps_extension_4bits) {\n        sps_extension_data_flag = [];\n        let i = 0;\n        while (!reader.ended) {\n            sps_extension_data_flag[i] = !!reader.next();\n            i += 1;\n        }\n    }\n\n    return {\n        sps_video_parameter_set_id,\n        sps_max_sub_layers_minus1,\n        sps_temporal_id_nesting_flag,\n        profileTierLevel,\n        sps_seq_parameter_set_id,\n        chroma_format_idc,\n        separate_colour_plane_flag,\n        pic_width_in_luma_samples,\n        pic_height_in_luma_samples,\n        conformance_window_flag,\n        conf_win_left_offset,\n        conf_win_right_offset,\n        conf_win_top_offset,\n        conf_win_bottom_offset,\n        bit_depth_luma_minus8,\n        bit_depth_chroma_minus8,\n        log2_max_pic_order_cnt_lsb_minus4,\n        sps_sub_layer_ordering_info_present_flag,\n        sps_max_dec_pic_buffering_minus1,\n        sps_max_num_reorder_pics,\n        sps_max_latency_increase_plus1,\n        log2_min_luma_coding_block_size_minus3,\n        log2_diff_max_min_luma_coding_block_size,\n        log2_min_luma_transform_block_size_minus2,\n        log2_diff_max_min_luma_transform_block_size,\n        max_transform_hierarchy_depth_inter,\n        max_transform_hierarchy_depth_intra,\n        scaling_list_enabled_flag,\n        sps_scaling_list_data_present_flag,\n        scalingListData,\n        amp_enabled_flag,\n        sample_adaptive_offset_enabled_flag,\n        pcm_enabled_flag,\n        pcm_sample_bit_depth_luma_minus1,\n        pcm_sample_bit_depth_chroma_minus1,\n        log2_min_pcm_luma_coding_block_size_minus3,\n        log2_diff_max_min_pcm_luma_coding_block_size,\n        pcm_loop_filter_disabled_flag,\n        num_short_term_ref_pic_sets,\n        shortTermRefPicSets,\n        long_term_ref_pics_present_flag,\n        num_long_term_ref_pics_sps,\n        lt_ref_pic_poc_lsb_sps,\n        used_by_curr_pic_lt_sps_flag,\n        sps_temporal_mvp_enabled_flag,\n        strong_intra_smoothing_enabled_flag,\n        vui_parameters_present_flag,\n        vuiParameters,\n        sps_extension_present_flag,\n        sps_range_extension_flag,\n        sps_multilayer_extension_flag,\n        sps_3d_extension_flag,\n        sps_scc_extension_flag,\n        sps_extension_4bits,\n        spsMultilayerExtension,\n        sps3dExtension,\n        sps_extension_data_flag,\n    };\n}\n\n/**\n * 7.3.3 Profile, tier and level syntax\n *\n * Common part between general_profile_tier_level and\n * sub_layer_profile_tier_level\n */\nfunction h265ParseProfileTier(reader: NaluSodbBitReader) {\n    const profile_space = reader.read(2);\n    const tier_flag = !!reader.next();\n    const profile_idc = reader.read(5);\n\n    const profileCompatibilitySet = reader.peekBytes(4);\n    const profile_compatibility_flag: boolean[] = [];\n    for (let j = 0; j < 32; j += 1) {\n        profile_compatibility_flag[j] = !!reader.next();\n    }\n\n    const constraintSet = reader.peekBytes(6);\n\n    const progressive_source_flag = !!reader.next();\n    const interlaced_source_flag = !!reader.next();\n    const non_packed_constraint_flag = !!reader.next();\n    const frame_only_constraint_flag = !!reader.next();\n\n    let max_12bit_constraint_flag: boolean | undefined;\n    let max_10bit_constraint_flag: boolean | undefined;\n    let max_8bit_constraint_flag: boolean | undefined;\n    let max_422chroma_constraint_flag: boolean | undefined;\n    let max_420chroma_constraint_flag: boolean | undefined;\n    let max_monochrome_constraint_flag: boolean | undefined;\n    let intra_constraint_flag: boolean | undefined;\n    let one_picture_only_constraint_flag: boolean | undefined;\n    let lower_bit_rate_constraint_flag: boolean | undefined;\n    let max_14bit_constraint_flag: boolean | undefined;\n    if (\n        profile_idc === 4 ||\n        profile_compatibility_flag[4] ||\n        profile_idc === 5 ||\n        profile_compatibility_flag[5] ||\n        profile_idc === 6 ||\n        profile_compatibility_flag[6] ||\n        profile_idc === 7 ||\n        profile_compatibility_flag[7] ||\n        profile_idc === 8 ||\n        profile_compatibility_flag[8] ||\n        profile_idc === 9 ||\n        profile_compatibility_flag[9] ||\n        profile_idc === 10 ||\n        profile_compatibility_flag[10] ||\n        profile_idc === 11 ||\n        profile_compatibility_flag[11]\n    ) {\n        max_12bit_constraint_flag = !!reader.next();\n        max_10bit_constraint_flag = !!reader.next();\n        max_8bit_constraint_flag = !!reader.next();\n        max_422chroma_constraint_flag = !!reader.next();\n        max_420chroma_constraint_flag = !!reader.next();\n        max_monochrome_constraint_flag = !!reader.next();\n        intra_constraint_flag = !!reader.next();\n        one_picture_only_constraint_flag = !!reader.next();\n        lower_bit_rate_constraint_flag = !!reader.next();\n        if (\n            profile_idc === 5 ||\n            profile_compatibility_flag[5] ||\n            profile_idc === 9 ||\n            profile_compatibility_flag[9] ||\n            profile_idc === 10 ||\n            profile_compatibility_flag[10] ||\n            profile_idc === 11 ||\n            profile_compatibility_flag[11]\n        ) {\n            max_14bit_constraint_flag = !!reader.next();\n            reader.skip(33);\n        } else {\n            reader.skip(34);\n        }\n    } else if (profile_idc === 2 || profile_compatibility_flag[2]) {\n        reader.skip(7);\n        one_picture_only_constraint_flag = !!reader.next();\n        reader.skip(35);\n    } else {\n        reader.skip(43);\n    }\n\n    let inbld_flag: boolean | undefined;\n    if (\n        profile_idc === 1 ||\n        profile_compatibility_flag[1] ||\n        profile_idc === 2 ||\n        profile_compatibility_flag[2] ||\n        profile_idc === 3 ||\n        profile_compatibility_flag[3] ||\n        profile_idc === 4 ||\n        profile_compatibility_flag[4] ||\n        profile_idc === 5 ||\n        profile_compatibility_flag[5] ||\n        profile_idc === 9 ||\n        profile_compatibility_flag[9] ||\n        profile_idc === 11 ||\n        profile_compatibility_flag[11]\n    ) {\n        inbld_flag = !!reader.next();\n    } else {\n        reader.skip(1);\n    }\n\n    return {\n        profile_space,\n        tier_flag,\n        profile_idc,\n        profileCompatibilitySet,\n        profile_compatibility_flag,\n        constraintSet,\n        progressive_source_flag,\n        interlaced_source_flag,\n        non_packed_constraint_flag,\n        frame_only_constraint_flag,\n        max_12bit_constraint_flag,\n        max_10bit_constraint_flag,\n        max_8bit_constraint_flag,\n        max_422chroma_constraint_flag,\n        max_420chroma_constraint_flag,\n        max_monochrome_constraint_flag,\n        intra_constraint_flag,\n        one_picture_only_constraint_flag,\n        lower_bit_rate_constraint_flag,\n        max_14bit_constraint_flag,\n        inbld_flag,\n    };\n}\n\nexport type H265ProfileTier = ReturnType<typeof h265ParseProfileTier>;\n\nexport interface H265ProfileTierLevel {\n    generalProfileTier: H265ProfileTier | undefined;\n    general_level_idc: number;\n    sub_layer_profile_present_flag: boolean[];\n    sub_layer_level_present_flag: boolean[];\n    subLayerProfileTier: H265ProfileTier[];\n    sub_layer_level_idc: number[];\n}\n\n/**\n * 7.3.3 Profile, tier and level syntax\n */\nfunction h265ParseProfileTierLevel(\n    reader: NaluSodbBitReader,\n    profilePresentFlag: true,\n    maxNumSubLayersMinus1: number\n): H265ProfileTierLevel & { generalProfileTier: H265ProfileTier };\nfunction h265ParseProfileTierLevel(\n    reader: NaluSodbBitReader,\n    profilePresentFlag: false,\n    maxNumSubLayersMinus1: number\n): H265ProfileTierLevel & { generalProfileTier: undefined };\nfunction h265ParseProfileTierLevel(\n    reader: NaluSodbBitReader,\n    profilePresentFlag: boolean,\n    maxNumSubLayersMinus1: number\n): H265ProfileTierLevel;\nfunction h265ParseProfileTierLevel(\n    reader: NaluSodbBitReader,\n    profilePresentFlag: boolean,\n    maxNumSubLayersMinus1: number\n): H265ProfileTierLevel {\n    let generalProfileTier: H265ProfileTier | undefined;\n    if (profilePresentFlag) {\n        generalProfileTier = h265ParseProfileTier(reader);\n    }\n\n    const general_level_idc = reader.read(8);\n\n    const sub_layer_profile_present_flag: boolean[] = [];\n    const sub_layer_level_present_flag: boolean[] = [];\n    for (let i = 0; i < maxNumSubLayersMinus1; i += 1) {\n        sub_layer_profile_present_flag[i] = !!reader.next();\n        sub_layer_level_present_flag[i] = !!reader.next();\n    }\n\n    if (maxNumSubLayersMinus1 > 0) {\n        for (let i = maxNumSubLayersMinus1; i < 8; i += 1) {\n            reader.read(2);\n        }\n    }\n\n    const subLayerProfileTier: H265ProfileTier[] = [];\n    const sub_layer_level_idc: number[] = [];\n    for (let i = 0; i < maxNumSubLayersMinus1; i += 1) {\n        if (sub_layer_profile_present_flag[i]) {\n            subLayerProfileTier[i] = h265ParseProfileTier(reader);\n        }\n        if (sub_layer_level_present_flag[i]) {\n            sub_layer_level_idc[i] = reader.read(8);\n        }\n    }\n\n    return {\n        generalProfileTier,\n        general_level_idc,\n        sub_layer_profile_present_flag,\n        sub_layer_level_present_flag,\n        subLayerProfileTier,\n        sub_layer_level_idc,\n    };\n}\n\n/**\n * 7.3.4 Scaling list data syntax\n */\nexport function h265ParseScalingListData(reader: NaluSodbBitReader) {\n    const scaling_list: number[][][] = [];\n    for (let sizeId = 0; sizeId < 4; sizeId += 1) {\n        scaling_list[sizeId] = [];\n        for (let matrixId = 0; matrixId < 6; matrixId += sizeId === 3 ? 3 : 1) {\n            const scaling_list_pred_mode_flag = !!reader.next();\n            if (!scaling_list_pred_mode_flag) {\n                reader.decodeExponentialGolombNumber();\n            } else {\n                let nextCoef = 8;\n                const coefNum = Math.min(64, 1 << (4 + (sizeId << 1)));\n                if (sizeId > 1) {\n                    const scaling_list_dc_coef_minus8 =\n                        reader.decodeExponentialGolombNumber();\n                    nextCoef = scaling_list_dc_coef_minus8 + 8;\n                }\n                scaling_list[sizeId]![matrixId] = [];\n                for (let i = 0; i < coefNum; i += 1) {\n                    const scaling_list_delta_coef =\n                        reader.decodeExponentialGolombNumber();\n                    nextCoef = (nextCoef + scaling_list_delta_coef + 256) % 256;\n                    scaling_list[sizeId]![matrixId]![i] = nextCoef;\n                }\n            }\n        }\n    }\n    return scaling_list;\n}\n\ninterface ShortTermReferencePictureSet {\n    stRpsIdx: number;\n    num_short_term_ref_pic_sets: number;\n\n    inter_ref_pic_set_prediction_flag: boolean;\n    delta_idx_minus1: number;\n    delta_rps_sign: boolean;\n    abs_delta_rps_minus1: number;\n    used_by_curr_pic_flag: boolean[];\n    use_delta_flag: boolean[];\n    num_negative_pics: number;\n    num_positive_pics: number;\n    delta_poc_s0_minus1: number[];\n    used_by_curr_pic_s0_flag: boolean[];\n    delta_poc_s1_minus1: number[];\n    used_by_curr_pic_s1_flag: boolean[];\n}\n\n/**\n * 7.3.7 Short-term reference picture set syntax\n */\nexport function h265ParseShortTermReferencePictureSet(\n    reader: NaluSodbBitReader,\n    stRpsIdx: number,\n    num_short_term_ref_pic_sets: number,\n    sets: ShortTermReferencePictureSet[]\n): ShortTermReferencePictureSet {\n    let inter_ref_pic_set_prediction_flag = false;\n    if (stRpsIdx !== 0) {\n        inter_ref_pic_set_prediction_flag = !!reader.next();\n    }\n    let delta_idx_minus1 = 0;\n    let delta_rps_sign = false;\n    let abs_delta_rps_minus1 = 0;\n    const used_by_curr_pic_flag: boolean[] = [];\n    const use_delta_flag: boolean[] = [];\n    let num_negative_pics = 0;\n    let num_positive_pics = 0;\n    const delta_poc_s0_minus1: number[] = [];\n    const used_by_curr_pic_s0_flag: boolean[] = [];\n    const delta_poc_s1_minus1: number[] = [];\n    const used_by_curr_pic_s1_flag: boolean[] = [];\n    if (inter_ref_pic_set_prediction_flag) {\n        if (stRpsIdx === num_short_term_ref_pic_sets) {\n            delta_idx_minus1 = reader.decodeExponentialGolombNumber();\n        }\n        delta_rps_sign = !!reader.next();\n        abs_delta_rps_minus1 = reader.decodeExponentialGolombNumber();\n        const RefRpsIdx = stRpsIdx - (delta_idx_minus1 + 1);\n        const RefRps = sets[RefRpsIdx]!;\n        const NumDeltaPocs_RefRpsIdx =\n            RefRps.num_negative_pics + RefRps.num_positive_pics;\n        for (let j = 0; j <= NumDeltaPocs_RefRpsIdx; j += 1) {\n            used_by_curr_pic_flag[j] = !!reader.next();\n            if (!used_by_curr_pic_flag[j]!) {\n                use_delta_flag[j] = !!reader.next();\n            } else {\n                use_delta_flag[j] = true;\n            }\n        }\n\n        const DeltaRps =\n            (1 - 2 * Number(delta_rps_sign)) * (abs_delta_rps_minus1 + 1);\n\n        const RefPocS0: number[] = [];\n        const RefPocS1: number[] = [];\n        const pocS0: number[] = [];\n        const pocS1: number[] = [];\n\n        let dPoc = 0;\n        for (let i = 0; i < RefRps.num_negative_pics; i += 1) {\n            dPoc -= RefRps.delta_poc_s0_minus1[i]! + 1;\n            RefPocS0[i] = dPoc;\n        }\n        dPoc = 0;\n        for (let i = 0; i < RefRps.num_positive_pics; i += 1) {\n            dPoc += RefRps.delta_poc_s1_minus1[i]! + 1;\n            RefPocS1[i] = dPoc;\n        }\n\n        let i = 0;\n        if (RefRps.num_positive_pics > 0) {\n            for (let j = RefRps.num_positive_pics - 1; j >= 0; j -= 1) {\n                dPoc = RefPocS1[j]! + DeltaRps;\n                if (dPoc < 0 && use_delta_flag[RefRps.num_negative_pics + j]) {\n                    pocS0[i] = dPoc;\n                    used_by_curr_pic_s0_flag[i] =\n                        used_by_curr_pic_flag[RefRps.num_negative_pics + j]!;\n                    i += 1;\n                }\n            }\n        }\n        if (DeltaRps < 0 && use_delta_flag[NumDeltaPocs_RefRpsIdx]) {\n            pocS0[i] = DeltaRps;\n            used_by_curr_pic_s0_flag[i] =\n                used_by_curr_pic_flag[NumDeltaPocs_RefRpsIdx]!;\n            i += 1;\n        }\n        for (let j = 0; j < RefRps.num_negative_pics; j += 1) {\n            dPoc = RefPocS0[j]! + DeltaRps;\n            if (dPoc < 0 && use_delta_flag[j]) {\n                pocS0[i] = dPoc;\n                used_by_curr_pic_s0_flag[i] = used_by_curr_pic_flag[j]!;\n                i += 1;\n            }\n        }\n\n        num_negative_pics = i;\n        let prev = 0;\n        for (i = 0; i < num_negative_pics; i += 1) {\n            const current = pocS0[i]!;\n            delta_poc_s0_minus1[i] = -(current - prev - 1);\n            prev = current;\n        }\n\n        i = 0;\n        if (RefRps.num_negative_pics > 0) {\n            for (let j = RefRps.num_negative_pics - 1; j >= 0; j -= 1) {\n                dPoc = RefPocS0[j]! + DeltaRps;\n                if (dPoc > 0 && use_delta_flag[j]) {\n                    pocS1[i] = dPoc;\n                    used_by_curr_pic_s1_flag[i] = used_by_curr_pic_flag[j]!;\n                    i += 1;\n                }\n            }\n        }\n        if (DeltaRps > 0 && use_delta_flag[NumDeltaPocs_RefRpsIdx]) {\n            pocS1[i] = DeltaRps;\n            used_by_curr_pic_s1_flag[i] =\n                used_by_curr_pic_flag[NumDeltaPocs_RefRpsIdx]!;\n            i += 1;\n        }\n        for (let j = 0; j < RefRps.num_positive_pics; j += 1) {\n            dPoc = RefPocS1[j]! + DeltaRps;\n            if (dPoc > 0 && use_delta_flag[RefRps.num_negative_pics + j]) {\n                pocS1[i] = dPoc;\n                used_by_curr_pic_s1_flag[i] =\n                    used_by_curr_pic_flag[RefRps.num_negative_pics + j]!;\n                i += 1;\n            }\n        }\n\n        num_positive_pics = i;\n        prev = 0;\n        for (i = 0; i < num_positive_pics; i += 1) {\n            const current = pocS1[i]!;\n            delta_poc_s1_minus1[i] = current - prev - 1;\n            prev = current;\n        }\n    } else {\n        num_negative_pics = reader.decodeExponentialGolombNumber();\n        num_positive_pics = reader.decodeExponentialGolombNumber();\n        for (let i = 0; i < num_negative_pics; i += 1) {\n            delta_poc_s0_minus1[i] = reader.decodeExponentialGolombNumber();\n            used_by_curr_pic_s0_flag[i] = !!reader.next();\n        }\n        for (let i = 0; i < num_positive_pics; i += 1) {\n            delta_poc_s1_minus1[i] = reader.decodeExponentialGolombNumber();\n            used_by_curr_pic_s1_flag[i] = !!reader.next();\n        }\n    }\n\n    return {\n        stRpsIdx,\n        num_short_term_ref_pic_sets,\n        inter_ref_pic_set_prediction_flag,\n        delta_idx_minus1,\n        delta_rps_sign,\n        abs_delta_rps_minus1,\n        used_by_curr_pic_flag,\n        use_delta_flag,\n        num_negative_pics,\n        num_positive_pics,\n        delta_poc_s0_minus1,\n        used_by_curr_pic_s0_flag,\n        delta_poc_s1_minus1,\n        used_by_curr_pic_s1_flag,\n    };\n}\n\n/**\n * E.2.1 VUI parameters syntax\n */\nexport function h265ParseVuiParameters(reader: NaluSodbBitReader) {\n    const aspect_ratio_info_present_flag = !!reader.next();\n    let aspect_ratio_idc: number | undefined;\n    let sar_width: number | undefined;\n    let sar_height: number | undefined;\n    if (aspect_ratio_info_present_flag) {\n        aspect_ratio_idc = reader.read(8);\n        if (aspect_ratio_idc === 255) {\n            sar_width = reader.read(16);\n            sar_height = reader.read(16);\n        }\n    }\n\n    const overscan_info_present_flag = !!reader.next();\n    let overscan_appropriate_flag: boolean | undefined;\n    if (overscan_info_present_flag) {\n        overscan_appropriate_flag = !!reader.next();\n    }\n\n    const video_signal_type_present_flag = !!reader.next();\n    let video_format: number | undefined;\n    let video_full_range_flag: boolean | undefined;\n    let colour_description_present_flag: boolean | undefined;\n    let colour_primaries: number | undefined;\n    let transfer_characteristics: number | undefined;\n    let matrix_coeffs: number | undefined;\n    if (video_signal_type_present_flag) {\n        video_format = reader.read(3);\n        video_full_range_flag = !!reader.next();\n        colour_description_present_flag = !!reader.next();\n        if (colour_description_present_flag) {\n            colour_primaries = reader.read(8);\n            transfer_characteristics = reader.read(8);\n            matrix_coeffs = reader.read(8);\n        }\n    }\n\n    const chroma_loc_info_present_flag = !!reader.next();\n    let chroma_sample_loc_type_top_field: number | undefined;\n    let chroma_sample_loc_type_bottom_field: number | undefined;\n    if (chroma_loc_info_present_flag) {\n        chroma_sample_loc_type_top_field =\n            reader.decodeExponentialGolombNumber();\n        chroma_sample_loc_type_bottom_field =\n            reader.decodeExponentialGolombNumber();\n    }\n\n    const neutral_chroma_indication_flag = !!reader.next();\n    const field_seq_flag = !!reader.next();\n    const frame_field_info_present_flag = !!reader.next();\n\n    const default_display_window_flag = !!reader.next();\n    let def_disp_win_left_offset: number | undefined;\n    let def_disp_win_right_offset: number | undefined;\n    let def_disp_win_top_offset: number | undefined;\n    let def_disp_win_bottom_offset: number | undefined;\n    if (default_display_window_flag) {\n        def_disp_win_left_offset = reader.decodeExponentialGolombNumber();\n        def_disp_win_right_offset = reader.decodeExponentialGolombNumber();\n        def_disp_win_top_offset = reader.decodeExponentialGolombNumber();\n        def_disp_win_bottom_offset = reader.decodeExponentialGolombNumber();\n    }\n\n    const vui_timing_info_present_flag = !!reader.next();\n    let vui_num_units_in_tick: number | undefined;\n    let vui_time_scale: number | undefined;\n    let vui_poc_proportional_to_timing_flag: boolean | undefined;\n    let vui_num_ticks_poc_diff_one_minus1: number | undefined;\n    let vui_hrd_parameters_present_flag: boolean | undefined;\n    if (vui_timing_info_present_flag) {\n        vui_num_units_in_tick = reader.read(32);\n        vui_time_scale = reader.read(32);\n        vui_poc_proportional_to_timing_flag = !!reader.next();\n        if (vui_poc_proportional_to_timing_flag) {\n            vui_num_ticks_poc_diff_one_minus1 =\n                reader.decodeExponentialGolombNumber();\n        }\n        vui_hrd_parameters_present_flag = !!reader.next();\n        if (vui_hrd_parameters_present_flag) {\n            throw new Error(\"Not implemented\");\n        }\n    }\n\n    const bitstream_restriction_flag = !!reader.next();\n    let tiles_fixed_structure_flag: boolean | undefined;\n    let motion_vectors_over_pic_boundaries_flag: boolean | undefined;\n    let restricted_ref_pic_lists_flag: boolean | undefined;\n    let min_spatial_segmentation_idc: number | undefined;\n    let max_bytes_per_pic_denom: number | undefined;\n    let max_bits_per_min_cu_denom: number | undefined;\n    let log2_max_mv_length_horizontal: number | undefined;\n    let log2_max_mv_length_vertical: number | undefined;\n    if (bitstream_restriction_flag) {\n        tiles_fixed_structure_flag = !!reader.next();\n        motion_vectors_over_pic_boundaries_flag = !!reader.next();\n        restricted_ref_pic_lists_flag = !!reader.next();\n        min_spatial_segmentation_idc = reader.decodeExponentialGolombNumber();\n        max_bytes_per_pic_denom = reader.decodeExponentialGolombNumber();\n        max_bits_per_min_cu_denom = reader.decodeExponentialGolombNumber();\n        log2_max_mv_length_horizontal = reader.decodeExponentialGolombNumber();\n        log2_max_mv_length_vertical = reader.decodeExponentialGolombNumber();\n    }\n\n    return {\n        aspect_ratio_info_present_flag,\n        aspect_ratio_idc,\n        sar_width,\n        sar_height,\n\n        overscan_info_present_flag,\n        overscan_appropriate_flag,\n\n        video_signal_type_present_flag,\n        video_format,\n        video_full_range_flag,\n        colour_description_present_flag,\n        colour_primaries,\n        transfer_characteristics,\n        matrix_coeffs,\n\n        chroma_loc_info_present_flag,\n        chroma_sample_loc_type_top_field,\n        chroma_sample_loc_type_bottom_field,\n\n        neutral_chroma_indication_flag,\n        field_seq_flag,\n        frame_field_info_present_flag,\n\n        default_display_window_flag,\n        def_disp_win_left_offset,\n        def_disp_win_right_offset,\n        def_disp_win_top_offset,\n        def_disp_win_bottom_offset,\n\n        vui_timing_info_present_flag,\n        vui_num_units_in_tick,\n        vui_time_scale,\n        vui_poc_proportional_to_timing_flag,\n        vui_num_ticks_poc_diff_one_minus1,\n        vui_hrd_parameters_present_flag,\n\n        bitstream_restriction_flag,\n        tiles_fixed_structure_flag,\n        motion_vectors_over_pic_boundaries_flag,\n        restricted_ref_pic_lists_flag,\n        min_spatial_segmentation_idc,\n        max_bytes_per_pic_denom,\n        max_bits_per_min_cu_denom,\n        log2_max_mv_length_horizontal,\n        log2_max_mv_length_vertical,\n    };\n}\n\nexport type H265VuiParameters = ReturnType<typeof h265ParseVuiParameters>;\n\n/**\n * E.2.2 HRD parameters syntax\n */\nexport function h265ParseHrdParameters(\n    reader: NaluSodbBitReader,\n    commonInfPresentFlag: boolean,\n    maxNumSubLayersMinus1: number\n) {\n    let nal_hrd_parameters_present_flag: boolean | undefined;\n    let vcl_hrd_parameters_present_flag: boolean | undefined;\n    let sub_pic_hrd_params_present_flag: boolean | undefined;\n    let tick_divisor_minus2: number | undefined;\n    let du_cpb_removal_delay_increment_length_minus1: number | undefined;\n    let sub_pic_cpb_params_in_pic_timing_sei_flag: boolean | undefined;\n    let dpb_output_delay_du_length_minus1: number | undefined;\n    let bit_rate_scale: number | undefined;\n    let cpb_size_scale: number | undefined;\n    let cpb_size_du_scale: number | undefined;\n    let initial_cpb_removal_delay_length_minus1: number | undefined;\n    let au_cpb_removal_delay_length_minus1: number | undefined;\n    let dpb_output_delay_length_minus1: number | undefined;\n    if (commonInfPresentFlag) {\n        nal_hrd_parameters_present_flag = !!reader.next();\n        vcl_hrd_parameters_present_flag = !!reader.next();\n        if (\n            nal_hrd_parameters_present_flag ||\n            vcl_hrd_parameters_present_flag\n        ) {\n            sub_pic_hrd_params_present_flag = !!reader.next();\n            if (sub_pic_hrd_params_present_flag) {\n                tick_divisor_minus2 = reader.read(8);\n                du_cpb_removal_delay_increment_length_minus1 = reader.read(5);\n                sub_pic_cpb_params_in_pic_timing_sei_flag = !!reader.next();\n                dpb_output_delay_du_length_minus1 = reader.read(5);\n            }\n            bit_rate_scale = reader.read(4);\n            cpb_size_scale = reader.read(4);\n            if (sub_pic_hrd_params_present_flag) {\n                cpb_size_du_scale = reader.read(4);\n            }\n            initial_cpb_removal_delay_length_minus1 = reader.read(5);\n            au_cpb_removal_delay_length_minus1 = reader.read(5);\n            dpb_output_delay_length_minus1 = reader.read(5);\n        }\n    }\n\n    const fixed_pic_rate_general_flag: boolean[] = [];\n    const fixed_pic_rate_within_cvs_flag: boolean[] = [];\n    const elemental_duration_in_tc_minus1: number[] = [];\n    const low_delay_hrd_flag: boolean[] = [];\n    const cpb_cnt_minus1: number[] = [];\n    const nalHrdParameters: SubLayerHrdParameters[] = [];\n    const vclHrdParameters: SubLayerHrdParameters[] = [];\n    for (let i = 0; i <= maxNumSubLayersMinus1; i += 1) {\n        fixed_pic_rate_general_flag[i] = !!reader.next();\n        if (!fixed_pic_rate_general_flag[i]) {\n            fixed_pic_rate_within_cvs_flag[i] = !!reader.next();\n        }\n        if (fixed_pic_rate_within_cvs_flag[i]) {\n            elemental_duration_in_tc_minus1[i] =\n                reader.decodeExponentialGolombNumber();\n        } else {\n            low_delay_hrd_flag[i] = !!reader.next();\n        }\n\n        if (!low_delay_hrd_flag[i]) {\n            cpb_cnt_minus1[i] = reader.decodeExponentialGolombNumber();\n        }\n\n        if (nal_hrd_parameters_present_flag) {\n            nalHrdParameters[i] = h265ParseSubLayerHrdParameters(\n                reader,\n                i,\n                getCpbCnt(cpb_cnt_minus1[i]!)\n            );\n        }\n        if (vcl_hrd_parameters_present_flag) {\n            vclHrdParameters[i] = h265ParseSubLayerHrdParameters(\n                reader,\n                i,\n                getCpbCnt(cpb_cnt_minus1[i]!)\n            );\n        }\n    }\n\n    return {\n        nal_hrd_parameters_present_flag,\n        vcl_hrd_parameters_present_flag,\n        sub_pic_hrd_params_present_flag,\n        tick_divisor_minus2,\n        du_cpb_removal_delay_increment_length_minus1,\n        sub_pic_cpb_params_in_pic_timing_sei_flag,\n        dpb_output_delay_du_length_minus1,\n        bit_rate_scale,\n        cpb_size_scale,\n        cpb_size_du_scale,\n        initial_cpb_removal_delay_length_minus1,\n        au_cpb_removal_delay_length_minus1,\n        dpb_output_delay_length_minus1,\n        fixed_pic_rate_general_flag,\n        fixed_pic_rate_within_cvs_flag,\n        elemental_duration_in_tc_minus1,\n        low_delay_hrd_flag,\n        cpb_cnt_minus1,\n        nalHrdParameters,\n        vclHrdParameters,\n    };\n}\n\nexport type H265HrdParameters = ReturnType<typeof h265ParseHrdParameters>;\n\n/**\n * E.2.3 Sub-layer HRD parameters syntax\n */\nexport function h265ParseSubLayerHrdParameters(\n    reader: NaluSodbBitReader,\n    subLayerId: number,\n    CpbCnt: number\n) {\n    const bit_rate_value_minus1: number[] = [];\n    const cpb_size_value_minus1: number[] = [];\n    const cpb_size_du_value_minus1: number[] = [];\n    const bit_rate_du_value_minus1: number[] = [];\n    const cbr_flag: boolean[] = [];\n    for (let i = 0; i < CpbCnt; i += 1) {\n        bit_rate_value_minus1[i] = reader.decodeExponentialGolombNumber();\n        cpb_size_value_minus1[i] = reader.decodeExponentialGolombNumber();\n        if (subLayerId > 0) {\n            cbr_flag[i] = !!reader.next();\n        }\n    }\n    return {\n        bit_rate_value_minus1,\n        cpb_size_value_minus1,\n        cpb_size_du_value_minus1,\n        bit_rate_du_value_minus1,\n        cbr_flag,\n    };\n}\n\n/**\n * E.3.3 Sub-layer HRD parameters semantics\n */\nfunction getCpbCnt(cpb_cnt_minus_1: number) {\n    return cpb_cnt_minus_1 + 1;\n}\n\nexport function h265SearchConfiguration(buffer: Uint8Array) {\n    let videoParameterSet!: H265NaluRaw;\n    let sequenceParameterSet!: H265NaluRaw;\n    let pictureParameterSet!: H265NaluRaw;\n    let count = 0;\n\n    for (const nalu of annexBSplitNalu(buffer)) {\n        const header = h265ParseNaluHeader(nalu);\n        const raw: H265NaluRaw = {\n            ...header,\n            data: nalu,\n            rbsp: nalu.subarray(2),\n        };\n        switch (header.nal_unit_type) {\n            case 32:\n                videoParameterSet = raw;\n                break;\n            case 33:\n                sequenceParameterSet = raw;\n                break;\n            case 34:\n                pictureParameterSet = raw;\n                break;\n            default:\n                continue;\n        }\n\n        count += 1;\n        if (count === 3) {\n            return {\n                videoParameterSet,\n                sequenceParameterSet,\n                pictureParameterSet,\n            };\n        }\n    }\n\n    throw new Error(\"Invalid data\");\n}\n\nexport function h265ParseSpsMultilayerExtension(reader: NaluSodbBitReader) {\n    const inter_view_mv_vert_constraint_flag = !!reader.next();\n    return {\n        inter_view_mv_vert_constraint_flag,\n    };\n}\n\nexport type H265SpsMultilayerExtension = ReturnType<\n    typeof h265ParseSpsMultilayerExtension\n>;\n\nexport function h265ParseSps3dExtension(reader: NaluSodbBitReader) {\n    const iv_di_mc_enabled_flag: boolean[] = [];\n    const iv_mv_scal_enabled_flag: boolean[] = [];\n\n    iv_di_mc_enabled_flag[0] = !!reader.next();\n    iv_mv_scal_enabled_flag[0] = !!reader.next();\n\n    const log2_ivmc_sub_pb_size_minus3 = reader.decodeExponentialGolombNumber();\n    const iv_res_pred_enabled_flag = !!reader.next();\n    const depth_ref_enabled_flag = !!reader.next();\n    const vsp_mc_enabled_flag = !!reader.next();\n    const dbbp_enabled_flag = !!reader.next();\n\n    iv_di_mc_enabled_flag[1] = !!reader.next();\n    iv_mv_scal_enabled_flag[1] = !!reader.next();\n\n    const tex_mc_enabled_flag = !!reader.next();\n    const log2_texmc_sub_pb_size_minus3 =\n        reader.decodeExponentialGolombNumber();\n    const intra_contour_enabled_flag = !!reader.next();\n    const intra_dc_only_wedge_enabled_flag = !!reader.next();\n    const cqt_cu_part_pred_enabled_flag = !!reader.next();\n    const inter_dc_only_enabled_flag = !!reader.next();\n    const skip_intra_enabled_flag = !!reader.next();\n\n    return {\n        iv_di_mc_enabled_flag,\n        iv_mv_scal_enabled_flag,\n        log2_ivmc_sub_pb_size_minus3,\n        iv_res_pred_enabled_flag,\n        depth_ref_enabled_flag,\n        vsp_mc_enabled_flag,\n        dbbp_enabled_flag,\n        tex_mc_enabled_flag,\n        log2_texmc_sub_pb_size_minus3,\n        intra_contour_enabled_flag,\n        intra_dc_only_wedge_enabled_flag,\n        cqt_cu_part_pred_enabled_flag,\n        inter_dc_only_enabled_flag,\n        skip_intra_enabled_flag,\n    };\n}\n\nexport type H265Sps3dExtension = ReturnType<typeof h265ParseSps3dExtension>;\n\nexport interface H265Configuration {\n    videoParameterSet: H265NaluRaw;\n    sequenceParameterSet: H265NaluRaw;\n    pictureParameterSet: H265NaluRaw;\n\n    generalProfileSpace: number;\n    generalProfileIndex: number;\n    generalProfileCompatibilitySet: Uint8Array;\n    generalTierFlag: boolean;\n    generalLevelIndex: number;\n    generalConstraintSet: Uint8Array;\n\n    encodedWidth: number;\n    encodedHeight: number;\n\n    cropLeft: number;\n    cropRight: number;\n    cropTop: number;\n    cropBottom: number;\n    croppedWidth: number;\n    croppedHeight: number;\n}\n\nexport function h265ParseConfiguration(data: Uint8Array): H265Configuration {\n    const { videoParameterSet, sequenceParameterSet, pictureParameterSet } =\n        h265SearchConfiguration(data);\n\n    const {\n        profileTierLevel: {\n            generalProfileTier: {\n                profile_space: generalProfileSpace,\n                tier_flag: generalTierFlag,\n                profile_idc: generalProfileIndex,\n                profileCompatibilitySet: generalProfileCompatibilitySet,\n                constraintSet: generalConstraintSet,\n            },\n            general_level_idc: generalLevelIndex,\n        },\n    } = h265ParseVideoParameterSet(videoParameterSet.rbsp);\n\n    const {\n        chroma_format_idc,\n        pic_width_in_luma_samples: encodedWidth,\n        pic_height_in_luma_samples: encodedHeight,\n        conf_win_left_offset: cropLeft = 0,\n        conf_win_right_offset: cropRight = 0,\n        conf_win_top_offset: cropTop = 0,\n        conf_win_bottom_offset: cropBottom = 0,\n    } = h265ParseSequenceParameterSet(sequenceParameterSet.rbsp);\n\n    const SubWidthC = getSubWidthC(chroma_format_idc);\n    const SubHeightC = getSubHeightC(chroma_format_idc);\n\n    const croppedWidth = encodedWidth - SubWidthC * (cropLeft + cropRight);\n    const croppedHeight = encodedHeight - SubHeightC * (cropTop + cropBottom);\n\n    return {\n        videoParameterSet,\n        sequenceParameterSet,\n        pictureParameterSet,\n\n        generalProfileSpace,\n        generalProfileIndex,\n        generalProfileCompatibilitySet,\n        generalTierFlag,\n        generalLevelIndex,\n        generalConstraintSet,\n\n        encodedWidth,\n        encodedHeight,\n        cropLeft,\n        cropRight,\n        cropTop,\n        cropBottom,\n        croppedWidth,\n        croppedHeight,\n    };\n}\n","export * from \"./av1.js\";\nexport * from \"./h264.js\";\nexport * from \"./h265.js\";\nexport * from \"./nalu.js\";\n","import { Struct } from \"@yume-chan/struct\";\n\nexport const BasicControlMessage = new Struct().uint8(\"type\");\n","import type { ScrcpyInjectTouchControlMessage2_0 } from \"../options/index.js\";\n\n// https://developer.android.com/reference/android/view/MotionEvent#constants_1\nexport enum AndroidMotionEventAction {\n    Down,\n    Up,\n    Move,\n    Cancel,\n    Outside,\n    PointerDown,\n    PointerUp,\n    HoverMove,\n    Scroll,\n    HoverEnter,\n    HoverExit,\n    ButtonPress,\n    ButtonRelease,\n}\n\nexport enum AndroidMotionEventButton {\n    Primary = 0x01,\n    Secondary = 0x02,\n    Tertiary = 0x04,\n    Back = 0x08,\n    Forward = 0x10,\n    StylusPrimary = 0x20,\n    StylusSecondary = 0x40,\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace ScrcpyPointerId {\n    export const Mouse = -1n;\n    export const Finger = -2n;\n    export const VirtualMouse = -3n;\n    export const VirtualFinger = -4n;\n}\n\nexport type ScrcpyInjectTouchControlMessage =\n    ScrcpyInjectTouchControlMessage2_0;\n","// https://github.com/Genymobile/scrcpy/blob/fa5b2a29e983a46b49531def9cf3d80c40c3de37/app/src/control_msg.h#L23\n// For their message bodies, see https://github.com/Genymobile/scrcpy/blob/5c62f3419d252d10cd8c9cbb7c918b358b81f2d0/app/src/control_msg.c#L92\n\nimport type { ScrcpyOptions } from \"../options/index.js\";\n\n// Their IDs change between versions, so always use `options.getControlMessageTypes()`\nexport enum ScrcpyControlMessageType {\n    InjectKeyCode,\n    InjectText,\n    InjectTouch,\n    InjectScroll,\n    BackOrScreenOn,\n    ExpandNotificationPanel,\n    ExpandSettingPanel,\n    CollapseNotificationPanel,\n    GetClipboard,\n    SetClipboard,\n    SetScreenPowerMode,\n    RotateDevice,\n}\n\n/**\n * Scrcpy control message types have different values between versions.\n *\n * This class provides a way to get the actual value for a given type.\n */\nexport class ScrcpyControlMessageTypeValue {\n    private types: readonly ScrcpyControlMessageType[];\n\n    public constructor(options: ScrcpyOptions<object>) {\n        this.types = options.controlMessageTypes;\n    }\n\n    public get(type: ScrcpyControlMessageType): number {\n        const value = this.types.indexOf(type);\n        if (value === -1) {\n            throw new Error(\"Not supported\");\n        }\n        return value;\n    }\n\n    public fillMessageType<T extends { type: ScrcpyControlMessageType }>(\n        message: Omit<T, \"type\">,\n        type: T[\"type\"]\n    ): T {\n        (message as T).type = this.get(type);\n        return message as T;\n    }\n}\n","import type { ScrcpyInjectTouchControlMessage } from \"./inject-touch.js\";\nimport { AndroidMotionEventAction } from \"./inject-touch.js\";\nimport { ScrcpyControlMessageType } from \"./type.js\";\n\n/**\n * On both Android and Windows, while both mouse and touch are supported input devices,\n * only one of them can be active at a time. Touch the screen with a finger will deactivate mouse,\n * and move the mouse will deactivate touch.\n *\n * On Android, this is achieved by dispatching a `MotionEvent.ACTION_UP` event for the previous input type.\n * But on Chrome, there is no such event, causing both mouse and touch to be active at the same time.\n * This can cause the new input to appear as \"ignored\".\n *\n * This helper class synthesis `ACTION_UP` events when a different pointer type appears,\n * so Scrcpy server can remove the previously hovering pointer.\n */\nexport class ScrcpyHoverHelper {\n    // AFAIK, only mouse and pen can have hover state\n    // and you can't have two mouses or pens.\n    // So remember the last hovering pointer is enough.\n    private lastHoverMessage: ScrcpyInjectTouchControlMessage | undefined;\n\n    public process(\n        message: Omit<ScrcpyInjectTouchControlMessage, \"type\">\n    ): ScrcpyInjectTouchControlMessage[] {\n        const result: ScrcpyInjectTouchControlMessage[] = [];\n\n        // A different pointer appeared,\n        // Cancel previously hovering pointer so Scrcpy server can free up the pointer ID.\n        if (\n            this.lastHoverMessage &&\n            this.lastHoverMessage.pointerId !== message.pointerId\n        ) {\n            // TODO: Inject MotionEvent.ACTION_HOVER_EXIT\n            // From testing, it seems no App cares about this event.\n            result.push({\n                ...this.lastHoverMessage,\n                action: AndroidMotionEventAction.Up,\n            });\n            this.lastHoverMessage = undefined;\n        }\n\n        if (message.action === AndroidMotionEventAction.HoverMove) {\n            // TODO: Inject MotionEvent.ACTION_HOVER_ENTER\n            this.lastHoverMessage = message as ScrcpyInjectTouchControlMessage;\n        }\n\n        (message as ScrcpyInjectTouchControlMessage).type =\n            ScrcpyControlMessageType.InjectTouch;\n        result.push(message as ScrcpyInjectTouchControlMessage);\n\n        return result;\n    }\n}\n","import Struct, { placeholder } from \"@yume-chan/struct\";\n\nexport enum AndroidKeyEventAction {\n    Down = 0,\n    Up = 1,\n}\n\n// https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/KeyEvent.java;l=993;drc=95c1165bb895dd844e1793460710f7163dd330a3\nexport enum AndroidKeyEventMeta {\n    AltOn = 0x02,\n    AltLeftOn = 0x10,\n    AltRightOn = 0x20,\n    ShiftOn = 0x01,\n    ShiftLeftOn = 0x40,\n    ShiftRightOn = 0x80,\n    CtrlOn = 0x1000,\n    CtrlLeftOn = 0x2000,\n    CtrlRightOn = 0x4000,\n    MetaOn = 0x10000,\n    MetaLeftOn = 0x20000,\n    MetaRightOn = 0x40000,\n    CapsLockOn = 0x100000,\n    NumLockOn = 0x200000,\n    ScrollLockOn = 0x400000,\n}\n\n// https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/KeyEvent.java;l=97;drc=95c1165bb895dd844e1793460710f7163dd330a3\n// Most names follow Web API `KeyboardEvent.code`,\n// Android-only (not exist in HID keyboard standard) keys are prefixed by `Android`.\nexport enum AndroidKeyCode {\n    AndroidHome = 3,\n    AndroidBack = 4,\n    AndroidCall,\n    AndroidEndCall,\n\n    Digit0,\n    Digit1,\n    Digit2,\n    Digit3,\n    Digit4,\n    Digit5,\n    Digit6,\n    Digit7,\n    Digit8,\n    Digit9,\n    /**\n     * '*' key.\n     */\n    Star, // Name not verified\n    /**\n     * '#' key.\n     */\n    Pound, // Name not verified\n\n    /**\n     * Directional Pad Up key.\n     */\n    ArrowUp,\n    /**\n     * Directional Pad Down key.\n     */\n    ArrowDown,\n    /**\n     * Directional Pad Left key.\n     */\n    ArrowLeft,\n    /**\n     * Directional Pad Right key.\n     */\n    ArrowRight,\n    /**\n     * Directional Pad Center key.\n     */\n    AndroidDPadCenter,\n\n    VolumeUp, // Name not verified\n    VolumeDown, // Name not verified\n    Power, // Name not verified\n    AndroidCamera,\n    Clear, // Name not verified\n\n    KeyA,\n    KeyB,\n    KeyC,\n    KeyD,\n    KeyE,\n    KeyF,\n    KeyG,\n    KeyH,\n    KeyI,\n    KeyJ,\n    KeyK,\n    KeyL,\n    KeyM,\n    KeyN,\n    KeyO,\n    KeyP,\n    KeyQ,\n    KeyR,\n    KeyS,\n    KeyT,\n    KeyU,\n    KeyV,\n    KeyW,\n    KeyX,\n    KeyY,\n    KeyZ,\n    Comma,\n    Period,\n    AltLeft,\n    AltRight,\n    ShiftLeft,\n    ShiftRight,\n    Tab,\n    Space,\n    AndroidSymbol,\n    AndroidExplorer,\n    AndroidEnvelope,\n    Enter,\n    Backspace,\n    Backquote,\n    Minus,\n    Equal,\n    BracketLeft,\n    BracketRight,\n    Backslash,\n    Semicolon,\n    Quote,\n    Slash,\n    At, // Name not verified\n\n    AndroidNum,\n    AndroidHeadsetHook,\n    /**\n     * Camera Focus key。\n     */\n    AndroidFocus,\n\n    Plus, // Name not verified\n    ContextMenu,\n    AndroidNotification,\n    AndroidSearch,\n\n    PageUp = 92,\n    PageDown,\n\n    Escape = 111,\n    Delete,\n    ControlLeft,\n    ControlRight,\n    CapsLock,\n    ScrollLock,\n    MetaLeft,\n    MetaRight,\n    AndroidFunction,\n    PrintScreen,\n    Pause,\n\n    Home,\n    End,\n    Insert,\n    AndroidForward,\n\n    F1 = 131,\n    F2,\n    F3,\n    F4,\n    F5,\n    F6,\n    F7,\n    F8,\n    F9,\n    F10,\n    F11,\n    F12,\n\n    NumLock,\n    Numpad0,\n    Numpad1,\n    Numpad2,\n    Numpad3,\n    Numpad4,\n    Numpad5,\n    Numpad6,\n    Numpad7,\n    Numpad8,\n    Numpad9,\n    NumpadDivide,\n    NumpadMultiply,\n    NumpadSubtract,\n    NumpadAdd,\n    NumpadDecimal,\n    NumpadComma, // Name not verified\n    NumpadEnter,\n    NumpadEquals, // Name not verified\n    NumpadLeftParen, // Name not verified\n    NumpadRightParen, // Name not verified\n\n    VolumeMute = 164, // Name not verified\n    AndroidAppSwitch = 187,\n\n    AndroidCut = 277,\n    AndroidCopy,\n    AndroidPaste,\n}\n\nexport const ScrcpyInjectKeyCodeControlMessage = new Struct()\n    .uint8(\"type\")\n    .uint8(\"action\", placeholder<AndroidKeyEventAction>())\n    .uint32(\"keyCode\")\n    .uint32(\"repeat\")\n    .uint32(\"metaState\");\n\nexport type ScrcpyInjectKeyCodeControlMessage =\n    (typeof ScrcpyInjectKeyCodeControlMessage)[\"TInit\"];\n","import Struct from \"@yume-chan/struct\";\n\nexport const ScrcpyInjectTextControlMessage = new Struct()\n    .uint8(\"type\")\n    .uint32(\"length\")\n    .string(\"text\", { lengthField: \"length\" });\n\nexport type ScrcpyInjectTextControlMessage =\n    (typeof ScrcpyInjectTextControlMessage)[\"TInit\"];\n","import { BasicControlMessage } from \"./basic.js\";\n\nexport const ScrcpyRotateDeviceControlMessage = BasicControlMessage;\n\nexport type ScrcpyRotateDeviceControlMessage =\n    (typeof ScrcpyRotateDeviceControlMessage)[\"TInit\"];\n","import Struct, { placeholder } from \"@yume-chan/struct\";\n\n// https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/SurfaceControl.java;l=659;drc=20303e05bf73796124ab70a279cf849b61b97905\nexport enum AndroidScreenPowerMode {\n    Off = 0,\n    Normal = 2,\n}\n\nexport const ScrcpySetScreenPowerModeControlMessage = new Struct()\n    .uint8(\"type\")\n    .uint8(\"mode\", placeholder<AndroidScreenPowerMode>());\n\nexport type ScrcpySetScreenPowerModeControlMessage =\n    (typeof ScrcpySetScreenPowerModeControlMessage)[\"TInit\"];\n","import type {\n    ScrcpyOptions,\n    ScrcpyScrollController,\n} from \"../options/index.js\";\n\nimport type { AndroidKeyEventAction } from \"./inject-keycode.js\";\nimport { ScrcpyInjectKeyCodeControlMessage } from \"./inject-keycode.js\";\nimport type { ScrcpyInjectScrollControlMessage } from \"./inject-scroll.js\";\nimport { ScrcpyInjectTextControlMessage } from \"./inject-text.js\";\nimport type { ScrcpyInjectTouchControlMessage } from \"./inject-touch.js\";\nimport { ScrcpyRotateDeviceControlMessage } from \"./rotate-device.js\";\nimport type { AndroidScreenPowerMode } from \"./set-screen-power-mode.js\";\nimport { ScrcpySetScreenPowerModeControlMessage } from \"./set-screen-power-mode.js\";\nimport {\n    ScrcpyControlMessageType,\n    ScrcpyControlMessageTypeValue,\n} from \"./type.js\";\n\nexport class ScrcpyControlMessageSerializer {\n    private _options: ScrcpyOptions<object>;\n    private _typeValues: ScrcpyControlMessageTypeValue;\n    private _scrollController: ScrcpyScrollController;\n\n    public constructor(options: ScrcpyOptions<object>) {\n        this._options = options;\n        this._typeValues = new ScrcpyControlMessageTypeValue(options);\n        this._scrollController = options.createScrollController();\n    }\n\n    public injectKeyCode(\n        message: Omit<ScrcpyInjectKeyCodeControlMessage, \"type\">\n    ) {\n        return ScrcpyInjectKeyCodeControlMessage.serialize(\n            this._typeValues.fillMessageType(\n                message,\n                ScrcpyControlMessageType.InjectKeyCode\n            )\n        );\n    }\n\n    public injectText(text: string) {\n        return ScrcpyInjectTextControlMessage.serialize({\n            text,\n            type: this._typeValues.get(ScrcpyControlMessageType.InjectText),\n        });\n    }\n\n    /**\n     * `pressure` is a float value between 0 and 1.\n     */\n    public injectTouch(message: Omit<ScrcpyInjectTouchControlMessage, \"type\">) {\n        return this._options.serializeInjectTouchControlMessage(\n            this._typeValues.fillMessageType(\n                message,\n                ScrcpyControlMessageType.InjectTouch\n            )\n        );\n    }\n\n    /**\n     * `scrollX` and `scrollY` are float values between 0 and 1.\n     */\n    public injectScroll(\n        message: Omit<ScrcpyInjectScrollControlMessage, \"type\">\n    ) {\n        return this._scrollController.serializeScrollMessage(\n            this._typeValues.fillMessageType(\n                message,\n                ScrcpyControlMessageType.InjectScroll\n            )\n        );\n    }\n\n    public backOrScreenOn(action: AndroidKeyEventAction) {\n        return this._options.serializeBackOrScreenOnControlMessage({\n            action,\n            type: this._typeValues.get(ScrcpyControlMessageType.BackOrScreenOn),\n        });\n    }\n\n    public setScreenPowerMode(mode: AndroidScreenPowerMode) {\n        return ScrcpySetScreenPowerModeControlMessage.serialize({\n            mode,\n            type: this._typeValues.get(\n                ScrcpyControlMessageType.SetScreenPowerMode\n            ),\n        });\n    }\n\n    public rotateDevice() {\n        return ScrcpyRotateDeviceControlMessage.serialize({\n            type: this._typeValues.get(ScrcpyControlMessageType.RotateDevice),\n        });\n    }\n}\n","import type {\n    Consumable,\n    WritableStreamDefaultWriter,\n} from \"@yume-chan/stream-extra\";\nimport { ConsumableWritableStream } from \"@yume-chan/stream-extra\";\n\nimport type { ScrcpyOptions } from \"../options/index.js\";\n\nimport type {\n    AndroidKeyEventAction,\n    ScrcpyInjectKeyCodeControlMessage,\n} from \"./inject-keycode.js\";\nimport type { ScrcpyInjectScrollControlMessage } from \"./inject-scroll.js\";\nimport type { ScrcpyInjectTouchControlMessage } from \"./inject-touch.js\";\nimport { ScrcpyControlMessageSerializer } from \"./serializer.js\";\nimport type { AndroidScreenPowerMode } from \"./set-screen-power-mode.js\";\n\nexport class ScrcpyControlMessageWriter {\n    private _writer: WritableStreamDefaultWriter<Consumable<Uint8Array>>;\n    private _serializer: ScrcpyControlMessageSerializer;\n\n    public constructor(\n        writer: WritableStreamDefaultWriter<Consumable<Uint8Array>>,\n        options: ScrcpyOptions<object>\n    ) {\n        this._writer = writer;\n        this._serializer = new ScrcpyControlMessageSerializer(options);\n    }\n\n    private async write(message: Uint8Array) {\n        return await ConsumableWritableStream.write(this._writer, message);\n    }\n\n    public injectKeyCode(\n        message: Omit<ScrcpyInjectKeyCodeControlMessage, \"type\">\n    ) {\n        return this.write(this._serializer.injectKeyCode(message));\n    }\n\n    public injectText(text: string) {\n        return this.write(this._serializer.injectText(text));\n    }\n\n    /**\n     * `pressure` is a float value between 0 and 1.\n     */\n    public injectTouch(message: Omit<ScrcpyInjectTouchControlMessage, \"type\">) {\n        return this.write(this._serializer.injectTouch(message));\n    }\n\n    /**\n     * `scrollX` and `scrollY` are float values between 0 and 1.\n     */\n    public async injectScroll(\n        message: Omit<ScrcpyInjectScrollControlMessage, \"type\">\n    ) {\n        const data = this._serializer.injectScroll(message);\n        if (data) {\n            await this.write(data);\n        }\n    }\n\n    public async backOrScreenOn(action: AndroidKeyEventAction) {\n        const data = this._serializer.backOrScreenOn(action);\n        if (data) {\n            await this.write(data);\n        }\n    }\n\n    public setScreenPowerMode(mode: AndroidScreenPowerMode) {\n        return this.write(this._serializer.setScreenPowerMode(mode));\n    }\n\n    public rotateDevice() {\n        return this.write(this._serializer.rotateDevice());\n    }\n\n    public releaseLock() {\n        this._writer.releaseLock();\n    }\n\n    public close() {\n        return this._writer.close();\n    }\n}\n","export * from \"./back-or-screen-on.js\";\nexport * from \"./basic.js\";\nexport * from \"./hover-helper.js\";\nexport * from \"./inject-keycode.js\";\nexport * from \"./inject-scroll.js\";\nexport * from \"./inject-text.js\";\nexport * from \"./inject-touch.js\";\nexport * from \"./rotate-device.js\";\nexport * from \"./serializer.js\";\nexport * from \"./set-clipboard.js\";\nexport * from \"./set-screen-power-mode.js\";\nexport * from \"./type.js\";\nexport * from \"./writer.js\";\n","// https://github.com/Genymobile/scrcpy/blob/41abe021e2a73efd4899b0efcd0b9eef9ec68c9b/server/src/main/java/com/genymobile/scrcpy/DeviceMessage.java#L5\nexport enum ScrcpyDeviceMessageType {\n    Clipboard,\n    AckClipboard,\n}\n","import Struct from \"@yume-chan/struct\";\n\nimport { ScrcpyDeviceMessageType } from \"./type.js\";\n\nexport const ScrcpyAckClipboardDeviceMessage = new Struct()\n    .uint64(\"sequence\")\n    .extra({ type: ScrcpyDeviceMessageType.AckClipboard as const });\n\nexport type ScrcpyAckClipboardDeviceMessage =\n    (typeof ScrcpyAckClipboardDeviceMessage)[\"TDeserializeResult\"];\n","import Struct from \"@yume-chan/struct\";\n\nimport { ScrcpyDeviceMessageType } from \"./type.js\";\n\nexport const ScrcpyClipboardDeviceMessage = new Struct()\n    .uint32(\"length\")\n    .string(\"content\", { lengthField: \"length\" })\n    .extra({ type: ScrcpyDeviceMessageType.Clipboard as const });\n\nexport type ScrcpyClipboardDeviceMessage =\n    (typeof ScrcpyClipboardDeviceMessage)[\"TDeserializeResult\"];\n","import { BufferedTransformStream } from \"@yume-chan/stream-extra\";\n\nimport { ScrcpyAckClipboardDeviceMessage } from \"./ack-clipboard.js\";\nimport { ScrcpyClipboardDeviceMessage } from \"./clipboard.js\";\nimport { ScrcpyDeviceMessageType } from \"./type.js\";\n\nexport type ScrcpyDeviceMessage =\n    | ScrcpyClipboardDeviceMessage\n    | ScrcpyAckClipboardDeviceMessage;\n\nexport class ScrcpyDeviceMessageDeserializeStream extends BufferedTransformStream<ScrcpyDeviceMessage> {\n    constructor() {\n        super(async (stream) => {\n            const type = await stream.readExactly(1);\n            switch (type[0]) {\n                case ScrcpyDeviceMessageType.Clipboard:\n                    return await ScrcpyClipboardDeviceMessage.deserialize(\n                        stream\n                    );\n                case ScrcpyDeviceMessageType.AckClipboard:\n                    return await ScrcpyAckClipboardDeviceMessage.deserialize(\n                        stream\n                    );\n                default:\n                    throw new Error(\"Unsupported control message type\");\n            }\n        });\n    }\n}\n","export * from \"./ack-clipboard.js\";\nexport * from \"./clipboard.js\";\nexport * from \"./stream.js\";\nexport * from \"./type.js\";\n","import type { ScrcpyOptionValue } from \"../types.js\";\n\n/**\n * If the option you need is not in this type,\n * please file an issue on GitHub.\n */\nexport interface CodecOptionsInit {\n    profile: number;\n    level: number;\n\n    iFrameInterval: number;\n    maxBframes: number;\n    repeatPreviousFrameAfter: number;\n    maxPtsGapToEncoder: number;\n    intraRefreshPeriod: number;\n}\n\nfunction toDashCase(input: string) {\n    return input.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n}\n\nconst CODEC_OPTION_TYPES: Partial<\n    Record<keyof CodecOptionsInit, \"long\" | \"float\" | \"string\">\n> = {\n    repeatPreviousFrameAfter: \"long\",\n    maxPtsGapToEncoder: \"long\",\n};\n\nexport class CodecOptions implements ScrcpyOptionValue {\n    public value: Partial<CodecOptionsInit>;\n\n    public constructor(value: Partial<CodecOptionsInit> = {}) {\n        this.value = value;\n    }\n\n    public toOptionValue(): string | undefined {\n        const entries = Object.entries(this.value).filter(\n            ([, value]) => value !== undefined\n        );\n\n        if (entries.length === 0) {\n            return undefined;\n        }\n\n        return entries\n            .map(([key, value]) => {\n                const type = CODEC_OPTION_TYPES[key as keyof CodecOptionsInit];\n                return `${toDashCase(key)}${type ? `:${type}` : \"\"}=${value}`;\n            })\n            .join(\",\");\n    }\n}\n","import { NumberFieldDefinition, NumberFieldType } from \"@yume-chan/struct\";\n\nexport function clamp(value: number, min: number, max: number): number {\n    if (value < min) {\n        return min;\n    }\n\n    if (value > max) {\n        return max;\n    }\n\n    return value;\n}\n\nexport const ScrcpyFloatToUint16NumberType: NumberFieldType = {\n    size: 2,\n    signed: false,\n    deserialize(array, littleEndian) {\n        const value = NumberFieldType.Uint16.deserialize(array, littleEndian);\n        // https://github.com/Genymobile/scrcpy/blob/1f138aef41de651668043b32c4effc2d4adbfc44/server/src/main/java/com/genymobile/scrcpy/Binary.java#L22\n        return value === 0xffff ? 1 : value / 0x10000;\n    },\n    serialize(dataView, offset, value, littleEndian) {\n        // https://github.com/Genymobile/scrcpy/blob/1f138aef41de651668043b32c4effc2d4adbfc44/app/src/util/binary.h#L51\n        value = clamp(value, -1, 1);\n        value = value === 1 ? 0xffff : value * 0x10000;\n        NumberFieldType.Uint16.serialize(dataView, offset, value, littleEndian);\n    },\n};\n\nexport const ScrcpyFloatToUint16FieldDefinition = new NumberFieldDefinition(\n    ScrcpyFloatToUint16NumberType\n);\n","import type { CodecOptions } from \"./codec-options.js\";\n\nexport enum ScrcpyLogLevel1_16 {\n    Debug = \"debug\",\n    Info = \"info\",\n    Warn = \"warn\",\n    Error = \"error\",\n}\n\nexport enum ScrcpyVideoOrientation1_16 {\n    Unlocked = -1,\n    Portrait = 0,\n    Landscape = 1,\n    PortraitFlipped = 2,\n    LandscapeFlipped = 3,\n}\n\nexport interface ScrcpyOptionsInit1_16 {\n    logLevel?: ScrcpyLogLevel1_16;\n\n    /**\n     * The maximum value of both width and height.\n     */\n    maxSize?: number;\n\n    bitRate?: number;\n\n    /**\n     * 0 for unlimited.\n     *\n     * @default 0\n     */\n    maxFps?: number;\n\n    /**\n     * The orientation of the video stream.\n     *\n     * It will not keep the device screen in specific orientation,\n     * only the captured video will in this orientation.\n     */\n    lockVideoOrientation?: ScrcpyVideoOrientation1_16;\n\n    /**\n     * Use ADB forward tunnel instead of reverse tunnel.\n     *\n     * This option is mainly used for working around the bug that on Android <9,\n     * ADB daemon can't create reverse tunnels if connected wirelessly (ADB over WiFi).\n     *\n     * When using `AdbScrcpyClient`, it can detect this situation and enable this option automatically.\n     */\n    tunnelForward?: boolean;\n\n    crop?: string | undefined;\n\n    /**\n     * Send PTS so that the client may record properly\n     *\n     * Note: When `sendFrameMeta: false` is specified,\n     * the video stream will not contain `configuration` typed packets,\n     * which means it can't be decoded by the companion decoders.\n     * It's still possible to record the stream into a file,\n     * or to decode it with a more tolerant decoder like FFMpeg.\n     *\n     * @default true\n     */\n    sendFrameMeta?: boolean;\n\n    /**\n     * @default true\n     */\n    control?: boolean;\n\n    displayId?: number;\n\n    showTouches?: boolean;\n\n    stayAwake?: boolean;\n\n    codecOptions?: CodecOptions;\n}\n","import Struct, { placeholder } from \"@yume-chan/struct\";\n\nimport type { AndroidMotionEventAction } from \"../../control/index.js\";\nimport {\n    BasicControlMessage,\n    ScrcpyControlMessageType,\n} from \"../../control/index.js\";\n\nimport { ScrcpyFloatToUint16FieldDefinition } from \"./float-to-uint16.js\";\n\nexport const SCRCPY_CONTROL_MESSAGE_TYPES_1_16: readonly ScrcpyControlMessageType[] =\n    [\n        /*  0 */ ScrcpyControlMessageType.InjectKeyCode,\n        /*  1 */ ScrcpyControlMessageType.InjectText,\n        /*  2 */ ScrcpyControlMessageType.InjectTouch,\n        /*  3 */ ScrcpyControlMessageType.InjectScroll,\n        /*  4 */ ScrcpyControlMessageType.BackOrScreenOn,\n        /*  5 */ ScrcpyControlMessageType.ExpandNotificationPanel,\n        /*  6 */ ScrcpyControlMessageType.CollapseNotificationPanel,\n        /*  7 */ ScrcpyControlMessageType.GetClipboard,\n        /*  8 */ ScrcpyControlMessageType.SetClipboard,\n        /*  9 */ ScrcpyControlMessageType.SetScreenPowerMode,\n        /* 10 */ ScrcpyControlMessageType.RotateDevice,\n    ];\n\nexport const ScrcpyMediaStreamRawPacket = new Struct()\n    .uint64(\"pts\")\n    .uint32(\"size\")\n    .uint8Array(\"data\", { lengthField: \"size\" });\n\nexport const SCRCPY_MEDIA_PACKET_FLAG_CONFIG = 1n << 63n;\n\nexport const ScrcpyInjectTouchControlMessage1_16 = new Struct()\n    .uint8(\"type\")\n    .uint8(\"action\", placeholder<AndroidMotionEventAction>())\n    .uint64(\"pointerId\")\n    .uint32(\"pointerX\")\n    .uint32(\"pointerY\")\n    .uint16(\"screenWidth\")\n    .uint16(\"screenHeight\")\n    .field(\"pressure\", ScrcpyFloatToUint16FieldDefinition)\n    .uint32(\"buttons\");\n\nexport type ScrcpyInjectTouchControlMessage1_16 =\n    (typeof ScrcpyInjectTouchControlMessage1_16)[\"TInit\"];\n\nexport const ScrcpyBackOrScreenOnControlMessage1_16 = BasicControlMessage;\n\nexport const ScrcpySetClipboardControlMessage1_15 = new Struct()\n    .uint8(\"type\")\n    .uint32(\"length\")\n    .string(\"content\", { lengthField: \"length\" });\n\nexport type ScrcpySetClipboardControlMessage1_15 =\n    (typeof ScrcpySetClipboardControlMessage1_15)[\"TInit\"];\n","import type { ReadableStream } from \"@yume-chan/stream-extra\";\n\nimport type { ScrcpyOptionValue } from \"./types.js\";\n\nexport enum ScrcpyVideoCodecId {\n    H264 = 0x68_32_36_34,\n    H265 = 0x68_32_36_35,\n    AV1 = 0x00_61_76_31,\n}\n\nexport interface ScrcpyVideoStreamMetadata {\n    deviceName?: string | undefined;\n    width?: number | undefined;\n    height?: number | undefined;\n    codec: ScrcpyVideoCodecId;\n}\n\nexport interface ScrcpyVideoStream {\n    readonly stream: ReadableStream<Uint8Array>;\n    readonly metadata: ScrcpyVideoStreamMetadata;\n}\n\nexport class ScrcpyAudioCodec implements ScrcpyOptionValue {\n    public static readonly OPUS = new ScrcpyAudioCodec(\n        \"opus\",\n        0x6f_70_75_73,\n        \"audio/opus\",\n        \"opus\"\n    );\n    public static readonly AAC = new ScrcpyAudioCodec(\n        \"aac\",\n        0x00_61_61_63,\n        \"audio/aac\",\n        \"mp4a.66\"\n    );\n    public static readonly RAW = new ScrcpyAudioCodec(\n        \"raw\",\n        0x00_72_61_77,\n        \"audio/raw\",\n        \"1\"\n    );\n\n    public readonly optionValue: string;\n    public readonly metadataValue: number;\n    public readonly mimeType: string;\n    public readonly webCodecId: string;\n\n    public constructor(\n        optionValue: string,\n        metadataValue: number,\n        mimeType: string,\n        webCodecId: string\n    ) {\n        this.optionValue = optionValue;\n        this.metadataValue = metadataValue;\n        this.mimeType = mimeType;\n        this.webCodecId = webCodecId;\n    }\n\n    public toOptionValue(): string {\n        return this.optionValue;\n    }\n}\n\nexport interface ScrcpyAudioStreamDisabledMetadata {\n    readonly type: \"disabled\";\n}\n\nexport interface ScrcpyAudioStreamErroredMetadata {\n    readonly type: \"errored\";\n}\n\nexport interface ScrcpyAudioStreamSuccessMetadata {\n    readonly type: \"success\";\n    readonly codec: ScrcpyAudioCodec;\n    readonly stream: ReadableStream<Uint8Array>;\n}\n\nexport type ScrcpyAudioStreamMetadata =\n    | ScrcpyAudioStreamDisabledMetadata\n    | ScrcpyAudioStreamErroredMetadata\n    | ScrcpyAudioStreamSuccessMetadata;\n\nexport interface ScrcpyMediaStreamConfigurationPacket {\n    type: \"configuration\";\n    data: Uint8Array;\n}\n\nexport interface ScrcpyMediaStreamDataPacket {\n    type: \"data\";\n    keyframe?: boolean;\n    pts?: bigint;\n    data: Uint8Array;\n}\n\nexport type ScrcpyMediaStreamPacket =\n    | ScrcpyMediaStreamConfigurationPacket\n    | ScrcpyMediaStreamDataPacket;\n","import type { ReadableStream, TransformStream } from \"@yume-chan/stream-extra\";\nimport type { ValueOrPromise } from \"@yume-chan/struct\";\n\nimport type {\n    ScrcpyBackOrScreenOnControlMessage,\n    ScrcpyControlMessageType,\n    ScrcpyInjectTouchControlMessage,\n    ScrcpySetClipboardControlMessage,\n} from \"../control/index.js\";\n\nimport type { ScrcpyScrollController } from \"./1_16/scroll.js\";\nimport type {\n    ScrcpyAudioStreamMetadata,\n    ScrcpyMediaStreamPacket,\n    ScrcpyVideoStream,\n} from \"./codec.js\";\n\nexport const DEFAULT_SERVER_PATH = \"/data/local/tmp/scrcpy-server.jar\";\n\nexport interface ScrcpyOptionValue {\n    toOptionValue(): string | undefined;\n}\n\nexport function isScrcpyOptionValue(\n    value: unknown\n): value is ScrcpyOptionValue {\n    return (\n        typeof value === \"object\" &&\n        value !== null &&\n        \"toOptionValue\" in value &&\n        typeof value.toOptionValue === \"function\"\n    );\n}\n\nexport function toScrcpyOptionValue<T>(value: unknown, empty: T): string | T {\n    if (isScrcpyOptionValue(value)) {\n        value = value.toOptionValue();\n    }\n\n    // `value` may become `undefined` after `toOptionValue`\n    if (value === undefined) {\n        return empty;\n    }\n\n    return String(value);\n}\n\nexport interface ScrcpyEncoder {\n    type: \"video\" | \"audio\";\n    codec?: string;\n    name: string;\n}\n\nexport interface ScrcpyDisplay {\n    id: number;\n    resolution?: string;\n}\n\nexport interface ScrcpyOptions<T extends object> {\n    readonly defaults: Required<T>;\n\n    readonly controlMessageTypes: readonly ScrcpyControlMessageType[];\n\n    readonly value: Required<T>;\n\n    serialize(): string[];\n\n    /**\n     * Set the essential options to let Scrcpy server print out available encoders.\n     */\n    setListEncoders(): void;\n\n    /**\n     * Set the essential options to let Scrcpy server print out available displays.\n     */\n    setListDisplays(): void;\n\n    /**\n     * Parse encoder information from Scrcpy server output\n     * @param line One line of Scrcpy server output\n     */\n    parseEncoder(line: string): ScrcpyEncoder | undefined;\n\n    /**\n     * Parse display information from Scrcpy server output\n     * @param line One line of Scrcpy server output\n     */\n    parseDisplay(line: string): ScrcpyDisplay | undefined;\n\n    /**\n     * Parse the device metadata from video stream according to the current version and options.\n     * @param stream The video stream.\n     * @returns\n     * A tuple of the video stream and the metadata.\n     *\n     * The returned video stream may be different from the input stream, and should be used for further processing.\n     */\n    parseVideoStreamMetadata(\n        stream: ReadableStream<Uint8Array>\n    ): ValueOrPromise<ScrcpyVideoStream>;\n\n    parseAudioStreamMetadata(\n        stream: ReadableStream<Uint8Array>\n    ): ValueOrPromise<ScrcpyAudioStreamMetadata>;\n\n    createMediaStreamTransformer(): TransformStream<\n        Uint8Array,\n        ScrcpyMediaStreamPacket\n    >;\n\n    serializeInjectTouchControlMessage(\n        message: ScrcpyInjectTouchControlMessage\n    ): Uint8Array;\n\n    serializeBackOrScreenOnControlMessage(\n        message: ScrcpyBackOrScreenOnControlMessage\n    ): Uint8Array | undefined;\n\n    serializeSetClipboardControlMessage(\n        message: ScrcpySetClipboardControlMessage\n    ): Uint8Array;\n\n    createScrollController(): ScrcpyScrollController;\n}\n\nexport abstract class ScrcpyOptionsBase<\n    T extends object,\n    B extends ScrcpyOptions<object>\n> implements ScrcpyOptions<T>\n{\n    protected _base: B;\n\n    public abstract get defaults(): Required<T>;\n\n    public get controlMessageTypes(): readonly ScrcpyControlMessageType[] {\n        return this._base.controlMessageTypes;\n    }\n\n    public readonly value: Required<T>;\n\n    public constructor(base: B, value: Required<T>) {\n        this._base = base;\n        this.value = value;\n    }\n\n    public abstract serialize(): string[];\n\n    public setListEncoders(): void {\n        this._base.setListEncoders();\n    }\n\n    public setListDisplays(): void {\n        this._base.setListDisplays();\n    }\n\n    public parseEncoder(line: string): ScrcpyEncoder | undefined {\n        return this._base.parseEncoder(line);\n    }\n\n    public parseDisplay(line: string): ScrcpyDisplay | undefined {\n        return this._base.parseDisplay(line);\n    }\n\n    /**\n     * Parse the device metadata from video stream according to the current version and options.\n     * @param stream The video stream.\n     * @returns\n     * A tuple of the video stream and the metadata.\n     *\n     * The returned video stream may be different from the input stream, and should be used for further processing.\n     */\n    public parseVideoStreamMetadata(\n        stream: ReadableStream<Uint8Array>\n    ): ValueOrPromise<ScrcpyVideoStream> {\n        return this._base.parseVideoStreamMetadata(stream);\n    }\n\n    public parseAudioStreamMetadata(\n        stream: ReadableStream<Uint8Array>\n    ): ValueOrPromise<ScrcpyAudioStreamMetadata> {\n        return this._base.parseAudioStreamMetadata(stream);\n    }\n\n    public createMediaStreamTransformer(): TransformStream<\n        Uint8Array,\n        ScrcpyMediaStreamPacket\n    > {\n        return this._base.createMediaStreamTransformer();\n    }\n\n    public serializeInjectTouchControlMessage(\n        message: ScrcpyInjectTouchControlMessage\n    ): Uint8Array {\n        return this._base.serializeInjectTouchControlMessage(message);\n    }\n\n    public serializeBackOrScreenOnControlMessage(\n        message: ScrcpyBackOrScreenOnControlMessage\n    ): Uint8Array | undefined {\n        return this._base.serializeBackOrScreenOnControlMessage(message);\n    }\n\n    public serializeSetClipboardControlMessage(\n        message: ScrcpySetClipboardControlMessage\n    ): Uint8Array {\n        return this._base.serializeSetClipboardControlMessage(message);\n    }\n\n    public createScrollController(): ScrcpyScrollController {\n        return this._base.createScrollController();\n    }\n}\n","import Struct from \"@yume-chan/struct\";\n\nimport type { ScrcpyInjectScrollControlMessage } from \"../../control/index.js\";\n\nexport interface ScrcpyScrollController {\n    serializeScrollMessage(\n        message: ScrcpyInjectScrollControlMessage\n    ): Uint8Array | undefined;\n}\n\nexport const ScrcpyInjectScrollControlMessage1_16 = new Struct()\n    .uint8(\"type\")\n    .uint32(\"pointerX\")\n    .uint32(\"pointerY\")\n    .uint16(\"screenWidth\")\n    .uint16(\"screenHeight\")\n    .int32(\"scrollX\")\n    .int32(\"scrollY\");\n\n/**\n * Old version of Scrcpy server only supports integer values for scroll.\n *\n * Accumulate scroll values and send scroll message when accumulated value\n * reaches 1 or -1.\n */\nexport class ScrcpyScrollController1_16 implements ScrcpyScrollController {\n    private accumulatedX = 0;\n    private accumulatedY = 0;\n\n    protected processMessage(\n        message: ScrcpyInjectScrollControlMessage\n    ): ScrcpyInjectScrollControlMessage | undefined {\n        this.accumulatedX += message.scrollX;\n        this.accumulatedY += message.scrollY;\n\n        let scrollX = 0;\n        let scrollY = 0;\n        if (this.accumulatedX >= 1) {\n            scrollX = 1;\n            this.accumulatedX = 0;\n        } else if (this.accumulatedX <= -1) {\n            scrollX = -1;\n            this.accumulatedX = 0;\n        }\n\n        if (this.accumulatedY >= 1) {\n            scrollY = 1;\n            this.accumulatedY = 0;\n        } else if (this.accumulatedY <= -1) {\n            scrollY = -1;\n            this.accumulatedY = 0;\n        }\n\n        if (scrollX === 0 && scrollY === 0) {\n            return undefined;\n        }\n\n        message.scrollX = scrollX;\n        message.scrollY = scrollY;\n        return message;\n    }\n\n    public serializeScrollMessage(\n        message: ScrcpyInjectScrollControlMessage\n    ): Uint8Array | undefined {\n        const processed = this.processMessage(message);\n        if (!processed) {\n            return undefined;\n        }\n\n        return ScrcpyInjectScrollControlMessage1_16.serialize(processed);\n    }\n}\n","import type { ReadableStream } from \"@yume-chan/stream-extra\";\nimport {\n    BufferedReadableStream,\n    StructDeserializeStream,\n    TransformStream,\n} from \"@yume-chan/stream-extra\";\nimport type { AsyncExactReadable, ValueOrPromise } from \"@yume-chan/struct\";\nimport { NumberFieldType, decodeUtf8 } from \"@yume-chan/struct\";\n\nimport type {\n    ScrcpyBackOrScreenOnControlMessage,\n    ScrcpyControlMessageType,\n    ScrcpyInjectTouchControlMessage,\n    ScrcpySetClipboardControlMessage,\n} from \"../../control/index.js\";\nimport { AndroidKeyEventAction } from \"../../control/index.js\";\nimport type {\n    ScrcpyMediaStreamPacket,\n    ScrcpyVideoStream,\n    ScrcpyVideoStreamMetadata,\n} from \"../codec.js\";\nimport { ScrcpyVideoCodecId } from \"../codec.js\";\nimport type { ScrcpyDisplay, ScrcpyEncoder, ScrcpyOptions } from \"../types.js\";\nimport { toScrcpyOptionValue } from \"../types.js\";\n\nimport { CodecOptions } from \"./codec-options.js\";\nimport type { ScrcpyOptionsInit1_16 } from \"./init.js\";\nimport { ScrcpyLogLevel1_16, ScrcpyVideoOrientation1_16 } from \"./init.js\";\nimport {\n    SCRCPY_CONTROL_MESSAGE_TYPES_1_16,\n    SCRCPY_MEDIA_PACKET_FLAG_CONFIG,\n    ScrcpyBackOrScreenOnControlMessage1_16,\n    ScrcpyInjectTouchControlMessage1_16,\n    ScrcpyMediaStreamRawPacket,\n    ScrcpySetClipboardControlMessage1_15,\n} from \"./message.js\";\nimport type { ScrcpyScrollController } from \"./scroll.js\";\nimport { ScrcpyScrollController1_16 } from \"./scroll.js\";\n\nexport class ScrcpyOptions1_16 implements ScrcpyOptions<ScrcpyOptionsInit1_16> {\n    public static readonly DEFAULTS = {\n        logLevel: ScrcpyLogLevel1_16.Debug,\n        maxSize: 0,\n        bitRate: 8_000_000,\n        maxFps: 0,\n        lockVideoOrientation: ScrcpyVideoOrientation1_16.Unlocked,\n        tunnelForward: false,\n        crop: undefined,\n        sendFrameMeta: true,\n        control: true,\n        displayId: 0,\n        showTouches: false,\n        stayAwake: false,\n        codecOptions: new CodecOptions(),\n    } as const satisfies Required<ScrcpyOptionsInit1_16>;\n\n    public static readonly SERIALIZE_ORDER = [\n        \"logLevel\",\n        \"maxSize\",\n        \"bitRate\",\n        \"maxFps\",\n        \"lockVideoOrientation\",\n        \"tunnelForward\",\n        \"crop\",\n        \"sendFrameMeta\",\n        \"control\",\n        \"displayId\",\n        \"showTouches\",\n        \"stayAwake\",\n        \"codecOptions\",\n    ] as const satisfies readonly (keyof ScrcpyOptionsInit1_16)[];\n\n    public static serialize<T>(options: T, order: readonly (keyof T)[]) {\n        return order.map((key) => toScrcpyOptionValue(options[key], \"-\"));\n    }\n\n    public static async parseCString(\n        stream: AsyncExactReadable,\n        maxLength: number\n    ): Promise<string> {\n        let result = decodeUtf8(await stream.readExactly(maxLength));\n        result = result.substring(0, result.indexOf(\"\\0\"));\n        return result;\n    }\n\n    public static async parseUint16BE(\n        stream: AsyncExactReadable\n    ): Promise<number> {\n        const buffer = await stream.readExactly(NumberFieldType.Uint16.size);\n        return NumberFieldType.Uint16.deserialize(buffer, false);\n    }\n\n    public static async parseUint32BE(\n        stream: AsyncExactReadable\n    ): Promise<number> {\n        const buffer = await stream.readExactly(NumberFieldType.Uint32.size);\n        return NumberFieldType.Uint32.deserialize(buffer, false);\n    }\n\n    public value: Required<ScrcpyOptionsInit1_16>;\n\n    public readonly defaults: Required<ScrcpyOptionsInit1_16> =\n        ScrcpyOptions1_16.DEFAULTS;\n\n    public readonly controlMessageTypes: readonly ScrcpyControlMessageType[] =\n        SCRCPY_CONTROL_MESSAGE_TYPES_1_16;\n\n    public constructor(init: ScrcpyOptionsInit1_16) {\n        this.value = { ...ScrcpyOptions1_16.DEFAULTS, ...init };\n    }\n\n    public serialize(): string[] {\n        return ScrcpyOptions1_16.serialize(\n            this.value,\n            ScrcpyOptions1_16.SERIALIZE_ORDER\n        );\n    }\n\n    public setListEncoders(): void {\n        throw new Error(\"Not supported\");\n    }\n\n    public setListDisplays(): void {\n        // Set to an invalid value\n        // Server will print valid values before crashing\n        // (server will crash before opening sockets)\n        this.value.displayId = -1;\n    }\n\n    public parseEncoder(): ScrcpyEncoder | undefined {\n        throw new Error(\"Not supported\");\n    }\n\n    public parseDisplay(line: string): ScrcpyDisplay | undefined {\n        const displayIdRegex = /\\s+scrcpy --display (\\d+)/;\n        const match = line.match(displayIdRegex);\n        if (match) {\n            return {\n                id: Number.parseInt(match[1]!, 10),\n            };\n        }\n        return undefined;\n    }\n\n    public parseVideoStreamMetadata(\n        stream: ReadableStream<Uint8Array>\n    ): ValueOrPromise<ScrcpyVideoStream> {\n        return (async () => {\n            const buffered = new BufferedReadableStream(stream);\n            const metadata: ScrcpyVideoStreamMetadata = {\n                codec: ScrcpyVideoCodecId.H264,\n            };\n            metadata.deviceName = await ScrcpyOptions1_16.parseCString(\n                buffered,\n                64\n            );\n            metadata.width = await ScrcpyOptions1_16.parseUint16BE(buffered);\n            metadata.height = await ScrcpyOptions1_16.parseUint16BE(buffered);\n            return { stream: buffered.release(), metadata };\n        })();\n    }\n\n    public parseAudioStreamMetadata(): never {\n        throw new Error(\"Not supported\");\n    }\n\n    public createMediaStreamTransformer(): TransformStream<\n        Uint8Array,\n        ScrcpyMediaStreamPacket\n    > {\n        // Optimized path for video frames only\n        if (!this.value.sendFrameMeta) {\n            return new TransformStream({\n                transform(chunk, controller) {\n                    controller.enqueue({\n                        type: \"data\",\n                        data: chunk,\n                    });\n                },\n            });\n        }\n\n        const deserializeStream = new StructDeserializeStream(\n            ScrcpyMediaStreamRawPacket\n        );\n        return {\n            writable: deserializeStream.writable,\n            readable: deserializeStream.readable.pipeThrough(\n                new TransformStream({\n                    transform(packet, controller) {\n                        if (packet.pts === SCRCPY_MEDIA_PACKET_FLAG_CONFIG) {\n                            controller.enqueue({\n                                type: \"configuration\",\n                                data: packet.data,\n                            });\n                            return;\n                        }\n\n                        controller.enqueue({\n                            type: \"data\",\n                            pts: packet.pts,\n                            data: packet.data,\n                        });\n                    },\n                })\n            ),\n        };\n    }\n\n    public serializeInjectTouchControlMessage(\n        message: ScrcpyInjectTouchControlMessage\n    ): Uint8Array {\n        return ScrcpyInjectTouchControlMessage1_16.serialize(message);\n    }\n\n    public serializeBackOrScreenOnControlMessage(\n        message: ScrcpyBackOrScreenOnControlMessage\n    ) {\n        if (message.action === AndroidKeyEventAction.Down) {\n            return ScrcpyBackOrScreenOnControlMessage1_16.serialize(message);\n        }\n\n        return undefined;\n    }\n\n    public serializeSetClipboardControlMessage(\n        message: ScrcpySetClipboardControlMessage\n    ): Uint8Array {\n        return ScrcpySetClipboardControlMessage1_15.serialize(message);\n    }\n\n    public createScrollController(): ScrcpyScrollController {\n        return new ScrcpyScrollController1_16();\n    }\n}\n","export * from \"./codec-options.js\";\nexport * from \"./float-to-uint16.js\";\nexport * from \"./init.js\";\nexport * from \"./message.js\";\nexport * from \"./options.js\";\nexport * from \"./scroll.js\";\n","import type { ScrcpyOptionsInit1_16 } from \"./1_16/index.js\";\nimport { ScrcpyOptions1_16 } from \"./1_16/index.js\";\nimport type { ScrcpyEncoder } from \"./types.js\";\nimport { ScrcpyOptionsBase } from \"./types.js\";\n\nexport interface ScrcpyOptionsInit1_17 extends ScrcpyOptionsInit1_16 {\n    encoderName?: string | undefined;\n}\n\nexport class ScrcpyOptions1_17 extends ScrcpyOptionsBase<\n    ScrcpyOptionsInit1_17,\n    ScrcpyOptions1_16\n> {\n    public static readonly DEFAULTS = {\n        ...ScrcpyOptions1_16.DEFAULTS,\n        encoderName: undefined,\n    } as const satisfies Required<ScrcpyOptionsInit1_17>;\n\n    public static readonly SERIALIZE_ORDER = [\n        ...ScrcpyOptions1_16.SERIALIZE_ORDER,\n        \"encoderName\",\n    ] as const satisfies readonly (keyof ScrcpyOptionsInit1_17)[];\n\n    public static parseEncoder(\n        line: string,\n        encoderNameRegex: RegExp\n    ): ScrcpyEncoder | undefined {\n        const match = line.match(encoderNameRegex);\n        if (match) {\n            return { type: \"video\", name: match[1]! };\n        }\n        return undefined;\n    }\n\n    public override get defaults(): Required<ScrcpyOptionsInit1_17> {\n        return ScrcpyOptions1_17.DEFAULTS;\n    }\n\n    public constructor(init: ScrcpyOptionsInit1_17) {\n        super(new ScrcpyOptions1_16(init), {\n            ...ScrcpyOptions1_17.DEFAULTS,\n            ...init,\n        });\n    }\n\n    public override serialize(): string[] {\n        return ScrcpyOptions1_16.serialize(\n            this.value,\n            ScrcpyOptions1_17.SERIALIZE_ORDER\n        );\n    }\n\n    public override setListEncoders() {\n        // Set to an invalid value\n        // Server will print valid values before crashing\n        // (server will crash after opening video and control sockets)\n        this.value.encoderName = \"_\";\n    }\n\n    public override parseEncoder(line: string): ScrcpyEncoder | undefined {\n        return ScrcpyOptions1_17.parseEncoder(\n            line,\n            /\\s+scrcpy --encoder-name '(.*?)'/\n        );\n    }\n}\n","import Struct, { placeholder } from \"@yume-chan/struct\";\n\nimport type {\n    AndroidKeyEventAction,\n    ScrcpyBackOrScreenOnControlMessage,\n} from \"../control/index.js\";\nimport { ScrcpyControlMessageType } from \"../control/index.js\";\n\nimport {\n    SCRCPY_CONTROL_MESSAGE_TYPES_1_16,\n    ScrcpyBackOrScreenOnControlMessage1_16,\n    ScrcpyLogLevel1_16,\n    ScrcpyOptions1_16,\n    ScrcpyVideoOrientation1_16,\n} from \"./1_16/index.js\";\nimport type { ScrcpyOptionsInit1_17 } from \"./1_17.js\";\nimport { ScrcpyOptions1_17 } from \"./1_17.js\";\nimport type { ScrcpyEncoder } from \"./types.js\";\nimport { ScrcpyOptionsBase } from \"./types.js\";\n\nexport enum ScrcpyLogLevel1_18 {\n    Verbose = \"verbose\",\n    Debug = \"debug\",\n    Info = \"info\",\n    Warn = \"warn\",\n    Error = \"error\",\n}\n\nexport enum ScrcpyVideoOrientation1_18 {\n    Initial = -2,\n    Unlocked = -1,\n    Portrait = 0,\n    Landscape = 1,\n    PortraitFlipped = 2,\n    LandscapeFlipped = 3,\n}\n\nexport interface ScrcpyOptionsInit1_18\n    extends Omit<ScrcpyOptionsInit1_17, \"logLevel\" | \"lockVideoOrientation\"> {\n    logLevel?: ScrcpyLogLevel1_18;\n\n    lockVideoOrientation?: ScrcpyVideoOrientation1_18;\n\n    powerOffOnClose?: boolean;\n}\n\nexport const ScrcpyBackOrScreenOnControlMessage1_18 = new Struct()\n    .fields(ScrcpyBackOrScreenOnControlMessage1_16)\n    .uint8(\"action\", placeholder<AndroidKeyEventAction>());\n\nexport type ScrcpyBackOrScreenOnControlMessage1_18 =\n    (typeof ScrcpyBackOrScreenOnControlMessage1_18)[\"TInit\"];\n\nexport const SCRCPY_CONTROL_MESSAGE_TYPES_1_18 =\n    SCRCPY_CONTROL_MESSAGE_TYPES_1_16.slice();\nSCRCPY_CONTROL_MESSAGE_TYPES_1_18.splice(\n    6,\n    0,\n    ScrcpyControlMessageType.ExpandSettingPanel\n);\n\nconst LOG_LEVEL_MAP = {\n    [ScrcpyLogLevel1_18.Verbose]: ScrcpyLogLevel1_16.Debug,\n    [ScrcpyLogLevel1_18.Debug]: ScrcpyLogLevel1_16.Debug,\n    [ScrcpyLogLevel1_18.Info]: ScrcpyLogLevel1_16.Info,\n    [ScrcpyLogLevel1_18.Warn]: ScrcpyLogLevel1_16.Warn,\n    [ScrcpyLogLevel1_18.Error]: ScrcpyLogLevel1_16.Error,\n};\n\nconst VIDEO_ORIENTATION_MAP = {\n    [ScrcpyVideoOrientation1_18.Initial]: ScrcpyVideoOrientation1_16.Unlocked,\n    [ScrcpyVideoOrientation1_18.Unlocked]: ScrcpyVideoOrientation1_16.Unlocked,\n    [ScrcpyVideoOrientation1_18.Portrait]: ScrcpyVideoOrientation1_16.Portrait,\n    [ScrcpyVideoOrientation1_18.Landscape]:\n        ScrcpyVideoOrientation1_16.Landscape,\n    [ScrcpyVideoOrientation1_18.PortraitFlipped]:\n        ScrcpyVideoOrientation1_16.PortraitFlipped,\n    [ScrcpyVideoOrientation1_18.LandscapeFlipped]:\n        ScrcpyVideoOrientation1_16.LandscapeFlipped,\n};\nexport class ScrcpyOptions1_18 extends ScrcpyOptionsBase<\n    ScrcpyOptionsInit1_18,\n    ScrcpyOptions1_17\n> {\n    public static readonly DEFAULTS = {\n        ...ScrcpyOptions1_17.DEFAULTS,\n        logLevel: ScrcpyLogLevel1_18.Debug,\n        lockVideoOrientation: ScrcpyVideoOrientation1_18.Unlocked,\n        powerOffOnClose: false,\n    } as const satisfies Required<ScrcpyOptionsInit1_18>;\n\n    public static readonly SERIALIZE_ORDER = [\n        ...ScrcpyOptions1_17.SERIALIZE_ORDER,\n        \"powerOffOnClose\",\n    ] as const satisfies readonly (keyof ScrcpyOptionsInit1_18)[];\n\n    public override get defaults(): Required<ScrcpyOptionsInit1_18> {\n        return ScrcpyOptions1_18.DEFAULTS;\n    }\n\n    public override get controlMessageTypes() {\n        return SCRCPY_CONTROL_MESSAGE_TYPES_1_18;\n    }\n\n    constructor(init: ScrcpyOptionsInit1_18) {\n        const value = { ...ScrcpyOptions1_18.DEFAULTS, ...init };\n        super(\n            new ScrcpyOptions1_17({\n                ...init,\n                logLevel: LOG_LEVEL_MAP[value.logLevel],\n                lockVideoOrientation:\n                    VIDEO_ORIENTATION_MAP[value.lockVideoOrientation],\n            }),\n            value\n        );\n    }\n\n    public serialize(): string[] {\n        return ScrcpyOptions1_16.serialize(\n            this.value,\n            ScrcpyOptions1_18.SERIALIZE_ORDER\n        );\n    }\n\n    public override parseEncoder(line: string): ScrcpyEncoder | undefined {\n        return ScrcpyOptions1_17.parseEncoder(\n            line,\n            /\\s+scrcpy --encoder '(.*?)'/\n        );\n    }\n\n    public override serializeBackOrScreenOnControlMessage(\n        message: ScrcpyBackOrScreenOnControlMessage\n    ) {\n        return ScrcpyBackOrScreenOnControlMessage1_18.serialize(message);\n    }\n}\n","// cspell: ignore autosync\n\nimport Struct, { placeholder } from \"@yume-chan/struct\";\n\nimport type { ScrcpySetClipboardControlMessage } from \"../control/index.js\";\n\nimport type { ScrcpyOptionsInit1_18 } from \"./1_18.js\";\nimport { ScrcpyOptions1_18 } from \"./1_18.js\";\nimport { ScrcpyOptionsBase, toScrcpyOptionValue } from \"./types.js\";\n\nexport interface ScrcpyOptionsInit1_21 extends ScrcpyOptionsInit1_18 {\n    clipboardAutosync?: boolean;\n}\n\nfunction toSnakeCase(input: string): string {\n    return input.replace(/([A-Z])/g, \"_$1\").toLowerCase();\n}\n\nexport const ScrcpySetClipboardControlMessage1_21 = new Struct()\n    .uint8(\"type\")\n    .uint64(\"sequence\")\n    .int8(\"paste\", placeholder<boolean>())\n    .uint32(\"length\")\n    .string(\"content\", { lengthField: \"length\" });\n\nexport type ScrcpySetClipboardControlMessage1_21 =\n    (typeof ScrcpySetClipboardControlMessage1_21)[\"TInit\"];\n\nexport class ScrcpyOptions1_21 extends ScrcpyOptionsBase<\n    ScrcpyOptionsInit1_21,\n    ScrcpyOptions1_18\n> {\n    public static readonly DEFAULTS = {\n        ...ScrcpyOptions1_18.DEFAULTS,\n        clipboardAutosync: true,\n    } as const satisfies Required<ScrcpyOptionsInit1_21>;\n\n    public static serialize<T extends object>(\n        options: T,\n        defaults: Required<T>\n    ): string[] {\n        // 1.21 changed the format of arguments\n        const result: string[] = [];\n        for (const [key, value] of Object.entries(options)) {\n            const serializedValue = toScrcpyOptionValue(value, undefined);\n            if (!serializedValue) {\n                continue;\n            }\n\n            const defaultValue = toScrcpyOptionValue(\n                defaults[key as keyof T],\n                undefined\n            );\n            if (serializedValue == defaultValue) {\n                continue;\n            }\n\n            result.push(`${toSnakeCase(key)}=${serializedValue}`);\n        }\n        return result;\n    }\n\n    public override get defaults(): Required<ScrcpyOptionsInit1_21> {\n        return ScrcpyOptions1_21.DEFAULTS;\n    }\n\n    public constructor(init: ScrcpyOptionsInit1_21) {\n        super(new ScrcpyOptions1_18(init), {\n            ...ScrcpyOptions1_21.DEFAULTS,\n            ...init,\n        });\n    }\n\n    public override serialize(): string[] {\n        return ScrcpyOptions1_21.serialize(this.value, this.defaults);\n    }\n\n    public override serializeSetClipboardControlMessage(\n        message: ScrcpySetClipboardControlMessage\n    ): Uint8Array {\n        return ScrcpySetClipboardControlMessage1_21.serialize(message);\n    }\n}\n","import Struct from \"@yume-chan/struct\";\n\nimport {\n    ScrcpyInjectScrollControlMessage1_16,\n    ScrcpyScrollController1_16,\n} from \"../1_16/index.js\";\n\nexport const ScrcpyInjectScrollControlMessage1_22 = new Struct()\n    .fields(ScrcpyInjectScrollControlMessage1_16)\n    .int32(\"buttons\");\n\nexport type ScrcpyInjectScrollControlMessage1_22 =\n    (typeof ScrcpyInjectScrollControlMessage1_22)[\"TInit\"];\n\nexport class ScrcpyScrollController1_22 extends ScrcpyScrollController1_16 {\n    public override serializeScrollMessage(\n        message: ScrcpyInjectScrollControlMessage1_22\n    ): Uint8Array | undefined {\n        const processed = this.processMessage(message);\n        if (!processed) {\n            return undefined;\n        }\n\n        return ScrcpyInjectScrollControlMessage1_22.serialize(processed);\n    }\n}\n","import type { ReadableStream } from \"@yume-chan/stream-extra\";\nimport type { ValueOrPromise } from \"@yume-chan/struct\";\n\nimport type { ScrcpyScrollController } from \"../1_16/index.js\";\nimport { ScrcpyOptions1_21 } from \"../1_21.js\";\nimport type { ScrcpyVideoStream } from \"../codec.js\";\nimport { ScrcpyVideoCodecId } from \"../codec.js\";\nimport { ScrcpyOptionsBase } from \"../types.js\";\n\nimport type { ScrcpyOptionsInit1_22 } from \"./init.js\";\nimport { ScrcpyScrollController1_22 } from \"./scroll.js\";\n\nexport class ScrcpyOptions1_22 extends ScrcpyOptionsBase<\n    ScrcpyOptionsInit1_22,\n    ScrcpyOptions1_21\n> {\n    public static readonly DEFAULTS = {\n        ...ScrcpyOptions1_21.DEFAULTS,\n        downsizeOnError: true,\n        sendDeviceMeta: true,\n        sendDummyByte: true,\n    } as const satisfies Required<ScrcpyOptionsInit1_22>;\n\n    public override get defaults(): Required<ScrcpyOptionsInit1_22> {\n        return ScrcpyOptions1_22.DEFAULTS;\n    }\n\n    public constructor(init: ScrcpyOptionsInit1_22) {\n        super(new ScrcpyOptions1_21(init), {\n            ...ScrcpyOptions1_22.DEFAULTS,\n            ...init,\n        });\n    }\n\n    public override parseVideoStreamMetadata(\n        stream: ReadableStream<Uint8Array>\n    ): ValueOrPromise<ScrcpyVideoStream> {\n        if (!this.value.sendDeviceMeta) {\n            return { stream, metadata: { codec: ScrcpyVideoCodecId.H264 } };\n        } else {\n            return this._base.parseVideoStreamMetadata(stream);\n        }\n    }\n\n    public override serialize(): string[] {\n        return ScrcpyOptions1_21.serialize(this.value, this.defaults);\n    }\n\n    public override createScrollController(): ScrcpyScrollController {\n        return new ScrcpyScrollController1_22();\n    }\n}\n","export * from \"./init.js\";\nexport * from \"./options.js\";\nexport * from \"./scroll.js\";\n","import { TransformStream } from \"@yume-chan/stream-extra\";\n\nimport { ScrcpyOptions1_21 } from \"./1_21.js\";\nimport type { ScrcpyOptionsInit1_22 } from \"./1_22/index.js\";\nimport { ScrcpyOptions1_22 } from \"./1_22/index.js\";\nimport type { ScrcpyMediaStreamPacket } from \"./codec.js\";\nimport { ScrcpyOptionsBase } from \"./types.js\";\n\nexport interface ScrcpyOptionsInit1_23 extends ScrcpyOptionsInit1_22 {\n    cleanup?: boolean;\n}\n\nconst KEYFRAME_PTS = 1n << 62n;\n\nexport class ScrcpyOptions1_23 extends ScrcpyOptionsBase<\n    ScrcpyOptionsInit1_23,\n    ScrcpyOptions1_22\n> {\n    public static readonly DEFAULTS = {\n        ...ScrcpyOptions1_22.DEFAULTS,\n        cleanup: true,\n    } as const satisfies Required<ScrcpyOptionsInit1_23>;\n\n    public override get defaults(): Required<ScrcpyOptionsInit1_23> {\n        return ScrcpyOptions1_23.DEFAULTS;\n    }\n\n    public constructor(init: ScrcpyOptionsInit1_22) {\n        super(new ScrcpyOptions1_22(init), {\n            ...ScrcpyOptions1_23.DEFAULTS,\n            ...init,\n        });\n    }\n\n    public override serialize(): string[] {\n        return ScrcpyOptions1_21.serialize(this.value, this.defaults);\n    }\n\n    public override createMediaStreamTransformer(): TransformStream<\n        Uint8Array,\n        ScrcpyMediaStreamPacket\n    > {\n        const stream = this._base.createMediaStreamTransformer();\n        return {\n            writable: stream.writable,\n            readable: stream.readable.pipeThrough(\n                new TransformStream({\n                    transform(packet, controller): void {\n                        if (packet.type !== \"data\") {\n                            controller.enqueue(packet);\n                            return;\n                        }\n\n                        if (\n                            packet.pts !== undefined &&\n                            packet.pts & KEYFRAME_PTS\n                        ) {\n                            packet.keyframe = true;\n                            packet.pts &= ~KEYFRAME_PTS;\n                        }\n\n                        controller.enqueue(packet);\n                    },\n                })\n            ),\n        };\n    }\n}\n","import { ScrcpyOptions1_21 } from \"./1_21.js\";\nimport type { ScrcpyOptionsInit1_23 } from \"./1_23.js\";\nimport { ScrcpyOptions1_23 } from \"./1_23.js\";\nimport { ScrcpyOptionsBase } from \"./types.js\";\n\nexport interface ScrcpyOptionsInit1_24 extends ScrcpyOptionsInit1_23 {\n    powerOn?: boolean;\n}\n\nexport class ScrcpyOptions1_24 extends ScrcpyOptionsBase<\n    ScrcpyOptionsInit1_24,\n    ScrcpyOptions1_23\n> {\n    public static readonly DEFAULTS = {\n        ...ScrcpyOptions1_23.DEFAULTS,\n        powerOn: true,\n    } as const satisfies Required<ScrcpyOptionsInit1_24>;\n\n    public override get defaults(): Required<ScrcpyOptionsInit1_24> {\n        return ScrcpyOptions1_24.DEFAULTS;\n    }\n\n    public constructor(init: ScrcpyOptionsInit1_24) {\n        super(new ScrcpyOptions1_23(init), {\n            ...ScrcpyOptions1_24.DEFAULTS,\n            ...init,\n        });\n    }\n\n    public override serialize(): string[] {\n        return ScrcpyOptions1_21.serialize(this.value, this.defaults);\n    }\n}\n","import Struct, {\n    NumberFieldDefinition,\n    NumberFieldType,\n} from \"@yume-chan/struct\";\n\nimport type { ScrcpyInjectScrollControlMessage } from \"../../control/index.js\";\nimport { ScrcpyControlMessageType } from \"../../control/index.js\";\nimport type { ScrcpyScrollController } from \"../1_16/index.js\";\nimport { clamp } from \"../1_16/index.js\";\n\nexport const ScrcpyFloatToInt16NumberType: NumberFieldType = {\n    size: 2,\n    signed: true,\n    deserialize(array, littleEndian) {\n        const value = NumberFieldType.Int16.deserialize(array, littleEndian);\n        // https://github.com/Genymobile/scrcpy/blob/1f138aef41de651668043b32c4effc2d4adbfc44/server/src/main/java/com/genymobile/scrcpy/Binary.java#L34\n        return value === 0x7fff ? 1 : value / 0x8000;\n    },\n    serialize(dataView, offset, value, littleEndian) {\n        // https://github.com/Genymobile/scrcpy/blob/1f138aef41de651668043b32c4effc2d4adbfc44/app/src/util/binary.h#L65\n        value = clamp(value, -1, 1);\n        value = value === 1 ? 0x7fff : value * 0x8000;\n        NumberFieldType.Int16.serialize(dataView, offset, value, littleEndian);\n    },\n};\n\nconst ScrcpyFloatToInt16FieldDefinition = new NumberFieldDefinition(\n    ScrcpyFloatToInt16NumberType\n);\n\nexport const ScrcpyInjectScrollControlMessage1_25 = new Struct()\n    .uint8(\"type\", ScrcpyControlMessageType.InjectScroll as const)\n    .uint32(\"pointerX\")\n    .uint32(\"pointerY\")\n    .uint16(\"screenWidth\")\n    .uint16(\"screenHeight\")\n    .field(\"scrollX\", ScrcpyFloatToInt16FieldDefinition)\n    .field(\"scrollY\", ScrcpyFloatToInt16FieldDefinition)\n    .int32(\"buttons\");\n\nexport type ScrcpyInjectScrollControlMessage1_25 =\n    (typeof ScrcpyInjectScrollControlMessage1_25)[\"TInit\"];\n\nexport class ScrcpyScrollController1_25 implements ScrcpyScrollController {\n    serializeScrollMessage(\n        message: ScrcpyInjectScrollControlMessage\n    ): Uint8Array | undefined {\n        return ScrcpyInjectScrollControlMessage1_25.serialize(message);\n    }\n}\n","import type { ScrcpyScrollController } from \"../1_16/index.js\";\nimport { ScrcpyOptions1_21 } from \"../1_21.js\";\nimport type { ScrcpyOptionsInit1_24 } from \"../1_24.js\";\nimport { ScrcpyOptions1_24 } from \"../1_24.js\";\nimport { ScrcpyOptionsBase } from \"../types.js\";\n\nimport { ScrcpyScrollController1_25 } from \"./scroll.js\";\n\nexport class ScrcpyOptions1_25 extends ScrcpyOptionsBase<\n    ScrcpyOptionsInit1_24,\n    ScrcpyOptions1_24\n> {\n    public override get defaults(): Required<ScrcpyOptionsInit1_24> {\n        return ScrcpyOptions1_24.DEFAULTS;\n    }\n\n    public constructor(init: ScrcpyOptionsInit1_24) {\n        super(new ScrcpyOptions1_24(init), {\n            ...ScrcpyOptions1_24.DEFAULTS,\n            ...init,\n        });\n    }\n\n    public override serialize(): string[] {\n        return ScrcpyOptions1_21.serialize(this.value, this.defaults);\n    }\n\n    public override createScrollController(): ScrcpyScrollController {\n        return new ScrcpyScrollController1_25();\n    }\n}\n","export * from \"./options.js\";\nexport * from \"./scroll.js\";\n","import type { ReadableStream } from \"@yume-chan/stream-extra\";\nimport {\n    BufferedReadableStream,\n    PushReadableStream,\n} from \"@yume-chan/stream-extra\";\nimport type { ValueOrPromise } from \"@yume-chan/struct\";\nimport Struct, { NumberFieldType, placeholder } from \"@yume-chan/struct\";\n\nimport type {\n    AndroidMotionEventAction,\n    ScrcpyInjectTouchControlMessage,\n} from \"../control/index.js\";\n\nimport {\n    CodecOptions,\n    ScrcpyFloatToUint16FieldDefinition,\n    ScrcpyOptions1_16,\n} from \"./1_16/index.js\";\nimport { ScrcpyOptions1_21 } from \"./1_21.js\";\nimport type { ScrcpyOptionsInit1_24 } from \"./1_24.js\";\nimport { ScrcpyOptions1_24 } from \"./1_24.js\";\nimport { ScrcpyOptions1_25 } from \"./1_25/index.js\";\nimport type { ScrcpyAudioStreamMetadata, ScrcpyVideoStream } from \"./codec.js\";\nimport { ScrcpyAudioCodec, ScrcpyVideoCodecId } from \"./codec.js\";\nimport type {\n    ScrcpyDisplay,\n    ScrcpyEncoder,\n    ScrcpyOptionValue,\n} from \"./types.js\";\nimport { ScrcpyOptionsBase } from \"./types.js\";\n\nexport const ScrcpyInjectTouchControlMessage2_0 = new Struct()\n    .uint8(\"type\")\n    .uint8(\"action\", placeholder<AndroidMotionEventAction>())\n    .uint64(\"pointerId\")\n    .uint32(\"pointerX\")\n    .uint32(\"pointerY\")\n    .uint16(\"screenWidth\")\n    .uint16(\"screenHeight\")\n    .field(\"pressure\", ScrcpyFloatToUint16FieldDefinition)\n    .uint32(\"actionButton\")\n    .uint32(\"buttons\");\n\nexport type ScrcpyInjectTouchControlMessage2_0 =\n    (typeof ScrcpyInjectTouchControlMessage2_0)[\"TInit\"];\n\nexport class ScrcpyInstanceId implements ScrcpyOptionValue {\n    public static readonly NONE = new ScrcpyInstanceId(-1);\n\n    public static random(): ScrcpyInstanceId {\n        // A random 31-bit unsigned integer\n        return new ScrcpyInstanceId((Math.random() * 0x80000000) | 0);\n    }\n\n    public value: number;\n\n    public constructor(value: number) {\n        this.value = value;\n    }\n\n    public toOptionValue(): string | undefined {\n        if (this.value < 0) {\n            return undefined;\n        }\n        return this.value.toString(16);\n    }\n}\n\nexport interface ScrcpyOptionsInit2_0\n    extends Omit<\n        ScrcpyOptionsInit1_24,\n        \"bitRate\" | \"codecOptions\" | \"encoderName\"\n    > {\n    scid?: ScrcpyInstanceId;\n\n    videoCodec?: \"h264\" | \"h265\" | \"av1\";\n    videoBitRate?: number;\n    videoCodecOptions?: CodecOptions;\n    videoEncoder?: string;\n\n    audio?: boolean;\n    audioCodec?: \"opus\" | \"aac\" | \"raw\";\n    audioBitRate?: number;\n    audioCodecOptions?: CodecOptions;\n    audioEncoder?: string;\n\n    listEncoders?: boolean;\n    listDisplays?: boolean;\n    sendCodecMeta?: boolean;\n}\n\nfunction omit<T extends object, K extends keyof T>(\n    obj: T,\n    keys: K[]\n): Omit<T, K> {\n    const result: Record<PropertyKey, unknown> = {};\n    for (const key in obj) {\n        if (!keys.includes(key as keyof T as K)) {\n            result[key] = obj[key];\n        }\n    }\n    return result as Omit<T, K>;\n}\n\nexport class ScrcpyOptions2_0 extends ScrcpyOptionsBase<\n    ScrcpyOptionsInit2_0,\n    ScrcpyOptions1_25\n> {\n    public static readonly DEFAULTS = {\n        ...omit(ScrcpyOptions1_24.DEFAULTS, [\n            \"bitRate\",\n            \"codecOptions\",\n            \"encoderName\",\n        ]),\n        scid: ScrcpyInstanceId.NONE,\n\n        videoCodec: \"h264\",\n        videoBitRate: 8000000,\n        videoCodecOptions: new CodecOptions(),\n        videoEncoder: \"\",\n\n        audio: true,\n        audioCodec: \"opus\",\n        audioBitRate: 128000,\n        audioCodecOptions: new CodecOptions(),\n        audioEncoder: \"\",\n\n        listEncoders: false,\n        listDisplays: false,\n        sendCodecMeta: true,\n    } as const satisfies Required<ScrcpyOptionsInit2_0>;\n\n    public override get defaults(): Required<ScrcpyOptionsInit2_0> {\n        return ScrcpyOptions2_0.DEFAULTS;\n    }\n\n    public constructor(init: ScrcpyOptionsInit2_0) {\n        super(new ScrcpyOptions1_25(init), {\n            ...ScrcpyOptions2_0.DEFAULTS,\n            ...init,\n        });\n    }\n\n    public override serialize(): string[] {\n        return ScrcpyOptions1_21.serialize(this.value, this.defaults);\n    }\n\n    public override setListEncoders(): void {\n        this.value.listEncoders = true;\n    }\n\n    public override setListDisplays(): void {\n        this.value.listDisplays = true;\n    }\n\n    public override parseEncoder(line: string): ScrcpyEncoder | undefined {\n        let match = line.match(\n            /\\s+--video-codec=(.*)\\s+--video-encoder='(.*)'/\n        );\n        if (match) {\n            return {\n                type: \"video\",\n                codec: match[1]!,\n                name: match[2]!,\n            };\n        }\n\n        match = line.match(/\\s+--audio-codec=(.*)\\s+--audio-encoder='(.*)'/);\n        if (match) {\n            return {\n                type: \"audio\",\n                codec: match[1]!,\n                name: match[2]!,\n            };\n        }\n\n        return undefined;\n    }\n\n    public override parseDisplay(line: string): ScrcpyDisplay | undefined {\n        const match = line.match(/\\s+--display=(\\d+)\\s+\\((.*?)\\)/);\n        if (match) {\n            const display: ScrcpyDisplay = {\n                id: Number.parseInt(match[1]!, 10),\n            };\n            if (match[2] !== \"size unknown\") {\n                display.resolution = match[2]!;\n            }\n            return display;\n        }\n        return undefined;\n    }\n\n    public override parseVideoStreamMetadata(\n        stream: ReadableStream<Uint8Array>\n    ): ValueOrPromise<ScrcpyVideoStream> {\n        const { sendDeviceMeta, sendCodecMeta } = this.value;\n        if (!sendDeviceMeta && !sendCodecMeta) {\n            let codec: ScrcpyVideoCodecId;\n            switch (this.value.videoCodec) {\n                case \"h264\":\n                    codec = ScrcpyVideoCodecId.H264;\n                    break;\n                case \"h265\":\n                    codec = ScrcpyVideoCodecId.H265;\n                    break;\n                case \"av1\":\n                    codec = ScrcpyVideoCodecId.AV1;\n                    break;\n            }\n            return { stream, metadata: { codec } };\n        }\n\n        return (async () => {\n            const buffered = new BufferedReadableStream(stream);\n\n            // `sendDeviceMeta` now only contains device name,\n            // can't use `super.parseVideoStreamMetadata` here\n            let deviceName: string | undefined;\n            if (sendDeviceMeta) {\n                deviceName = await ScrcpyOptions1_16.parseCString(buffered, 64);\n            }\n\n            let codec: ScrcpyVideoCodecId;\n            let width: number | undefined;\n            let height: number | undefined;\n            if (sendCodecMeta) {\n                codec = await ScrcpyOptions1_16.parseUint32BE(buffered);\n                width = await ScrcpyOptions1_16.parseUint32BE(buffered);\n                height = await ScrcpyOptions1_16.parseUint32BE(buffered);\n            } else {\n                switch (this.value.videoCodec) {\n                    case \"h264\":\n                        codec = ScrcpyVideoCodecId.H264;\n                        break;\n                    case \"h265\":\n                        codec = ScrcpyVideoCodecId.H265;\n                        break;\n                    case \"av1\":\n                        codec = ScrcpyVideoCodecId.AV1;\n                        break;\n                }\n            }\n\n            return {\n                stream: buffered.release(),\n                metadata: { deviceName, codec, width, height },\n            };\n        })();\n    }\n\n    public override parseAudioStreamMetadata(\n        stream: ReadableStream<Uint8Array>\n    ): ValueOrPromise<ScrcpyAudioStreamMetadata> {\n        return (async (): Promise<ScrcpyAudioStreamMetadata> => {\n            const buffered = new BufferedReadableStream(stream);\n            const buffer = await buffered.readExactly(\n                NumberFieldType.Uint32.size\n            );\n\n            const codecMetadataValue = NumberFieldType.Uint32.deserialize(\n                buffer,\n                false\n            );\n            // Server will send `0x00_00_00_00` and `0x00_00_00_01` even if `sendCodecMeta` is false\n            switch (codecMetadataValue) {\n                case 0x00_00_00_00:\n                    return {\n                        type: \"disabled\",\n                    };\n                case 0x00_00_00_01:\n                    return {\n                        type: \"errored\",\n                    };\n            }\n\n            if (this.value.sendCodecMeta) {\n                let codec: ScrcpyAudioCodec;\n                switch (codecMetadataValue) {\n                    case ScrcpyAudioCodec.OPUS.metadataValue:\n                        codec = ScrcpyAudioCodec.OPUS;\n                        break;\n                    case ScrcpyAudioCodec.AAC.metadataValue:\n                        codec = ScrcpyAudioCodec.AAC;\n                        break;\n                    case ScrcpyAudioCodec.RAW.metadataValue:\n                        codec = ScrcpyAudioCodec.RAW;\n                        break;\n                    default:\n                        throw new Error(\n                            `Unknown audio codec metadata value: ${codecMetadataValue}`\n                        );\n                }\n                return {\n                    type: \"success\",\n                    codec,\n                    stream: buffered.release(),\n                };\n            }\n\n            // Infer codec from `audioCodec` option\n            let codec: ScrcpyAudioCodec;\n            switch (this.value.audioCodec) {\n                case \"opus\":\n                    codec = ScrcpyAudioCodec.OPUS;\n                    break;\n                case \"aac\":\n                    codec = ScrcpyAudioCodec.AAC;\n                    break;\n                case \"raw\":\n                    codec = ScrcpyAudioCodec.RAW;\n                    break;\n            }\n            return {\n                type: \"success\",\n                codec,\n                stream: new PushReadableStream<Uint8Array>(\n                    async (controller) => {\n                        // Put the first 4 bytes back\n                        await controller.enqueue(buffer);\n\n                        const stream = buffered.release();\n                        const reader = stream.getReader();\n                        while (true) {\n                            const { done, value } = await reader.read();\n                            if (done) {\n                                break;\n                            }\n                            await controller.enqueue(value);\n                        }\n                    }\n                ),\n            };\n        })();\n    }\n\n    public override serializeInjectTouchControlMessage(\n        message: ScrcpyInjectTouchControlMessage\n    ): Uint8Array {\n        return ScrcpyInjectTouchControlMessage2_0.serialize(message);\n    }\n}\n","import { ScrcpyLogLevel1_18, ScrcpyVideoOrientation1_18 } from \"./1_18.js\";\nimport type { ScrcpyOptionsInit2_0 } from \"./2_0.js\";\nimport { ScrcpyOptions2_0 } from \"./2_0.js\";\n\nexport const ScrcpyLogLevel = ScrcpyLogLevel1_18;\nexport type ScrcpyLogLevel = ScrcpyLogLevel1_18;\n\nexport const ScrcpyVideoOrientation = ScrcpyVideoOrientation1_18;\nexport type ScrcpyVideoOrientation = ScrcpyVideoOrientation1_18;\n\nexport type ScrcpyOptionsInitLatest = ScrcpyOptionsInit2_0;\nexport class ScrcpyOptionsLatest extends ScrcpyOptions2_0 {}\n\nexport const ScrcpyLatestVersion = \"2.0\";\n","export * from \"./1_16/index.js\";\nexport * from \"./1_17.js\";\nexport * from \"./1_18.js\";\nexport * from \"./1_21.js\";\nexport * from \"./1_22/index.js\";\nexport * from \"./1_23.js\";\nexport * from \"./1_24.js\";\nexport * from \"./1_25/index.js\";\nexport * from \"./2_0.js\";\nexport * from \"./codec.js\";\nexport * from \"./latest.js\";\nexport * from \"./types.js\";\n","export * from \"./codec/index.js\";\nexport * from \"./control/index.js\";\nexport * from \"./device-message/index.js\";\nexport * from \"./options/index.js\";\n","import type {\n    ScrcpyMediaStreamDataPacket,\n    ScrcpyMediaStreamPacket,\n} from \"@yume-chan/scrcpy\";\nimport {\n    ScrcpyVideoCodecId,\n    h264ParseConfiguration,\n    h265ParseConfiguration,\n} from \"@yume-chan/scrcpy\";\nimport type {\n    ScrcpyVideoDecoder,\n    ScrcpyVideoDecoderCapability,\n} from \"@yume-chan/scrcpy-decoder-tinyh264\";\nimport { WritableStream } from \"@yume-chan/stream-extra\";\n\nfunction toHex(value: number) {\n    return value.toString(16).padStart(2, \"0\").toUpperCase();\n}\n\nfunction toUint32Le(data: Uint8Array, offset: number) {\n    return (\n        data[offset]! |\n        (data[offset + 1]! << 8) |\n        (data[offset + 2]! << 16) |\n        (data[offset + 3]! << 24)\n    );\n}\n\nexport class WebCodecsDecoder implements ScrcpyVideoDecoder {\n    public static readonly capabilities: Record<\n        string,\n        ScrcpyVideoDecoderCapability\n    > = {\n        h264: {},\n        h265: {},\n    };\n\n    private _codec: ScrcpyVideoCodecId;\n    public get codec() {\n        return this._codec;\n    }\n\n    private _writable: WritableStream<ScrcpyMediaStreamPacket>;\n    public get writable() {\n        return this._writable;\n    }\n\n    private _renderer: HTMLCanvasElement;\n    public get renderer() {\n        return this._renderer;\n    }\n\n    private _frameRendered = 0;\n    public get frameRendered() {\n        return this._frameRendered;\n    }\n\n    private _frameSkipped = 0;\n    public get frameSkipped() {\n        return this._frameSkipped;\n    }\n\n    private context: CanvasRenderingContext2D;\n    private decoder: VideoDecoder;\n    private _config: Uint8Array | undefined;\n\n    private currentFrameRendered = false;\n    private animationFrameId = 0;\n\n    public constructor(codec: ScrcpyVideoCodecId) {\n        this._codec = codec;\n\n        this._renderer = document.createElement(\"canvas\");\n\n        this.context = this._renderer.getContext(\"2d\")!;\n        this.decoder = new VideoDecoder({\n            output: (frame) => {\n                if (this.currentFrameRendered) {\n                    this._frameSkipped += 1;\n                } else {\n                    this.currentFrameRendered = true;\n                    this._frameRendered += 1;\n                }\n\n                // PERF: H.264 renderer may draw multiple frames in one vertical sync interval to minimize latency.\n                // When multiple frames are drawn in one vertical sync interval,\n                // only the last one is visible to users.\n                // But this ensures users can always see the most up-to-date screen.\n                // This is also the behavior of official Scrcpy client.\n                // https://github.com/Genymobile/scrcpy/issues/3679\n                this.context.drawImage(frame, 0, 0);\n                frame.close();\n            },\n            error(e) {\n                void e;\n            },\n        });\n\n        this._writable = new WritableStream<ScrcpyMediaStreamPacket>({\n            write: (packet) => {\n                switch (packet.type) {\n                    case \"configuration\":\n                        this.configure(packet.data);\n                        break;\n                    case \"data\":\n                        this.decode(packet);\n                        break;\n                }\n            },\n        });\n\n        this.onFramePresented();\n    }\n\n    private onFramePresented = () => {\n        this.currentFrameRendered = false;\n        this.animationFrameId = requestAnimationFrame(this.onFramePresented);\n    };\n\n    private configure(data: Uint8Array) {\n        switch (this._codec) {\n            case ScrcpyVideoCodecId.H264: {\n                const {\n                    profileIndex,\n                    constraintSet,\n                    levelIndex,\n                    croppedWidth,\n                    croppedHeight,\n                } = h264ParseConfiguration(data);\n\n                this._renderer.width = croppedWidth;\n                this._renderer.height = croppedHeight;\n\n                // https://www.rfc-editor.org/rfc/rfc6381#section-3.3\n                // ISO Base Media File Format Name Space\n                const codec = `avc1.${[profileIndex, constraintSet, levelIndex]\n                    .map(toHex)\n                    .join(\"\")}`;\n                this.decoder.configure({\n                    codec: codec,\n                    optimizeForLatency: true,\n                });\n                break;\n            }\n            case ScrcpyVideoCodecId.H265: {\n                const {\n                    generalProfileSpace,\n                    generalProfileIndex,\n                    generalProfileCompatibilitySet,\n                    generalTierFlag,\n                    generalLevelIndex,\n                    generalConstraintSet,\n                    croppedWidth,\n                    croppedHeight,\n                } = h265ParseConfiguration(data);\n\n                this._renderer.width = croppedWidth;\n                this._renderer.height = croppedHeight;\n\n                const codec = [\n                    \"hev1\",\n                    [\"\", \"A\", \"B\", \"C\"][generalProfileSpace]! +\n                        generalProfileIndex.toString(),\n                    toUint32Le(generalProfileCompatibilitySet, 0).toString(16),\n                    (generalTierFlag ? \"H\" : \"L\") +\n                        generalLevelIndex.toString(),\n                    toUint32Le(generalConstraintSet, 0)\n                        .toString(16)\n                        .toUpperCase(),\n                    toUint32Le(generalConstraintSet, 4)\n                        .toString(16)\n                        .toUpperCase(),\n                ].join(\".\");\n                console.log(\"codec\", codec);\n                this.decoder.configure({\n                    codec,\n                    optimizeForLatency: true,\n                });\n                break;\n            }\n        }\n        this._config = data;\n    }\n\n    private decode(packet: ScrcpyMediaStreamDataPacket) {\n        // WebCodecs requires configuration data to be with the first frame.\n        // https://www.w3.org/TR/webcodecs-avc-codec-registration/#encodedvideochunk-type\n        let data: Uint8Array;\n        if (this._config !== undefined) {\n            data = new Uint8Array(\n                this._config.byteLength + packet.data.byteLength\n            );\n            data.set(this._config, 0);\n            data.set(packet.data, this._config.byteLength);\n            this._config = undefined;\n        } else {\n            data = packet.data;\n        }\n\n        this.decoder.decode(\n            new EncodedVideoChunk({\n                // Treat `undefined` as `key`, otherwise won't decode.\n                type: packet.keyframe === false ? \"delta\" : \"key\",\n                timestamp: 0,\n                data,\n            })\n        );\n    }\n\n    public dispose() {\n        cancelAnimationFrame(this.animationFrameId);\n        if (this.decoder.state !== \"closed\") {\n            this.decoder.close();\n        }\n    }\n}\n","// cspell: ignore MPEGH\n// cspell: ignore rbsp\n// cspell: ignore Nalus\n\nimport {\n    H265NaluRaw,\n    ScrcpyAudioCodec,\n    ScrcpyMediaStreamDataPacket,\n    ScrcpyMediaStreamPacket,\n    ScrcpyVideoCodecId,\n    ScrcpyVideoStreamMetadata,\n    annexBSplitNalu,\n    h264SearchConfiguration,\n    h265ParseSequenceParameterSet,\n    h265ParseVideoParameterSet,\n    h265SearchConfiguration,\n} from \"@yume-chan/scrcpy\";\nimport { action, makeAutoObservable, reaction } from \"mobx\";\nimport { ArrayBufferTarget, Muxer as WebMMuxer } from \"webm-muxer\";\nimport { saveFile } from \"../../utils\";\n\n// https://ffmpeg.org/doxygen/0.11/avc_8c-source.html#l00106\nfunction h264ConfigurationToAvcDecoderConfigurationRecord(\n    sequenceParameterSet: Uint8Array,\n    pictureParameterSet: Uint8Array\n) {\n    const buffer = new Uint8Array(\n        11 + sequenceParameterSet.byteLength + pictureParameterSet.byteLength\n    );\n    buffer[0] = 1;\n    buffer[1] = sequenceParameterSet[1];\n    buffer[2] = sequenceParameterSet[2];\n    buffer[3] = sequenceParameterSet[3];\n    buffer[4] = 0xff;\n    buffer[5] = 0xe1;\n    buffer[6] = sequenceParameterSet.byteLength >> 8;\n    buffer[7] = sequenceParameterSet.byteLength & 0xff;\n    buffer.set(sequenceParameterSet, 8);\n    buffer[8 + sequenceParameterSet.byteLength] = 1;\n    buffer[9 + sequenceParameterSet.byteLength] =\n        pictureParameterSet.byteLength >> 8;\n    buffer[10 + sequenceParameterSet.byteLength] =\n        pictureParameterSet.byteLength & 0xff;\n    buffer.set(pictureParameterSet, 11 + sequenceParameterSet.byteLength);\n    return buffer;\n}\n\nfunction h265ConfigurationToHevcDecoderConfigurationRecord(\n    videoParameterSet: H265NaluRaw,\n    sequenceParameterSet: H265NaluRaw,\n    pictureParameterSet: H265NaluRaw\n) {\n    const {\n        profileTierLevel: {\n            generalProfileTier: {\n                profile_space: general_profile_space,\n                tier_flag: general_tier_flag,\n                profile_idc: general_profile_idc,\n                profileCompatibilitySet: generalProfileCompatibilitySet,\n                constraintSet: generalConstraintSet,\n            },\n            general_level_idc,\n        },\n        vps_max_layers_minus1,\n        vps_temporal_id_nesting_flag,\n    } = h265ParseVideoParameterSet(videoParameterSet.rbsp);\n\n    const {\n        chroma_format_idc,\n        bit_depth_luma_minus8,\n        bit_depth_chroma_minus8,\n        vuiParameters: { min_spatial_segmentation_idc = 0 } = {},\n    } = h265ParseSequenceParameterSet(sequenceParameterSet.rbsp);\n\n    const buffer = new Uint8Array(\n        23 +\n            5 * 3 +\n            videoParameterSet.data.length +\n            sequenceParameterSet.data.length +\n            pictureParameterSet.data.length\n    );\n\n    /* unsigned int(8) configurationVersion = 1; */\n    buffer[0] = 1;\n\n    /*\n     * unsigned int(2) general_profile_space;\n     * unsigned int(1) general_tier_flag;\n     * unsigned int(5) general_profile_idc;\n     */\n    buffer[1] =\n        (general_profile_space << 6) |\n        (Number(general_tier_flag) << 5) |\n        general_profile_idc;\n\n    /* unsigned int(32) general_profile_compatibility_flags; */\n    buffer[2] = generalProfileCompatibilitySet[0];\n    buffer[3] = generalProfileCompatibilitySet[1];\n    buffer[4] = generalProfileCompatibilitySet[2];\n    buffer[5] = generalProfileCompatibilitySet[3];\n\n    /* unsigned int(48) general_constraint_indicator_flags; */\n    buffer[6] = generalConstraintSet[0];\n    buffer[7] = generalConstraintSet[1];\n    buffer[8] = generalConstraintSet[2];\n    buffer[9] = generalConstraintSet[3];\n    buffer[10] = generalConstraintSet[4];\n    buffer[11] = generalConstraintSet[5];\n\n    /* unsigned int(8) general_level_idc; */\n    buffer[12] = general_level_idc;\n\n    /*\n     * bit(4) reserved = '1111'b;\n     * unsigned int(12) min_spatial_segmentation_idc;\n     */\n    buffer[13] = 0xf0 | (min_spatial_segmentation_idc >> 8);\n    buffer[14] = min_spatial_segmentation_idc;\n\n    /*\n     * bit(6) reserved = '111111'b;\n     * unsigned int(2) parallelismType;\n     */\n    buffer[15] = 0xfc;\n\n    /*\n     * bit(6) reserved = '111111'b;\n     * unsigned int(2) chromaFormat;\n     */\n    buffer[16] = 0xfc | chroma_format_idc;\n\n    /*\n     * bit(5) reserved = '11111'b;\n     * unsigned int(3) bitDepthLumaMinus8;\n     */\n    buffer[17] = 0xf8 | bit_depth_luma_minus8;\n\n    /*\n     * bit(5) reserved = '11111'b;\n     * unsigned int(3) bitDepthChromaMinus8;\n     */\n    buffer[18] = 0xf8 | bit_depth_chroma_minus8;\n\n    /* bit(16) avgFrameRate; */\n    buffer[19] = 0;\n    buffer[20] = 0;\n\n    /*\n     * bit(2) constantFrameRate;\n     * bit(3) numTemporalLayers;\n     * bit(1) temporalIdNested;\n     * unsigned int(2) lengthSizeMinusOne;\n     */\n    buffer[21] =\n        ((vps_max_layers_minus1 + 1) << 3) |\n        (Number(vps_temporal_id_nesting_flag) << 2) |\n        3;\n\n    /* unsigned int(8) numOfArrays; */\n    buffer[22] = 3;\n\n    let i = 23;\n\n    for (const nalu of [\n        videoParameterSet,\n        sequenceParameterSet,\n        pictureParameterSet,\n    ]) {\n        /*\n         * bit(1) array_completeness;\n         * unsigned int(1) reserved = 0;\n         * unsigned int(6) NAL_unit_type;\n         */\n        buffer[i] = nalu.nal_unit_type;\n        i += 1;\n\n        /* unsigned int(16) numNalus; */\n        buffer[i] = 0;\n        i += 1;\n        buffer[i] = 1;\n        i += 1;\n\n        /* unsigned int(16) nalUnitLength; */\n        buffer[i] = nalu.data.length >> 8;\n        i += 1;\n        buffer[i] = nalu.data.length;\n        i += 1;\n\n        buffer.set(nalu.data, i);\n        i += nalu.data.length;\n    }\n\n    return buffer;\n}\n\nfunction h264StreamToAvcSample(buffer: Uint8Array) {\n    const nalUnits: Uint8Array[] = [];\n    let totalLength = 0;\n\n    for (const unit of annexBSplitNalu(buffer)) {\n        nalUnits.push(unit);\n        totalLength += unit.byteLength + 4;\n    }\n\n    const sample = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const nalu of nalUnits) {\n        sample[offset] = nalu.byteLength >> 24;\n        sample[offset + 1] = nalu.byteLength >> 16;\n        sample[offset + 2] = nalu.byteLength >> 8;\n        sample[offset + 3] = nalu.byteLength & 0xff;\n        sample.set(nalu, offset + 4);\n        offset += 4 + nalu.byteLength;\n    }\n    return sample;\n}\n\n// https://github.com/FFmpeg/FFmpeg/blob/adb5f7b41faf354a3e0bf722f44aeb230aefa310/libavformat/matroska.c\nconst MatroskaVideoCodecNameMap: Record<ScrcpyVideoCodecId, string> = {\n    [ScrcpyVideoCodecId.H264]: \"V_MPEG4/ISO/AVC\",\n    [ScrcpyVideoCodecId.H265]: \"V_MPEGH/ISO/HEVC\",\n    [ScrcpyVideoCodecId.AV1]: \"V_AV1\",\n};\n\nconst MatroskaAudioCodecNameMap: Record<string, string> = {\n    [ScrcpyAudioCodec.RAW.mimeType]: \"A_PCM/INT/LIT\",\n    [ScrcpyAudioCodec.AAC.mimeType]: \"A_AAC\",\n    [ScrcpyAudioCodec.OPUS.mimeType]: \"A_OPUS\",\n};\n\nexport class MatroskaMuxingRecorder {\n    public running = false;\n\n    public videoMetadata: ScrcpyVideoStreamMetadata | undefined;\n    public audioCodec: ScrcpyAudioCodec | undefined;\n\n    private muxer: WebMMuxer<ArrayBufferTarget> | undefined;\n    private videoCodecDescription: Uint8Array | undefined;\n    private configurationWritten = false;\n    private _firstTimestamp = -1;\n    private _packetsFromLastKeyframe: {\n        type: \"video\" | \"audio\";\n        packet: ScrcpyMediaStreamDataPacket;\n    }[] = [];\n\n    private addVideoChunk(packet: ScrcpyMediaStreamDataPacket) {\n        if (this._firstTimestamp === -1) {\n            this._firstTimestamp = Number(packet.pts!);\n        }\n\n        const sample = h264StreamToAvcSample(packet.data);\n        this.muxer!.addVideoChunkRaw(\n            sample,\n            packet.keyframe ? \"key\" : \"delta\",\n            Number(packet.pts) - this._firstTimestamp,\n            this.configurationWritten\n                ? undefined\n                : {\n                      decoderConfig: {\n                          // Not used\n                          codec: \"\",\n                          description: this.videoCodecDescription,\n                      },\n                  }\n        );\n        this.configurationWritten = true;\n    }\n\n    public addVideoPacket(packet: ScrcpyMediaStreamPacket) {\n        if (!this.videoMetadata) {\n            throw new Error(\"videoMetadata must be set\");\n        }\n\n        try {\n            if (packet.type === \"configuration\") {\n                switch (this.videoMetadata.codec) {\n                    case ScrcpyVideoCodecId.H264: {\n                        const { sequenceParameterSet, pictureParameterSet } =\n                            h264SearchConfiguration(packet.data);\n                        this.videoCodecDescription =\n                            h264ConfigurationToAvcDecoderConfigurationRecord(\n                                sequenceParameterSet,\n                                pictureParameterSet\n                            );\n                        this.configurationWritten = false;\n                        break;\n                    }\n                    case ScrcpyVideoCodecId.H265: {\n                        const {\n                            videoParameterSet,\n                            sequenceParameterSet,\n                            pictureParameterSet,\n                        } = h265SearchConfiguration(packet.data);\n                        this.videoCodecDescription =\n                            h265ConfigurationToHevcDecoderConfigurationRecord(\n                                videoParameterSet,\n                                sequenceParameterSet,\n                                pictureParameterSet\n                            );\n                        this.configurationWritten = false;\n                        break;\n                    }\n                }\n                return;\n            }\n\n            // To ensure the first frame is a keyframe\n            // save the last keyframe and the following frames\n            if (packet.keyframe === true) {\n                this._packetsFromLastKeyframe.length = 0;\n            }\n            this._packetsFromLastKeyframe.push({ type: \"video\", packet });\n\n            if (!this.muxer) {\n                return;\n            }\n\n            this.addVideoChunk(packet);\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    private addAudioChunk(chunk: ScrcpyMediaStreamDataPacket) {\n        if (this._firstTimestamp === -1) {\n            return;\n        }\n\n        const timestamp = Number(chunk.pts) - this._firstTimestamp;\n        if (timestamp < 0) {\n            return;\n        }\n\n        if (!this.muxer) {\n            return;\n        }\n\n        this.muxer.addAudioChunkRaw(chunk.data, \"key\", timestamp);\n    }\n\n    public addAudioPacket(packet: ScrcpyMediaStreamDataPacket) {\n        this._packetsFromLastKeyframe.push({ type: \"audio\", packet });\n        this.addAudioChunk(packet);\n    }\n\n    public start() {\n        if (!this.videoMetadata) {\n            throw new Error(\"videoMetadata must be set\");\n        }\n\n        this.running = true;\n\n        const options: ConstructorParameters<typeof WebMMuxer>[0] = {\n            target: new ArrayBufferTarget(),\n            type: \"matroska\",\n            firstTimestampBehavior: \"permissive\",\n            video: {\n                codec: MatroskaVideoCodecNameMap[this.videoMetadata.codec!],\n                width: this.videoMetadata.width ?? 0,\n                height: this.videoMetadata.height ?? 0,\n            },\n        };\n\n        if (this.audioCodec) {\n            options.audio = {\n                codec: MatroskaAudioCodecNameMap[this.audioCodec.mimeType!],\n                sampleRate: 48000,\n                numberOfChannels: 2,\n                bitDepth:\n                    this.audioCodec === ScrcpyAudioCodec.RAW ? 16 : undefined,\n            };\n        }\n\n        this.muxer = new WebMMuxer(options as any);\n\n        if (this._packetsFromLastKeyframe.length > 0) {\n            for (const { type, packet } of this._packetsFromLastKeyframe) {\n                if (type === \"video\") {\n                    this.addVideoChunk(packet);\n                } else {\n                    this.addAudioChunk(packet);\n                }\n            }\n        }\n    }\n\n    public stop() {\n        if (!this.muxer) {\n            return;\n        }\n\n        this.muxer.finalize()!;\n        const buffer = this.muxer.target.buffer;\n        const now = new Date();\n        const stream = saveFile(\n            // prettier-ignore\n            `Recording ${\n                now.getFullYear()\n            }-${\n                (now.getMonth() + 1).toString().padStart(2, '0')\n            }-${\n                now.getDate().toString().padStart(2, '0')\n            } ${\n                now.getHours().toString().padStart(2, '0')\n            }-${\n                now.getMinutes().toString().padStart(2, '0')\n            }-${\n                now.getSeconds().toString().padStart(2, '0')\n            }.mkv`\n        );\n        const writer = stream.getWriter();\n        writer.write(new Uint8Array(buffer));\n        writer.close();\n\n        this.muxer = undefined;\n        this.configurationWritten = false;\n        this.running = false;\n    }\n}\n\nexport const RECORD_STATE = makeAutoObservable({\n    recorder: new MatroskaMuxingRecorder(),\n    recording: false,\n    intervalId: -1,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n});\n\nreaction(\n    () => RECORD_STATE.recording,\n    (recording) => {\n        if (recording) {\n            RECORD_STATE.intervalId = window.setInterval(\n                action(() => {\n                    RECORD_STATE.seconds += 1;\n                    if (RECORD_STATE.seconds >= 60) {\n                        RECORD_STATE.seconds = 0;\n                        RECORD_STATE.minutes += 1;\n                    }\n                    if (RECORD_STATE.minutes >= 60) {\n                        RECORD_STATE.minutes = 0;\n                        RECORD_STATE.hours += 1;\n                    }\n                }),\n                1000\n            );\n        } else {\n            window.clearInterval(RECORD_STATE.intervalId);\n            RECORD_STATE.intervalId = -1;\n            RECORD_STATE.hours = 0;\n            RECORD_STATE.minutes = 0;\n            RECORD_STATE.seconds = 0;\n        }\n    }\n);\n","import type { Adb, AdbSubprocessProtocol } from \"@yume-chan/adb\";\nimport {\n    AdbReverseNotSupportedError,\n    AdbSubprocessNoneProtocol,\n} from \"@yume-chan/adb\";\nimport type {\n    ScrcpyAudioStreamDisabledMetadata,\n    ScrcpyAudioStreamErroredMetadata,\n    ScrcpyAudioStreamSuccessMetadata,\n    ScrcpyDeviceMessage,\n    ScrcpyDisplay,\n    ScrcpyEncoder,\n    ScrcpyMediaStreamPacket,\n    ScrcpyVideoStreamMetadata,\n} from \"@yume-chan/scrcpy\";\nimport {\n    DEFAULT_SERVER_PATH,\n    ScrcpyControlMessageWriter,\n    ScrcpyDeviceMessageDeserializeStream,\n    ScrcpyVideoCodecId,\n    h264ParseConfiguration,\n    h265ParseConfiguration,\n} from \"@yume-chan/scrcpy\";\nimport type {\n    Consumable,\n    ReadableStream,\n    ReadableWritablePair,\n} from \"@yume-chan/stream-extra\";\nimport {\n    AbortController,\n    DecodeUtf8Stream,\n    InspectStream,\n    PushReadableStream,\n    SplitStringStream,\n    WritableStream,\n} from \"@yume-chan/stream-extra\";\n\nimport type { AdbScrcpyConnection } from \"./connection.js\";\nimport type { AdbScrcpyOptions } from \"./options/index.js\";\n\nconst NOOP = () => {\n    // no-op\n};\n\nfunction arrayToStream<T>(array: T[]): ReadableStream<T> {\n    return new PushReadableStream(async (controller) => {\n        for (const item of array) {\n            await controller.enqueue(item);\n        }\n    });\n}\n\nfunction concatStreams<T>(...streams: ReadableStream<T>[]): ReadableStream<T> {\n    return new PushReadableStream(async (controller) => {\n        for (const stream of streams) {\n            await stream.pipeTo(\n                new WritableStream({\n                    async write(chunk) {\n                        await controller.enqueue(chunk);\n                    },\n                })\n            );\n        }\n    });\n}\n\nexport class AdbScrcpyExitedError extends Error {\n    public output: string[];\n\n    public constructor(output: string[]) {\n        super(\"scrcpy server exited prematurely\");\n        this.output = output;\n    }\n}\n\ninterface AdbScrcpyClientInit {\n    options: AdbScrcpyOptions<object>;\n    process: AdbSubprocessProtocol;\n    stdout: ReadableStream<string>;\n\n    videoStream: ReadableStream<Uint8Array>;\n    audioStream: ReadableStream<Uint8Array> | undefined;\n    controlStream:\n        | ReadableWritablePair<Uint8Array, Consumable<Uint8Array>>\n        | undefined;\n}\n\nexport interface AdbScrcpyVideoStream {\n    stream: ReadableStream<ScrcpyMediaStreamPacket>;\n    metadata: ScrcpyVideoStreamMetadata;\n}\n\nexport interface AdbScrcpyAudioStreamSuccessMetadata\n    extends Omit<ScrcpyAudioStreamSuccessMetadata, \"stream\"> {\n    readonly stream: ReadableStream<ScrcpyMediaStreamPacket>;\n}\n\nexport type AdbScrcpyAudioStreamMetadata =\n    | ScrcpyAudioStreamDisabledMetadata\n    | ScrcpyAudioStreamErroredMetadata\n    | AdbScrcpyAudioStreamSuccessMetadata;\n\nexport class AdbScrcpyClient {\n    public static async pushServer(\n        adb: Adb,\n        file: ReadableStream<Consumable<Uint8Array>>,\n        filename = DEFAULT_SERVER_PATH\n    ) {\n        const sync = await adb.sync();\n        try {\n            await sync.write({\n                filename,\n                file,\n            });\n        } finally {\n            await sync.dispose();\n        }\n    }\n\n    public static async start(\n        adb: Adb,\n        path: string,\n        version: string,\n        options: AdbScrcpyOptions<object>\n    ) {\n        let connection: AdbScrcpyConnection | undefined;\n        let process: AdbSubprocessProtocol | undefined;\n\n        try {\n            try {\n                connection = options.createConnection(adb);\n                await connection.initialize();\n            } catch (e) {\n                if (e instanceof AdbReverseNotSupportedError) {\n                    // When reverse tunnel is not supported, try forward tunnel.\n                    options.tunnelForwardOverride = true;\n                    connection = options.createConnection(adb);\n                    await connection.initialize();\n                } else {\n                    connection = undefined;\n                    throw e;\n                }\n            }\n\n            process = await adb.subprocess.spawn(\n                [\n                    // cspell: disable-next-line\n                    `CLASSPATH=${path}`,\n                    \"app_process\",\n                    /* unused */ \"/\",\n                    \"com.genymobile.scrcpy.Server\",\n                    version,\n                    ...options.serialize(),\n                ],\n                {\n                    // Scrcpy server doesn't use stderr,\n                    // so disable Shell Protocol to simplify processing\n                    protocols: [AdbSubprocessNoneProtocol],\n                }\n            );\n\n            const stdout = process.stdout\n                .pipeThrough(new DecodeUtf8Stream())\n                .pipeThrough(new SplitStringStream(\"\\n\"));\n\n            // Read stdout, otherwise `process.exit` won't resolve.\n            const output: string[] = [];\n            const abortController = new AbortController();\n            const pipe = stdout\n                .pipeTo(\n                    new WritableStream({\n                        write(chunk) {\n                            output.push(chunk);\n                        },\n                    }),\n                    {\n                        signal: abortController.signal,\n                        preventCancel: true,\n                    }\n                )\n                .catch(NOOP);\n\n            const streams = await Promise.race([\n                process.exit.then(() => {\n                    throw new AdbScrcpyExitedError(output);\n                }),\n                connection.getStreams(),\n            ]);\n\n            abortController.abort();\n            await pipe;\n\n            return new AdbScrcpyClient({\n                options,\n                process,\n                stdout: concatStreams(arrayToStream(output), stdout),\n                videoStream: streams.video,\n                audioStream: streams.audio,\n                controlStream: streams.control,\n            });\n        } catch (e) {\n            await process?.kill();\n            throw e;\n        } finally {\n            connection?.dispose();\n        }\n    }\n\n    /**\n     * This method will modify the given `options`,\n     * so don't reuse it elsewhere.\n     */\n    public static async getEncoders(\n        adb: Adb,\n        path: string,\n        version: string,\n        options: AdbScrcpyOptions<object>\n    ): Promise<ScrcpyEncoder[]> {\n        options.setListEncoders();\n        return await options.getEncoders(adb, path, version);\n    }\n\n    /**\n     * This method will modify the given `options`,\n     * so don't reuse it elsewhere.\n     */\n    public static async getDisplays(\n        adb: Adb,\n        path: string,\n        version: string,\n        options: AdbScrcpyOptions<object>\n    ): Promise<ScrcpyDisplay[]> {\n        options.setListDisplays();\n        return await options.getDisplays(adb, path, version);\n    }\n\n    private _options: AdbScrcpyOptions<object>;\n    private _process: AdbSubprocessProtocol;\n\n    private _stdout: ReadableStream<string>;\n    public get stdout() {\n        return this._stdout;\n    }\n\n    public get exit() {\n        return this._process.exit;\n    }\n\n    private _screenWidth: number | undefined;\n    public get screenWidth() {\n        return this._screenWidth;\n    }\n\n    private _screenHeight: number | undefined;\n    public get screenHeight() {\n        return this._screenHeight;\n    }\n\n    private _videoStream: Promise<AdbScrcpyVideoStream>;\n    public get videoStream() {\n        return this._videoStream;\n    }\n\n    private _audioStream: Promise<AdbScrcpyAudioStreamMetadata> | undefined;\n    public get audioStream() {\n        return this._audioStream;\n    }\n\n    private _controlMessageWriter: ScrcpyControlMessageWriter | undefined;\n    public get controlMessageWriter() {\n        return this._controlMessageWriter;\n    }\n\n    private _deviceMessageStream:\n        | ReadableStream<ScrcpyDeviceMessage>\n        | undefined;\n    public get deviceMessageStream() {\n        return this._deviceMessageStream;\n    }\n\n    public constructor({\n        options,\n        process,\n        stdout,\n        videoStream,\n        audioStream,\n        controlStream,\n    }: AdbScrcpyClientInit) {\n        this._options = options;\n        this._process = process;\n        this._stdout = stdout;\n\n        this._videoStream = this.createVideoStream(videoStream);\n\n        this._audioStream = audioStream\n            ? this.createAudioStream(audioStream)\n            : undefined;\n\n        if (controlStream) {\n            this._controlMessageWriter = new ScrcpyControlMessageWriter(\n                controlStream.writable.getWriter(),\n                options\n            );\n            this._deviceMessageStream = controlStream.readable.pipeThrough(\n                new ScrcpyDeviceMessageDeserializeStream()\n            );\n        }\n    }\n\n    private async createVideoStream(initialStream: ReadableStream<Uint8Array>) {\n        const { stream, metadata } =\n            await this._options.parseVideoStreamMetadata(initialStream);\n\n        return {\n            stream: stream\n                .pipeThrough(this._options.createMediaStreamTransformer())\n                .pipeThrough(\n                    new InspectStream((packet) => {\n                        if (packet.type === \"configuration\") {\n                            switch (metadata.codec) {\n                                case ScrcpyVideoCodecId.H264: {\n                                    const { croppedWidth, croppedHeight } =\n                                        h264ParseConfiguration(packet.data);\n\n                                    this._screenWidth = croppedWidth;\n                                    this._screenHeight = croppedHeight;\n                                    break;\n                                }\n                                case ScrcpyVideoCodecId.H265: {\n                                    const { croppedWidth, croppedHeight } =\n                                        h265ParseConfiguration(packet.data);\n\n                                    this._screenWidth = croppedWidth;\n                                    this._screenHeight = croppedHeight;\n                                    break;\n                                }\n                            }\n                        }\n                    })\n                ),\n            metadata,\n        };\n    }\n\n    private async createAudioStream(\n        initialStream: ReadableStream<Uint8Array>\n    ): Promise<AdbScrcpyAudioStreamMetadata> {\n        const metadata = await this._options.parseAudioStreamMetadata(\n            initialStream\n        );\n\n        switch (metadata.type) {\n            case \"disabled\":\n            case \"errored\":\n                return metadata;\n            case \"success\":\n                return {\n                    ...metadata,\n                    stream: metadata.stream.pipeThrough(\n                        this._options.createMediaStreamTransformer()\n                    ),\n                };\n            default:\n                throw new Error(\n                    `Unexpected audio metadata type ${\n                        metadata[\"type\"] as unknown as string\n                    }`\n                );\n        }\n    }\n\n    public async close() {\n        await this._process.kill();\n    }\n}\n","import type { Adb } from \"@yume-chan/adb\";\nimport { AdbReverseNotSupportedError } from \"@yume-chan/adb\";\nimport { delay } from \"@yume-chan/async\";\nimport type { Disposable } from \"@yume-chan/event\";\nimport type {\n    Consumable,\n    ReadableStream,\n    ReadableStreamDefaultReader,\n    ReadableWritablePair,\n} from \"@yume-chan/stream-extra\";\nimport {\n    BufferedReadableStream,\n    TransformStream,\n} from \"@yume-chan/stream-extra\";\nimport type { ValueOrPromise } from \"@yume-chan/struct\";\n\nconst NOOP = () => {\n    // no-op\n};\n\nexport interface AdbScrcpyConnectionOptions {\n    scid: number;\n\n    /**\n     * Whether to create a control stream\n     */\n    control: boolean;\n\n    /**\n     * In forward tunnel mode, read a byte from video socket on start to detect connection issues\n     */\n    sendDummyByte: boolean;\n\n    audio: boolean;\n}\n\nexport const SCRCPY_SOCKET_NAME_PREFIX = \"scrcpy\";\n\nexport interface AdbScrcpyConnectionStreams {\n    video: ReadableStream<Uint8Array>;\n    audio: ReadableStream<Uint8Array> | undefined;\n    control:\n        | ReadableWritablePair<Uint8Array, Consumable<Uint8Array>>\n        | undefined;\n}\n\nexport abstract class AdbScrcpyConnection implements Disposable {\n    protected adb: Adb;\n\n    protected options: AdbScrcpyConnectionOptions;\n\n    protected socketName: string;\n\n    public constructor(adb: Adb, options: AdbScrcpyConnectionOptions) {\n        this.adb = adb;\n        this.options = options;\n        this.socketName = this.getSocketName();\n    }\n\n    public initialize(): ValueOrPromise<void> {\n        // do nothing\n    }\n\n    protected getSocketName(): string {\n        let socketName = \"localabstract:\" + SCRCPY_SOCKET_NAME_PREFIX;\n        if (this.options.scid !== undefined && this.options.scid >= 0) {\n            socketName += \"_\" + this.options.scid.toString(16).padStart(8, \"0\");\n        }\n        return socketName;\n    }\n\n    public abstract getStreams(): ValueOrPromise<AdbScrcpyConnectionStreams>;\n\n    public dispose(): void {\n        // do nothing\n    }\n}\n\nexport class AdbScrcpyForwardConnection extends AdbScrcpyConnection {\n    private _disposed = false;\n\n    private connect(): Promise<\n        ReadableWritablePair<Uint8Array, Consumable<Uint8Array>>\n    > {\n        return this.adb.createSocket(\"localabstract:scrcpy\");\n    }\n\n    private async connectAndRetry(): Promise<\n        ReadableWritablePair<Uint8Array, Consumable<Uint8Array>>\n    > {\n        for (let i = 0; !this._disposed && i < 100; i += 1) {\n            try {\n                return await this.connect();\n            } catch (e) {\n                await delay(100);\n            }\n        }\n        throw new Error(`Can't connect to server after 100 retries`);\n    }\n\n    private async connectVideoStream(): Promise<ReadableStream<Uint8Array>> {\n        const { readable: stream } = await this.connectAndRetry();\n        if (this.options.sendDummyByte) {\n            // Can't guarantee the stream will preserve message boundary\n            // so buffer the stream\n            const buffered = new BufferedReadableStream(stream);\n            await buffered.readExactly(1);\n            return buffered.release();\n        }\n        return stream;\n    }\n\n    public override async getStreams(): Promise<AdbScrcpyConnectionStreams> {\n        const video = await this.connectVideoStream();\n\n        const audio = this.options.audio\n            ? (await this.connectAndRetry()).readable\n            : undefined;\n\n        const control = this.options.control\n            ? await this.connectAndRetry()\n            : undefined;\n\n        return { video, audio, control };\n    }\n\n    public override dispose(): void {\n        super.dispose();\n        this._disposed = true;\n    }\n}\n\nexport class AdbScrcpyReverseConnection extends AdbScrcpyConnection {\n    private streams!: ReadableStreamDefaultReader<\n        ReadableWritablePair<Uint8Array, Consumable<Uint8Array>>\n    >;\n\n    private address!: string;\n\n    public override async initialize(): Promise<void> {\n        try {\n            // try to unbind first\n            await this.adb.reverse.remove(this.socketName);\n        } catch (e) {\n            if (e instanceof AdbReverseNotSupportedError) {\n                throw e;\n            }\n\n            // Ignore other errors when unbinding\n        }\n\n        const queue = new TransformStream<\n            ReadableWritablePair<Uint8Array, Consumable<Uint8Array>>,\n            ReadableWritablePair<Uint8Array, Consumable<Uint8Array>>\n        >();\n        this.streams = queue.readable.getReader();\n        const writer = queue.writable.getWriter();\n        this.address = await this.adb.reverse.add(\n            this.socketName,\n            // In Tango, `localAddress` can be any string,\n            // it only needs to uniquely identify the connection.\n            // So use `this.socketName` to let multiple Scrcpy start concurrently\n            this.socketName,\n            (socket) => {\n                void writer.write(socket);\n                return true;\n            }\n        );\n    }\n\n    private async accept(): Promise<\n        ReadableWritablePair<Uint8Array, Consumable<Uint8Array>>\n    > {\n        return (await this.streams.read()).value!;\n    }\n\n    public async getStreams(): Promise<AdbScrcpyConnectionStreams> {\n        const { readable: video } = await this.accept();\n\n        const audio = this.options.audio\n            ? (await this.accept()).readable\n            : undefined;\n\n        const control = this.options.control ? await this.accept() : undefined;\n\n        return { video, audio, control };\n    }\n\n    public override dispose() {\n        // Don't await this!\n        // `reverse.remove`'s response will never arrive\n        // before we read all pending data from `videoStream`\n        this.adb.reverse.remove(this.address).catch(NOOP);\n    }\n}\n","import type { Adb } from \"@yume-chan/adb\";\nimport type {\n    ScrcpyDisplay,\n    ScrcpyEncoder,\n    ScrcpyOptions,\n} from \"@yume-chan/scrcpy\";\nimport { ScrcpyOptionsBase } from \"@yume-chan/scrcpy\";\n\nimport type { AdbScrcpyConnection } from \"../connection.js\";\n\nexport interface AdbScrcpyOptions<T extends object> extends ScrcpyOptions<T> {\n    tunnelForwardOverride: boolean;\n\n    getEncoders(\n        adb: Adb,\n        path: string,\n        version: string\n    ): Promise<ScrcpyEncoder[]>;\n\n    getDisplays(\n        adb: Adb,\n        path: string,\n        version: string\n    ): Promise<ScrcpyDisplay[]>;\n\n    createConnection(adb: Adb): AdbScrcpyConnection;\n}\n\nexport abstract class AdbScrcpyOptionsBase<T extends object>\n    extends ScrcpyOptionsBase<T, ScrcpyOptions<T>>\n    implements AdbScrcpyOptions<T>\n{\n    public override get defaults(): Required<T> {\n        return this._base.defaults;\n    }\n\n    public tunnelForwardOverride = false;\n\n    public constructor(base: ScrcpyOptions<T>) {\n        super(base, base.value);\n    }\n\n    public serialize(): string[] {\n        return this._base.serialize();\n    }\n\n    public abstract getEncoders(\n        adb: Adb,\n        path: string,\n        version: string\n    ): Promise<ScrcpyEncoder[]>;\n\n    public abstract getDisplays(\n        adb: Adb,\n        path: string,\n        version: string\n    ): Promise<ScrcpyDisplay[]>;\n\n    public abstract createConnection(adb: Adb): AdbScrcpyConnection;\n}\n","import type { Adb } from \"@yume-chan/adb\";\nimport type {\n    ScrcpyDisplay,\n    ScrcpyEncoder,\n    ScrcpyOptionsInit1_16,\n} from \"@yume-chan/scrcpy\";\nimport { WritableStream } from \"@yume-chan/stream-extra\";\n\nimport { AdbScrcpyClient, AdbScrcpyExitedError } from \"../client.js\";\nimport type {\n    AdbScrcpyConnection,\n    AdbScrcpyConnectionOptions,\n} from \"../connection.js\";\nimport {\n    AdbScrcpyForwardConnection,\n    AdbScrcpyReverseConnection,\n} from \"../connection.js\";\n\nimport type { AdbScrcpyOptions } from \"./types.js\";\nimport { AdbScrcpyOptionsBase } from \"./types.js\";\n\nexport class AdbScrcpyOptions1_16 extends AdbScrcpyOptionsBase<ScrcpyOptionsInit1_16> {\n    public static createConnection(\n        adb: Adb,\n        connectionOptions: AdbScrcpyConnectionOptions,\n        tunnelForward: boolean\n    ): AdbScrcpyConnection {\n        if (tunnelForward) {\n            return new AdbScrcpyForwardConnection(adb, connectionOptions);\n        } else {\n            return new AdbScrcpyReverseConnection(adb, connectionOptions);\n        }\n    }\n\n    public static async getEncoders(\n        adb: Adb,\n        path: string,\n        version: string,\n        options: AdbScrcpyOptions<object>\n    ): Promise<ScrcpyEncoder[]> {\n        const client = await AdbScrcpyClient.start(adb, path, version, options);\n\n        const encoders: ScrcpyEncoder[] = [];\n        await client.stdout.pipeTo(\n            new WritableStream({\n                write: (line) => {\n                    const encoder = options.parseEncoder(line);\n                    if (encoder) {\n                        encoders.push(encoder);\n                    }\n                },\n            })\n        );\n\n        return encoders;\n    }\n\n    public static async getDisplays(\n        adb: Adb,\n        path: string,\n        version: string,\n        options: AdbScrcpyOptions<object>\n    ): Promise<ScrcpyDisplay[]> {\n        try {\n            // Server will exit before opening connections when an invalid display id was given.\n            const client = await AdbScrcpyClient.start(\n                adb,\n                path,\n                version,\n                options\n            );\n            await client.close();\n        } catch (e) {\n            if (e instanceof AdbScrcpyExitedError) {\n                const displays: ScrcpyDisplay[] = [];\n                for (const line of e.output) {\n                    const display = options.parseDisplay(line);\n                    if (display) {\n                        displays.push(display);\n                    }\n                }\n                return displays;\n            }\n        }\n\n        throw new Error(\"failed to get displays\");\n    }\n\n    public override getEncoders(\n        adb: Adb,\n        path: string,\n        version: string\n    ): Promise<ScrcpyEncoder[]> {\n        return AdbScrcpyOptions1_16.getEncoders(adb, path, version, this);\n    }\n\n    public override getDisplays(\n        adb: Adb,\n        path: string,\n        version: string\n    ): Promise<ScrcpyDisplay[]> {\n        return AdbScrcpyOptions1_16.getDisplays(adb, path, version, this);\n    }\n\n    public override createConnection(adb: Adb): AdbScrcpyConnection {\n        return AdbScrcpyOptions1_16.createConnection(\n            adb,\n            {\n                scid: -1,\n                // Old versions always have control stream no matter what the option is\n                // Pass `control: false` to `Connection` will disable the control stream\n                control: true,\n                sendDummyByte: true,\n                audio: false,\n            },\n            this.tunnelForwardOverride || this.value.tunnelForward\n        );\n    }\n}\n","import type { Adb } from \"@yume-chan/adb\";\nimport type {\n    ScrcpyDisplay,\n    ScrcpyEncoder,\n    ScrcpyOptionsInit1_22,\n} from \"@yume-chan/scrcpy\";\n\nimport type { AdbScrcpyConnection } from \"../connection.js\";\n\nimport { AdbScrcpyOptions1_16 } from \"./1_16.js\";\nimport { AdbScrcpyOptionsBase } from \"./types.js\";\n\nexport class AdbScrcpyOptions1_22 extends AdbScrcpyOptionsBase<ScrcpyOptionsInit1_22> {\n    public override getEncoders(\n        adb: Adb,\n        path: string,\n        version: string\n    ): Promise<ScrcpyEncoder[]> {\n        return AdbScrcpyOptions1_16.getEncoders(adb, path, version, this);\n    }\n\n    public override getDisplays(\n        adb: Adb,\n        path: string,\n        version: string\n    ): Promise<ScrcpyDisplay[]> {\n        return AdbScrcpyOptions1_16.getDisplays(adb, path, version, this);\n    }\n\n    public override createConnection(adb: Adb): AdbScrcpyConnection {\n        return AdbScrcpyOptions1_16.createConnection(\n            adb,\n            {\n                scid: -1,\n                control: this.value.control,\n                sendDummyByte: this.value.sendDummyByte,\n                audio: false,\n            },\n            this.tunnelForwardOverride || this.value.tunnelForward\n        );\n    }\n}\n","import type { Adb } from \"@yume-chan/adb\";\nimport type {\n    ScrcpyDisplay,\n    ScrcpyEncoder,\n    ScrcpyOptionsInit2_0,\n} from \"@yume-chan/scrcpy\";\n\nimport { AdbScrcpyClient, AdbScrcpyExitedError } from \"../client.js\";\nimport type { AdbScrcpyConnection } from \"../connection.js\";\n\nimport { AdbScrcpyOptions1_16 } from \"./1_16.js\";\nimport { AdbScrcpyOptionsBase } from \"./types.js\";\n\nexport class AdbScrcpyOptions2_0 extends AdbScrcpyOptionsBase<ScrcpyOptionsInit2_0> {\n    public override async getEncoders(\n        adb: Adb,\n        path: string,\n        version: string\n    ): Promise<ScrcpyEncoder[]> {\n        try {\n            const client = await AdbScrcpyClient.start(\n                adb,\n                path,\n                version,\n                this\n            );\n            await client.close();\n        } catch (e) {\n            if (e instanceof AdbScrcpyExitedError) {\n                const encoders: ScrcpyEncoder[] = [];\n                for (const line of e.output) {\n                    const encoder = this.parseEncoder(line);\n                    if (encoder) {\n                        encoders.push(encoder);\n                    }\n                }\n                return encoders;\n            }\n        }\n        throw new Error(\"Unexpected error\");\n    }\n\n    public override getDisplays(\n        adb: Adb,\n        path: string,\n        version: string\n    ): Promise<ScrcpyDisplay[]> {\n        return AdbScrcpyOptions1_16.getDisplays(adb, path, version, this);\n    }\n\n    public override createConnection(adb: Adb): AdbScrcpyConnection {\n        return AdbScrcpyOptions1_16.createConnection(\n            adb,\n            {\n                scid: this.value.scid.value,\n                control: this.value.control,\n                sendDummyByte: this.value.sendDummyByte,\n                audio: this.value.audio,\n            },\n            this.tunnelForwardOverride || this.value.tunnelForward\n        );\n    }\n}\n","import { AdbScrcpyOptions2_0 } from \"./2_0.js\";\n\nexport class AdbScrcpyOptionsLatest extends AdbScrcpyOptions2_0 {}\n","export * from \"./1_16.js\";\nexport * from \"./1_22.js\";\nexport * from \"./2_0.js\";\nexport * from \"./latest.js\";\nexport * from \"./types.js\";\n","export * from \"./client.js\";\nexport * from \"./connection.js\";\nexport * from \"./options/index.js\";\n","export abstract class PcmPlayer<T> {\n    protected abstract sourceName: string;\n\n    private _context: AudioContext;\n    private _worklet: AudioWorkletNode | undefined;\n    private _buffer: T[] = [];\n\n    constructor(sampleRate: number) {\n        this._context = new AudioContext({\n            latencyHint: \"interactive\",\n            sampleRate,\n        });\n    }\n\n    protected abstract feedCore(worklet: AudioWorkletNode, source: T): void;\n\n    public feed(source: T) {\n        if (this._worklet === undefined) {\n            this._buffer.push(source);\n            return;\n        }\n\n        this.feedCore(this._worklet, source);\n    }\n\n    public async start() {\n        await this._context.audioWorklet.addModule(\n            new URL(\"./worker.js\", import.meta.url)\n        );\n\n        this._worklet = new AudioWorkletNode(this._context, this.sourceName, {\n            numberOfInputs: 0,\n            numberOfOutputs: 1,\n            outputChannelCount: [2],\n        });\n        this._worklet.connect(this._context.destination);\n\n        for (const source of this._buffer) {\n            this.feedCore(this._worklet, source);\n        }\n        this._buffer.length = 0;\n    }\n\n    async stop() {\n        this._worklet?.disconnect();\n        this._worklet = undefined;\n\n        await this._context.close();\n    }\n}\n\nexport class Int16PcmPlayer extends PcmPlayer<Int16Array> {\n    protected override sourceName = \"int16-source-processor\";\n\n    protected override feedCore(worklet: AudioWorkletNode, source: Int16Array) {\n        if (\n            source.byteOffset !== 0 ||\n            source.byteLength !== source.buffer.byteLength\n        ) {\n            source = source.slice();\n        }\n\n        const { buffer } = source;\n        worklet.port.postMessage([buffer], [buffer]);\n    }\n}\n\nexport class Float32PcmPlayer extends PcmPlayer<Float32Array> {\n    protected override sourceName = \"float32-source-processor\";\n\n    protected override feedCore(\n        worklet: AudioWorkletNode,\n        source: Float32Array\n    ) {\n        if (\n            source.byteOffset !== 0 ||\n            source.byteLength !== source.buffer.byteLength\n        ) {\n            source = source.slice();\n        }\n\n        const { buffer } = source;\n        worklet.port.postMessage([buffer], [buffer]);\n    }\n}\n\nexport class Float32PlanerPcmPlayer extends PcmPlayer<Float32Array[]> {\n    protected override sourceName = \"float32-planer-source-processor\";\n\n    protected override feedCore(\n        worklet: AudioWorkletNode,\n        source: Float32Array[]\n    ) {\n        const buffers = source.map((channel) => {\n            if (\n                channel.byteOffset !== 0 ||\n                channel.byteLength !== channel.buffer.byteLength\n            ) {\n                channel = channel.slice();\n            }\n            return channel.buffer;\n        });\n        worklet.port.postMessage(buffers, buffers);\n    }\n}\n","export default '2.0';","import { ScrcpyMediaStreamPacket } from \"@yume-chan/scrcpy\";\nimport { TransformStream } from \"@yume-chan/stream-extra\";\n\nexport class AacDecodeStream extends TransformStream<\n    ScrcpyMediaStreamPacket,\n    Float32Array[]\n> {\n    constructor(config: AudioDecoderConfig) {\n        let decoder: AudioDecoder;\n        super({\n            start(controller) {\n                decoder = new AudioDecoder({\n                    error(error) {\n                        console.log(\"audio decoder error: \", error);\n                        controller.error(error);\n                    },\n                    output(output) {\n                        controller.enqueue(\n                            Array.from({ length: 2 }, (_, i) => {\n                                const options: AudioDataCopyToOptions = {\n                                    // AAC decodes to \"f32-planar\",\n                                    // converting to another format may cause audio glitches on Chrome.\n                                    format: \"f32-planar\",\n                                    planeIndex: i,\n                                };\n                                const buffer = new Float32Array(\n                                    output.allocationSize(options) /\n                                        Float32Array.BYTES_PER_ELEMENT\n                                );\n                                output.copyTo(buffer, options);\n                                return buffer;\n                            })\n                        );\n                    },\n                });\n            },\n            transform(chunk) {\n                switch (chunk.type) {\n                    case \"configuration\":\n                        // https://www.w3.org/TR/webcodecs-aac-codec-registration/#audiodecoderconfig-description\n                        // Raw AAC stream needs `description` to be set.\n                        decoder.configure({\n                            ...config,\n                            description: chunk.data,\n                        });\n                        break;\n                    case \"data\":\n                        decoder.decode(\n                            new EncodedAudioChunk({\n                                data: chunk.data,\n                                type: \"key\",\n                                timestamp: 0,\n                            })\n                        );\n                }\n            },\n            async flush() {\n                await decoder!.flush();\n            },\n        });\n    }\n}\n\nexport class OpusDecodeStream extends TransformStream<\n    ScrcpyMediaStreamPacket,\n    Float32Array\n> {\n    constructor(config: AudioDecoderConfig) {\n        let decoder: AudioDecoder;\n        super({\n            start(controller) {\n                decoder = new AudioDecoder({\n                    error(error) {\n                        console.log(\"audio decoder error: \", error);\n                        controller.error(error);\n                    },\n                    output(output) {\n                        // Opus decodes to \"f32\",\n                        // converting to another format may cause audio glitches on Chrome.\n                        const options: AudioDataCopyToOptions = {\n                            format: \"f32\",\n                            planeIndex: 0,\n                        };\n                        const buffer = new Float32Array(\n                            output.allocationSize(options) /\n                                Float32Array.BYTES_PER_ELEMENT\n                        );\n                        output.copyTo(buffer, options);\n                        controller.enqueue(buffer);\n                    },\n                });\n                decoder.configure(config);\n            },\n            transform(chunk) {\n                switch (chunk.type) {\n                    case \"configuration\":\n                        // configuration data is a opus-in-ogg identification header,\n                        // but stream data is raw opus,\n                        // so it has no use here.\n                        break;\n                    case \"data\":\n                        if (chunk.data.length === 0) {\n                            break;\n                        }\n                        decoder.decode(\n                            new EncodedAudioChunk({\n                                type: \"key\",\n                                timestamp: 0,\n                                data: chunk.data,\n                            })\n                        );\n                }\n            },\n            async flush() {\n                await decoder!.flush();\n            },\n        });\n    }\n}\n","import { EventEmitter } from \"@yume-chan/event\";\n\nconst SERVER_URL = new URL(\n    \"@yume-chan/scrcpy/bin/scrcpy-server?url\",\n    import.meta.url\n);\n\nclass FetchWithProgress {\n    public readonly promise: Promise<Uint8Array>;\n\n    private _downloaded = 0;\n    public get downloaded() {\n        return this._downloaded;\n    }\n\n    private _total = 0;\n    public get total() {\n        return this._total;\n    }\n\n    private progressEvent = new EventEmitter<\n        [download: number, total: number]\n    >();\n    public get onProgress() {\n        return this.progressEvent.event;\n    }\n\n    public constructor(url: string | URL) {\n        this.promise = this.fetch(url);\n    }\n\n    private async fetch(url: string | URL) {\n        const response = await window.fetch(url);\n        this._total = Number.parseInt(\n            response.headers.get(\"Content-Length\") ?? \"0\",\n            10\n        );\n        this.progressEvent.fire([this._downloaded, this._total]);\n\n        const reader = response.body!.getReader();\n        const chunks: Uint8Array[] = [];\n        while (true) {\n            const result = await reader.read();\n            if (result.done) {\n                break;\n            }\n            chunks.push(result.value);\n            this._downloaded += result.value.byteLength;\n            this.progressEvent.fire([this._downloaded, this._total]);\n        }\n\n        this._total = chunks.reduce(\n            (result, item) => result + item.byteLength,\n            0\n        );\n        const result = new Uint8Array(this._total);\n        let position = 0;\n        for (const chunk of chunks) {\n            result.set(chunk, position);\n            position += chunk.byteLength;\n        }\n        return result;\n    }\n}\n\nlet cachedValue: FetchWithProgress | undefined;\nexport function fetchServer(\n    onProgress?: (e: [downloaded: number, total: number]) => void\n) {\n    if (!cachedValue) {\n        cachedValue = new FetchWithProgress(SERVER_URL);\n        cachedValue.promise.catch((e) => {\n            cachedValue = undefined;\n        });\n    }\n\n    if (onProgress) {\n        cachedValue.onProgress(onProgress);\n        onProgress([cachedValue.downloaded, cachedValue.total]);\n    }\n\n    return cachedValue.promise;\n}\n","import { AdbScrcpyClient } from \"@yume-chan/adb-scrcpy\";\nimport { AoaHidDevice, HidKeyCode, HidKeyboard } from \"@yume-chan/aoa\";\nimport { Disposable } from \"@yume-chan/event\";\nimport {\n    AndroidKeyCode,\n    AndroidKeyEventAction,\n    AndroidKeyEventMeta,\n} from \"@yume-chan/scrcpy\";\n\nexport interface KeyboardInjector extends Disposable {\n    down(key: string): Promise<void>;\n    up(key: string): Promise<void>;\n    reset(): Promise<void>;\n}\n\nexport class ScrcpyKeyboardInjector implements KeyboardInjector {\n    private readonly client: AdbScrcpyClient;\n\n    private _controlLeft = false;\n    private _controlRight = false;\n    private _shiftLeft = false;\n    private _shiftRight = false;\n    private _altLeft = false;\n    private _altRight = false;\n    private _metaLeft = false;\n    private _metaRight = false;\n\n    private _capsLock = false;\n    private _numLock = true;\n\n    private _keys: Set<AndroidKeyCode> = new Set();\n\n    public constructor(client: AdbScrcpyClient) {\n        this.client = client;\n    }\n\n    private setModifier(keyCode: AndroidKeyCode, value: boolean) {\n        switch (keyCode) {\n            case AndroidKeyCode.ControlLeft:\n                this._controlLeft = value;\n                break;\n            case AndroidKeyCode.ControlRight:\n                this._controlRight = value;\n                break;\n            case AndroidKeyCode.ShiftLeft:\n                this._shiftLeft = value;\n                break;\n            case AndroidKeyCode.ShiftRight:\n                this._shiftRight = value;\n                break;\n            case AndroidKeyCode.AltLeft:\n                this._altLeft = value;\n                break;\n            case AndroidKeyCode.AltRight:\n                this._altRight = value;\n                break;\n            case AndroidKeyCode.MetaLeft:\n                this._metaLeft = value;\n                break;\n            case AndroidKeyCode.MetaRight:\n                this._metaRight = value;\n                break;\n            case AndroidKeyCode.CapsLock:\n                if (value) {\n                    this._capsLock = !this._capsLock;\n                }\n                break;\n            case AndroidKeyCode.NumLock:\n                if (value) {\n                    this._numLock = !this._numLock;\n                }\n                break;\n        }\n    }\n\n    private getMetaState(): AndroidKeyEventMeta {\n        let metaState = 0;\n        if (this._altLeft) {\n            metaState |=\n                AndroidKeyEventMeta.AltOn | AndroidKeyEventMeta.AltLeftOn;\n        }\n        if (this._altRight) {\n            metaState |=\n                AndroidKeyEventMeta.AltOn | AndroidKeyEventMeta.AltRightOn;\n        }\n        if (this._shiftLeft) {\n            metaState |=\n                AndroidKeyEventMeta.ShiftOn | AndroidKeyEventMeta.ShiftLeftOn;\n        }\n        if (this._shiftRight) {\n            metaState |=\n                AndroidKeyEventMeta.ShiftOn | AndroidKeyEventMeta.ShiftRightOn;\n        }\n        if (this._controlLeft) {\n            metaState |=\n                AndroidKeyEventMeta.CtrlOn | AndroidKeyEventMeta.CtrlLeftOn;\n        }\n        if (this._controlRight) {\n            metaState |=\n                AndroidKeyEventMeta.CtrlOn | AndroidKeyEventMeta.CtrlRightOn;\n        }\n        if (this._metaLeft) {\n            metaState |=\n                AndroidKeyEventMeta.MetaOn | AndroidKeyEventMeta.MetaLeftOn;\n        }\n        if (this._metaRight) {\n            metaState |=\n                AndroidKeyEventMeta.MetaOn | AndroidKeyEventMeta.MetaRightOn;\n        }\n        if (this._capsLock) {\n            metaState |= AndroidKeyEventMeta.CapsLockOn;\n        }\n        if (this._numLock) {\n            metaState |= AndroidKeyEventMeta.NumLockOn;\n        }\n        return metaState;\n    }\n\n    public async down(key: string): Promise<void> {\n        const keyCode = AndroidKeyCode[key as keyof typeof AndroidKeyCode];\n        if (!keyCode) {\n            return;\n        }\n\n        this.setModifier(keyCode, true);\n        this._keys.add(keyCode);\n        await this.client.controlMessageWriter?.injectKeyCode({\n            action: AndroidKeyEventAction.Down,\n            keyCode,\n            metaState: this.getMetaState(),\n            repeat: 0,\n        });\n    }\n\n    public async up(key: string): Promise<void> {\n        const keyCode = AndroidKeyCode[key as keyof typeof AndroidKeyCode];\n        if (!keyCode) {\n            return;\n        }\n\n        this.setModifier(keyCode, false);\n        this._keys.delete(keyCode);\n        await this.client.controlMessageWriter?.injectKeyCode({\n            action: AndroidKeyEventAction.Up,\n            keyCode,\n            metaState: this.getMetaState(),\n            repeat: 0,\n        });\n    }\n\n    public async reset(): Promise<void> {\n        this._controlLeft = false;\n        this._controlRight = false;\n        this._shiftLeft = false;\n        this._shiftRight = false;\n        this._altLeft = false;\n        this._altRight = false;\n        this._metaLeft = false;\n        this._metaRight = false;\n        for (const key of this._keys) {\n            this.up(AndroidKeyCode[key]);\n        }\n        this._keys.clear();\n    }\n\n    public dispose(): void {\n        // do nothing\n    }\n}\n\nexport class AoaKeyboardInjector implements KeyboardInjector {\n    public static async register(\n        device: USBDevice\n    ): Promise<AoaKeyboardInjector> {\n        const keyboard = await AoaHidDevice.register(\n            device,\n            0,\n            HidKeyboard.DESCRIPTOR\n        );\n        return new AoaKeyboardInjector(keyboard);\n    }\n\n    private readonly aoaKeyboard: AoaHidDevice;\n    private readonly hidKeyboard = new HidKeyboard();\n\n    public constructor(aoaKeyboard: AoaHidDevice) {\n        this.aoaKeyboard = aoaKeyboard;\n    }\n\n    public async down(key: string): Promise<void> {\n        const keyCode = HidKeyCode[key as keyof typeof HidKeyCode];\n        if (!keyCode) {\n            return;\n        }\n\n        this.hidKeyboard.down(keyCode);\n        await this.aoaKeyboard.sendInputReport(\n            this.hidKeyboard.serializeInputReport()\n        );\n    }\n\n    public async up(key: string): Promise<void> {\n        const keyCode = HidKeyCode[key as keyof typeof HidKeyCode];\n        if (!keyCode) {\n            return;\n        }\n\n        this.hidKeyboard.up(keyCode);\n        await this.aoaKeyboard.sendInputReport(\n            this.hidKeyboard.serializeInputReport()\n        );\n    }\n\n    public async reset(): Promise<void> {\n        this.hidKeyboard.reset();\n        await this.aoaKeyboard.sendInputReport(\n            this.hidKeyboard.serializeInputReport()\n        );\n    }\n\n    public async dispose(): Promise<void> {\n        await this.aoaKeyboard.unregister();\n    }\n}\n","import { PromiseResolver } from \"@yume-chan/async\";\nimport { AutoDisposable, EventEmitter } from \"@yume-chan/event\";\nimport type { Disposable } from \"@yume-chan/event\";\n\nlet worker: Worker | undefined;\nlet workerReady = false;\nconst pendingResolvers: PromiseResolver<TinyH264Wrapper>[] = [];\nlet streamId = 0;\n\nexport interface PictureReadyEventArgs {\n    renderStateId: number;\n\n    width: number;\n\n    height: number;\n\n    data: ArrayBuffer;\n}\n\nconst PICTURE_READY_SUBSCRIPTIONS = new Map<\n    number,\n    (e: PictureReadyEventArgs) => void\n>();\n\nfunction subscribePictureReady(\n    streamId: number,\n    handler: (e: PictureReadyEventArgs) => void\n): Disposable {\n    PICTURE_READY_SUBSCRIPTIONS.set(streamId, handler);\n\n    return {\n        dispose() {\n            PICTURE_READY_SUBSCRIPTIONS.delete(streamId);\n        },\n    };\n}\n\nexport class TinyH264Wrapper extends AutoDisposable {\n    public readonly streamId: number;\n\n    private readonly pictureReadyEvent =\n        new EventEmitter<PictureReadyEventArgs>();\n    public get onPictureReady() {\n        return this.pictureReadyEvent.event;\n    }\n\n    public constructor(streamId: number) {\n        super();\n\n        this.streamId = streamId;\n        this.addDisposable(\n            subscribePictureReady(streamId, this.handlePictureReady)\n        );\n    }\n\n    private handlePictureReady = (e: PictureReadyEventArgs) => {\n        this.pictureReadyEvent.fire(e);\n    };\n\n    public feed(data: ArrayBuffer) {\n        worker!.postMessage(\n            {\n                type: \"decode\",\n                data: data,\n                offset: 0,\n                length: data.byteLength,\n                renderStateId: this.streamId,\n            },\n            [data]\n        );\n    }\n\n    public override dispose() {\n        super.dispose();\n        worker!.postMessage({\n            type: \"release\",\n            renderStateId: this.streamId,\n        });\n    }\n}\n\ninterface TinyH264MessageBase {\n    type: string;\n}\n\ninterface TinyH264DecoderReadyMessage extends TinyH264MessageBase {\n    type: \"decoderReady\";\n}\n\ninterface TinyH264PictureReadyMessage\n    extends TinyH264MessageBase,\n        PictureReadyEventArgs {\n    type: \"pictureReady\";\n}\n\ntype TinyH264Message =\n    | TinyH264DecoderReadyMessage\n    | TinyH264PictureReadyMessage;\n\nexport function createTinyH264Wrapper(): Promise<TinyH264Wrapper> {\n    if (!worker) {\n        worker = new Worker(new URL(\"./worker.js\", import.meta.url));\n        worker.addEventListener(\n            \"message\",\n            ({ data }: MessageEvent<TinyH264Message>) => {\n                switch (data.type) {\n                    case \"decoderReady\":\n                        workerReady = true;\n                        for (const resolver of pendingResolvers) {\n                            resolver.resolve(new TinyH264Wrapper(streamId));\n                            streamId += 1;\n                        }\n                        pendingResolvers.length = 0;\n                        break;\n                    case \"pictureReady\":\n                        PICTURE_READY_SUBSCRIPTIONS.get(data.renderStateId)?.(\n                            data\n                        );\n                        break;\n                }\n            }\n        );\n    }\n\n    if (!workerReady) {\n        const resolver = new PromiseResolver<TinyH264Wrapper>();\n        pendingResolvers.push(resolver);\n        return resolver.promise;\n    }\n\n    const decoder = new TinyH264Wrapper(streamId);\n    streamId += 1;\n    return Promise.resolve(decoder);\n}\n","import { PromiseResolver } from \"@yume-chan/async\";\nimport type { ScrcpyMediaStreamPacket } from \"@yume-chan/scrcpy\";\nimport {\n    AndroidAvcLevel,\n    AndroidAvcProfile,\n    h264ParseConfiguration,\n} from \"@yume-chan/scrcpy\";\nimport { WritableStream } from \"@yume-chan/stream-extra\";\nimport type { default as YuvBuffer } from \"yuv-buffer\";\nimport type { default as YuvCanvas } from \"yuv-canvas\";\n\nimport type {\n    ScrcpyVideoDecoder,\n    ScrcpyVideoDecoderCapability,\n} from \"./types.js\";\nimport type { TinyH264Wrapper } from \"./wrapper.js\";\nimport { createTinyH264Wrapper } from \"./wrapper.js\";\n\nconst NOOP = () => {\n    // no-op\n};\n\nlet cachedInitializePromise:\n    | Promise<{ YuvBuffer: typeof YuvBuffer; YuvCanvas: typeof YuvCanvas }>\n    | undefined;\nfunction initialize() {\n    if (!cachedInitializePromise) {\n        cachedInitializePromise = Promise.all([\n            import(\"yuv-buffer\"),\n            import(\"yuv-canvas\"),\n        ]).then(([YuvBuffer, { default: YuvCanvas }]) => ({\n            YuvBuffer,\n            YuvCanvas,\n        }));\n    }\n\n    return cachedInitializePromise;\n}\n\nexport class TinyH264Decoder implements ScrcpyVideoDecoder {\n    public static readonly capabilities: Record<\n        string,\n        ScrcpyVideoDecoderCapability\n    > = {\n        h264: {\n            maxProfile: AndroidAvcProfile.Baseline,\n            maxLevel: AndroidAvcLevel.Level4,\n        },\n    };\n\n    private _renderer: HTMLCanvasElement;\n    public get renderer() {\n        return this._renderer;\n    }\n\n    private _frameRendered = 0;\n    public get frameRendered() {\n        return this._frameRendered;\n    }\n\n    private _frameSkipped = 0;\n    public get frameSkipped() {\n        return this._frameSkipped;\n    }\n\n    private _writable: WritableStream<ScrcpyMediaStreamPacket>;\n    public get writable() {\n        return this._writable;\n    }\n\n    private _yuvCanvas: YuvCanvas | undefined;\n    private _initializer: PromiseResolver<TinyH264Wrapper> | undefined;\n\n    public constructor() {\n        void initialize();\n\n        this._renderer = document.createElement(\"canvas\");\n\n        this._writable = new WritableStream<ScrcpyMediaStreamPacket>({\n            write: async (packet) => {\n                switch (packet.type) {\n                    case \"configuration\":\n                        this.configure(packet.data).catch(NOOP);\n                        break;\n                    case \"data\": {\n                        if (!this._initializer) {\n                            throw new Error(\"Decoder not configured\");\n                        }\n\n                        const wrapper = await this._initializer.promise;\n                        wrapper.feed(packet.data.slice().buffer);\n                        break;\n                    }\n                }\n            },\n        });\n    }\n\n    private async configure(data: Uint8Array) {\n        this.dispose();\n\n        this._initializer = new PromiseResolver<TinyH264Wrapper>();\n        const { YuvBuffer, YuvCanvas } = await initialize();\n\n        if (!this._yuvCanvas) {\n            this._yuvCanvas = YuvCanvas.attach(this._renderer);\n        }\n\n        const {\n            encodedWidth,\n            encodedHeight,\n            croppedWidth,\n            croppedHeight,\n            cropLeft,\n            cropTop,\n        } = h264ParseConfiguration(data);\n\n        // H.264 Baseline profile only supports YUV 420 pixel format\n        const chromaWidth = encodedWidth / 2;\n        const chromaHeight = encodedHeight / 2;\n\n        // YUVCanvas will set canvas size when format changes\n        const format = YuvBuffer.format({\n            width: encodedWidth,\n            height: encodedHeight,\n            chromaWidth,\n            chromaHeight,\n            cropLeft: cropLeft,\n            cropTop: cropTop,\n            cropWidth: croppedWidth,\n            cropHeight: croppedHeight,\n            displayWidth: croppedWidth,\n            displayHeight: croppedHeight,\n        });\n\n        const wrapper = await createTinyH264Wrapper();\n        this._initializer.resolve(wrapper);\n\n        const uPlaneOffset = encodedWidth * encodedHeight;\n        const vPlaneOffset = uPlaneOffset + chromaWidth * chromaHeight;\n        wrapper.onPictureReady(({ data }) => {\n            this._frameRendered += 1;\n            const array = new Uint8Array(data);\n            const frame = YuvBuffer.frame(\n                format,\n                YuvBuffer.lumaPlane(format, array, encodedWidth, 0),\n                YuvBuffer.chromaPlane(format, array, chromaWidth, uPlaneOffset),\n                YuvBuffer.chromaPlane(format, array, chromaWidth, vPlaneOffset)\n            );\n            this._yuvCanvas!.drawFrame(frame);\n        });\n\n        wrapper.feed(data.slice().buffer);\n    }\n\n    public dispose(): void {\n        this._initializer?.promise\n            .then((wrapper) => wrapper.dispose())\n            .catch(NOOP);\n        this._initializer = undefined;\n    }\n}\n","export * from \"./decoder.js\";\nexport * from \"./types.js\";\nexport * from \"./wrapper.js\";\n","import {\n    Dropdown,\n    IDropdownOption,\n    Icon,\n    IconButton,\n    Position,\n    SpinButton,\n    Stack,\n    TextField,\n    Toggle,\n    TooltipHost,\n} from \"@fluentui/react\";\nimport { makeStyles } from \"@griffel/react\";\nimport { AdbScrcpyClient, AdbScrcpyOptionsLatest } from \"@yume-chan/adb-scrcpy\";\nimport {\n    DEFAULT_SERVER_PATH,\n    ScrcpyDisplay,\n    ScrcpyEncoder,\n    ScrcpyLogLevel,\n    ScrcpyOptionsInitLatest,\n    ScrcpyOptionsLatest,\n    ScrcpyVideoOrientation,\n} from \"@yume-chan/scrcpy\";\nimport {\n    ScrcpyVideoDecoderConstructor,\n    TinyH264Decoder,\n} from \"@yume-chan/scrcpy-decoder-tinyh264\";\nimport SCRCPY_SERVER_VERSION from \"@yume-chan/scrcpy/bin/version\";\nimport {\n    autorun,\n    computed,\n    makeAutoObservable,\n    observable,\n    runInAction,\n} from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { GLOBAL_STATE } from \"../../state\";\nimport { Icons } from \"../../utils\";\nimport { STATE } from \"./state\";\n\nexport type Settings = ScrcpyOptionsInitLatest;\n\nexport interface ClientSettings {\n    turnScreenOff?: boolean;\n    decoder?: string;\n    ignoreDecoderCodecArgs?: boolean;\n}\n\nexport type SettingKeys = keyof (Settings & ClientSettings);\n\nexport interface SettingDefinitionBase {\n    group: \"settings\" | \"clientSettings\";\n    key: SettingKeys;\n    type: string;\n    label: string;\n    labelExtra?: JSX.Element;\n    description?: string;\n}\n\nexport interface TextSettingDefinition extends SettingDefinitionBase {\n    type: \"text\";\n    placeholder?: string;\n}\n\nexport interface DropdownSettingDefinition extends SettingDefinitionBase {\n    type: \"dropdown\";\n    placeholder?: string;\n    options: IDropdownOption[];\n}\n\nexport interface ToggleSettingDefinition extends SettingDefinitionBase {\n    type: \"toggle\";\n    disabled?: boolean;\n}\n\nexport interface NumberSettingDefinition extends SettingDefinitionBase {\n    type: \"number\";\n    min?: number;\n    max?: number;\n    step?: number;\n}\n\nexport type SettingDefinition =\n    | TextSettingDefinition\n    | DropdownSettingDefinition\n    | ToggleSettingDefinition\n    | NumberSettingDefinition;\n\ninterface SettingItemProps {\n    definition: SettingDefinition;\n    value: any;\n    onChange: (definition: SettingDefinition, value: any) => void;\n}\n\nconst useClasses = makeStyles({\n    labelRight: {\n        marginLeft: \"4px\",\n    },\n    item: {\n        width: \"100%\",\n        maxWidth: \"300px\",\n    },\n});\n\nexport const SettingItem = observer(function SettingItem({\n    definition,\n    value,\n    onChange,\n}: SettingItemProps) {\n    const classes = useClasses();\n\n    let label: JSX.Element = (\n        <Stack horizontal verticalAlign=\"center\">\n            <span>{definition.label}</span>\n            {!!definition.description && (\n                <TooltipHost content={definition.description}>\n                    <Icon\n                        className={classes.labelRight}\n                        iconName={Icons.Info}\n                    />\n                </TooltipHost>\n            )}\n            {definition.labelExtra}\n        </Stack>\n    );\n\n    switch (definition.type) {\n        case \"text\":\n            return (\n                <TextField\n                    className={classes.item}\n                    label={label as any}\n                    placeholder={definition.placeholder}\n                    value={value}\n                    onChange={(e, value) => onChange(definition, value)}\n                />\n            );\n        case \"dropdown\":\n            return (\n                <Dropdown\n                    className={classes.item}\n                    label={label as any}\n                    options={definition.options}\n                    placeholder={definition.placeholder}\n                    selectedKey={value}\n                    onChange={(e, option) => onChange(definition, option!.key)}\n                />\n            );\n        case \"toggle\":\n            return (\n                <Toggle\n                    label={label}\n                    checked={value}\n                    disabled={definition.disabled}\n                    onChange={(e, checked) => onChange(definition, checked)}\n                />\n            );\n        case \"number\":\n            return (\n                <SpinButton\n                    className={classes.item}\n                    label={definition.label}\n                    labelPosition={Position.top}\n                    min={definition.min}\n                    max={definition.max}\n                    step={definition.step}\n                    value={value.toString()}\n                    onChange={(e, value) =>\n                        onChange(definition, Number.parseInt(value!, 10))\n                    }\n                />\n            );\n    }\n});\n\nexport interface DecoderDefinition {\n    key: string;\n    name: string;\n    Constructor: ScrcpyVideoDecoderConstructor;\n}\n\nexport const SETTING_STATE = makeAutoObservable(\n    {\n        displays: [] as ScrcpyDisplay[],\n        encoders: [] as ScrcpyEncoder[],\n        decoders: [\n            {\n                key: \"tinyh264\",\n                name: \"TinyH264 (Software)\",\n                Constructor: TinyH264Decoder,\n            },\n        ] as DecoderDefinition[],\n\n        settings: {\n            maxSize: 1080,\n            videoBitRate: 4_000_000,\n            videoCodec: \"h264\",\n            lockVideoOrientation: ScrcpyVideoOrientation.Unlocked,\n            displayId: 0,\n            crop: \"\",\n            powerOn: true,\n            audio: true,\n            audioCodec: \"aac\",\n        } as Settings,\n\n        clientSettings: {} as ClientSettings,\n    },\n    {\n        decoders: observable.shallow,\n        settings: observable.deep,\n        clientSettings: observable.deep,\n    }\n);\n\nautorun(() => {\n    if (GLOBAL_STATE.device) {\n        runInAction(() => {\n            SETTING_STATE.encoders = [];\n            SETTING_STATE.displays = [];\n            SETTING_STATE.settings.displayId = undefined;\n        });\n    }\n});\n\nautorun(() => {\n    SETTING_STATE.clientSettings.decoder = SETTING_STATE.decoders[0].key;\n});\n\nexport const SETTING_DEFINITIONS = computed(() => {\n    const result: SettingDefinition[] = [];\n\n    result.push(\n        {\n            group: \"settings\",\n            key: \"powerOn\",\n            type: \"toggle\",\n            label: \"Wake device up on start\",\n        },\n        {\n            group: \"clientSettings\",\n            key: \"turnScreenOff\",\n            type: \"toggle\",\n            label: \"Turn screen off during mirroring\",\n        },\n        {\n            group: \"settings\",\n            key: \"stayAwake\",\n            type: \"toggle\",\n            label: \"Stay awake during mirroring (if plugged in)\",\n        },\n        {\n            group: \"settings\",\n            key: \"powerOffOnClose\",\n            type: \"toggle\",\n            label: \"Turn device off on stop\",\n        }\n    );\n\n    result.push({\n        group: \"settings\",\n        key: \"displayId\",\n        type: \"dropdown\",\n        label: \"Display\",\n        placeholder: \"Press refresh to update available displays\",\n        labelExtra: (\n            <IconButton\n                iconProps={{ iconName: Icons.ArrowClockwise }}\n                disabled={!GLOBAL_STATE.device}\n                text=\"Refresh\"\n                onClick={async () => {\n                    try {\n                        await STATE.pushServer();\n\n                        const displays = await AdbScrcpyClient.getDisplays(\n                            GLOBAL_STATE.device!,\n                            DEFAULT_SERVER_PATH,\n                            SCRCPY_SERVER_VERSION,\n                            new AdbScrcpyOptionsLatest(\n                                new ScrcpyOptionsLatest({\n                                    logLevel: ScrcpyLogLevel.Debug,\n                                })\n                            )\n                        );\n\n                        runInAction(() => {\n                            SETTING_STATE.displays = displays;\n                            if (\n                                !SETTING_STATE.settings.displayId ||\n                                !SETTING_STATE.displays.some(\n                                    (x) =>\n                                        x.id ===\n                                        SETTING_STATE.settings.displayId\n                                )\n                            ) {\n                                SETTING_STATE.settings.displayId =\n                                    SETTING_STATE.displays[0]?.id;\n                            }\n                        });\n                    } catch (e: any) {\n                        GLOBAL_STATE.showErrorDialog(e);\n                    }\n                }}\n            />\n        ),\n        options: SETTING_STATE.displays.map((item) => ({\n            key: item.id,\n            text: `${item.id}${item.resolution ? ` (${item.resolution})` : \"\"}`,\n        })),\n    });\n\n    result.push({\n        group: \"settings\",\n        key: \"crop\",\n        type: \"text\",\n        label: \"Crop\",\n        placeholder: \"W:H:X:Y\",\n    });\n\n    result.push(\n        {\n            group: \"settings\",\n            key: \"maxSize\",\n            type: \"number\",\n            label: \"Max Resolution (longer side, 0 = unlimited)\",\n            min: 0,\n            max: 2560,\n            step: 50,\n        },\n        {\n            group: \"settings\",\n            key: \"videoBitRate\",\n            type: \"number\",\n            label: \"Max Video Bitrate (bps)\",\n            min: 100,\n            max: 100_000_000,\n            step: 100,\n        },\n        {\n            group: \"settings\",\n            key: \"videoCodec\",\n            type: \"dropdown\",\n            label: \"Video Codec\",\n            options: [\n                {\n                    key: \"h264\",\n                    text: \"H.264\",\n                },\n                {\n                    key: \"h265\",\n                    text: \"H.265\",\n                },\n            ],\n        },\n        {\n            group: \"settings\",\n            key: \"videoEncoder\",\n            type: \"dropdown\",\n            label: \"Video Encoder\",\n            placeholder:\n                SETTING_STATE.encoders.length === 0\n                    ? \"Press refresh button to update encoder list\"\n                    : \"(default)\",\n            labelExtra: (\n                <IconButton\n                    iconProps={{ iconName: Icons.ArrowClockwise }}\n                    disabled={!GLOBAL_STATE.device}\n                    text=\"Refresh\"\n                    onClick={async () => {\n                        try {\n                            await STATE.pushServer();\n\n                            const encoders = await AdbScrcpyClient.getEncoders(\n                                GLOBAL_STATE.device!,\n                                DEFAULT_SERVER_PATH,\n                                SCRCPY_SERVER_VERSION,\n                                new AdbScrcpyOptionsLatest(\n                                    new ScrcpyOptionsLatest({\n                                        logLevel: ScrcpyLogLevel.Debug,\n                                    })\n                                )\n                            );\n\n                            runInAction(() => {\n                                SETTING_STATE.encoders = encoders;\n                            });\n                        } catch (e: any) {\n                            GLOBAL_STATE.showErrorDialog(e);\n                        }\n                    }}\n                />\n            ),\n            options: SETTING_STATE.encoders\n                .filter(\n                    (item) =>\n                        item.type === \"video\" &&\n                        (!item.codec ||\n                            item.codec === SETTING_STATE.settings.videoCodec!)\n                )\n                .map((item) => ({\n                    key: item.name,\n                    text: item.name,\n                })),\n        }\n    );\n\n    result.push({\n        group: \"settings\",\n        key: \"lockVideoOrientation\",\n        type: \"dropdown\",\n        label: \"Lock Video Orientation\",\n        options: [\n            {\n                key: ScrcpyVideoOrientation.Unlocked,\n                text: \"Unlocked\",\n            },\n            {\n                key: ScrcpyVideoOrientation.Initial,\n                text: \"Current\",\n            },\n            {\n                key: ScrcpyVideoOrientation.Portrait,\n                text: \"Portrait\",\n            },\n            {\n                key: ScrcpyVideoOrientation.Landscape,\n                text: \"Landscape\",\n            },\n            {\n                key: ScrcpyVideoOrientation.PortraitFlipped,\n                text: \"Portrait (Flipped)\",\n            },\n            {\n                key: ScrcpyVideoOrientation.LandscapeFlipped,\n                text: \"Landscape (Flipped)\",\n            },\n        ],\n    });\n\n    if (SETTING_STATE.decoders.length > 1) {\n        result.push({\n            group: \"clientSettings\",\n            key: \"decoder\",\n            type: \"dropdown\",\n            label: \"Video Decoder\",\n            options: SETTING_STATE.decoders.map((item) => ({\n                key: item.key,\n                text: item.name,\n                data: item,\n            })),\n        });\n    }\n\n    result.push({\n        group: \"clientSettings\",\n        key: \"ignoreDecoderCodecArgs\",\n        type: \"toggle\",\n        label: `Ignore video decoder's codec options`,\n        description: `Some decoders don't support all H.264 profile/levels, so they request the device to encode at their highest-supported codec. However, some super old devices may not support that codec so their encoders will fail to start. Use this option to let device choose the codec to be used.`,\n    });\n\n    result.push(\n        {\n            group: \"settings\",\n            key: \"audio\",\n            type: \"toggle\",\n            label: \"Forward Audio (Requires Android 11)\",\n        },\n        {\n            group: \"settings\",\n            key: \"audioCodec\",\n            type: \"dropdown\",\n            label: \"Audio Codec\",\n            options: [\n                {\n                    key: \"raw\",\n                    text: \"Raw\",\n                },\n                {\n                    key: \"aac\",\n                    text: \"AAC\",\n                },\n                {\n                    key: \"opus\",\n                    text: \"Opus\",\n                },\n            ],\n        },\n        {\n            group: \"settings\",\n            key: \"audioEncoder\",\n            type: \"dropdown\",\n            placeholder:\n                SETTING_STATE.encoders.length === 0\n                    ? \"Press refresh button to update encoder list\"\n                    : \"(default)\",\n            label: \"Audio Encoder\",\n            labelExtra: (\n                <IconButton\n                    iconProps={{ iconName: Icons.ArrowClockwise }}\n                    disabled={!GLOBAL_STATE.device}\n                    text=\"Refresh\"\n                    onClick={async () => {\n                        try {\n                            await STATE.pushServer();\n\n                            const encoders = await AdbScrcpyClient.getEncoders(\n                                GLOBAL_STATE.device!,\n                                DEFAULT_SERVER_PATH,\n                                SCRCPY_SERVER_VERSION,\n                                new AdbScrcpyOptionsLatest(\n                                    new ScrcpyOptionsLatest({\n                                        logLevel: ScrcpyLogLevel.Debug,\n                                    })\n                                )\n                            );\n\n                            runInAction(() => {\n                                SETTING_STATE.encoders = encoders;\n                            });\n                        } catch (e: any) {\n                            GLOBAL_STATE.showErrorDialog(e);\n                        }\n                    }}\n                />\n            ),\n            options: SETTING_STATE.encoders\n                .filter(\n                    (x) =>\n                        x.type === \"audio\" &&\n                        x.codec === SETTING_STATE.settings.audioCodec\n                )\n                .map((item) => ({\n                    key: item.name,\n                    text: item.name,\n                })),\n        }\n    );\n\n    return result;\n});\n\nautorun(() => {\n    if (SETTING_STATE.encoders.length === 0) {\n        SETTING_STATE.settings.videoEncoder = \"\";\n        SETTING_STATE.settings.audioEncoder = \"\";\n        return;\n    }\n\n    const encodersForCurrentVideoCodec = SETTING_STATE.encoders.filter(\n        (item) =>\n            item.type === \"video\" &&\n            item.codec === SETTING_STATE.settings.videoCodec\n    );\n    if (\n        SETTING_STATE.settings.videoEncoder &&\n        encodersForCurrentVideoCodec.every(\n            (item) => item.name !== SETTING_STATE.settings.videoEncoder\n        )\n    ) {\n        SETTING_STATE.settings.videoEncoder = \"\";\n    }\n\n    const encodersForCurrentAudioCodec = SETTING_STATE.encoders.filter(\n        (item) =>\n            item.type === \"audio\" &&\n            item.codec === SETTING_STATE.settings.audioCodec\n    );\n    if (\n        SETTING_STATE.settings.audioEncoder &&\n        encodersForCurrentAudioCodec.every(\n            (item) => item.name !== SETTING_STATE.settings.audioEncoder\n        )\n    ) {\n        SETTING_STATE.settings.audioEncoder = \"\";\n    }\n});\n","import { ADB_SYNC_MAX_PACKET_SIZE } from \"@yume-chan/adb\";\nimport { AdbWebUsbBackend } from \"@yume-chan/adb-backend-webusb\";\nimport { AdbScrcpyClient, AdbScrcpyOptionsLatest } from \"@yume-chan/adb-scrcpy\";\nimport {\n    Float32PcmPlayer,\n    Float32PlanerPcmPlayer,\n    Int16PcmPlayer,\n    PcmPlayer,\n} from \"@yume-chan/pcm-player\";\nimport {\n    AndroidScreenPowerMode,\n    CodecOptions,\n    DEFAULT_SERVER_PATH,\n    ScrcpyAudioCodec,\n    ScrcpyDeviceMessageType,\n    ScrcpyHoverHelper,\n    ScrcpyInstanceId,\n    ScrcpyLogLevel,\n    ScrcpyMediaStreamPacket,\n    ScrcpyOptionsLatest,\n    ScrcpyVideoCodecId,\n    clamp,\n    h264ParseConfiguration,\n    h265ParseConfiguration,\n} from \"@yume-chan/scrcpy\";\nimport { ScrcpyVideoDecoder } from \"@yume-chan/scrcpy-decoder-tinyh264\";\nimport SCRCPY_SERVER_VERSION from \"@yume-chan/scrcpy/bin/version\";\nimport {\n    Consumable,\n    DistributionStream,\n    InspectStream,\n    ReadableStream,\n    WritableStream,\n} from \"@yume-chan/stream-extra\";\nimport { action, autorun, makeAutoObservable, runInAction } from \"mobx\";\nimport { GLOBAL_STATE } from \"../../state\";\nimport { ProgressStream } from \"../../utils\";\nimport { AacDecodeStream, OpusDecodeStream } from \"./audio-decode-stream\";\nimport { fetchServer } from \"./fetch-server\";\nimport {\n    AoaKeyboardInjector,\n    KeyboardInjector,\n    ScrcpyKeyboardInjector,\n} from \"./input\";\nimport { MatroskaMuxingRecorder, RECORD_STATE } from \"./recorder\";\nimport { SETTING_STATE } from \"./settings\";\n\nconst NOOP = () => {\n    // no-op\n};\n\nexport class ScrcpyPageState {\n    running = false;\n\n    fullScreenContainer: HTMLDivElement | null = null;\n    rendererContainer: HTMLDivElement | null = null;\n\n    isFullScreen = false;\n\n    logVisible = false;\n    log: string[] = [];\n    demoModeVisible = false;\n    navigationBarVisible = true;\n\n    width = 0;\n    height = 0;\n    rotation = 0;\n\n    get rotatedWidth() {\n        return STATE.rotation & 1 ? STATE.height : STATE.width;\n    }\n    get rotatedHeight() {\n        return STATE.rotation & 1 ? STATE.width : STATE.height;\n    }\n\n    client: AdbScrcpyClient | undefined = undefined;\n    hoverHelper: ScrcpyHoverHelper | undefined = undefined;\n    keyboard: KeyboardInjector | undefined = undefined;\n    audioPlayer: PcmPlayer<unknown> | undefined = undefined;\n\n    async pushServer() {\n        const serverBuffer = await fetchServer();\n        await AdbScrcpyClient.pushServer(\n            GLOBAL_STATE.device!,\n            new ReadableStream<Consumable<Uint8Array>>({\n                start(controller) {\n                    controller.enqueue(new Consumable(serverBuffer));\n                    controller.close();\n                },\n            })\n        );\n    }\n\n    decoder: ScrcpyVideoDecoder | undefined = undefined;\n    fpsCounterIntervalId: any = undefined;\n    fps = \"0\";\n\n    connecting = false;\n    serverTotalSize = 0;\n    serverDownloadedSize = 0;\n    debouncedServerDownloadedSize = 0;\n    serverDownloadSpeed = 0;\n    serverUploadedSize = 0;\n    debouncedServerUploadedSize = 0;\n    serverUploadSpeed = 0;\n\n    constructor() {\n        makeAutoObservable(this, {\n            start: false,\n            stop: action.bound,\n            dispose: action.bound,\n            setFullScreenContainer: action.bound,\n            setRendererContainer: action.bound,\n            clientPositionToDevicePosition: false,\n        });\n\n        autorun(() => {\n            if (!GLOBAL_STATE.device) {\n                this.dispose();\n            }\n        });\n\n        if (typeof document === \"object\") {\n            document.addEventListener(\"fullscreenchange\", () => {\n                if (!document.fullscreenElement) {\n                    runInAction(() => {\n                        this.isFullScreen = false;\n                    });\n                }\n            });\n        }\n\n        autorun(() => {\n            if (this.rendererContainer && this.decoder) {\n                while (this.rendererContainer.firstChild) {\n                    this.rendererContainer.firstChild.remove();\n                }\n                this.rendererContainer.appendChild(this.decoder.renderer);\n            }\n        });\n    }\n\n    start = async () => {\n        if (!GLOBAL_STATE.device) {\n            return;\n        }\n\n        try {\n            if (!SETTING_STATE.clientSettings.decoder) {\n                throw new Error(\"No available decoder\");\n            }\n\n            runInAction(() => {\n                this.serverTotalSize = 0;\n                this.serverDownloadedSize = 0;\n                this.debouncedServerDownloadedSize = 0;\n                this.serverUploadedSize = 0;\n                this.debouncedServerUploadedSize = 0;\n                this.connecting = true;\n            });\n\n            let intervalId = setInterval(\n                action(() => {\n                    this.serverDownloadSpeed =\n                        this.serverDownloadedSize -\n                        this.debouncedServerDownloadedSize;\n                    this.debouncedServerDownloadedSize =\n                        this.serverDownloadedSize;\n                }),\n                1000\n            );\n\n            let serverBuffer: Uint8Array;\n            try {\n                serverBuffer = await fetchServer(\n                    action(([downloaded, total]) => {\n                        this.serverDownloadedSize = downloaded;\n                        this.serverTotalSize = total;\n                    })\n                );\n                runInAction(() => {\n                    this.serverDownloadSpeed =\n                        this.serverDownloadedSize -\n                        this.debouncedServerDownloadedSize;\n                    this.debouncedServerDownloadedSize =\n                        this.serverDownloadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n\n            intervalId = setInterval(\n                action(() => {\n                    this.serverUploadSpeed =\n                        this.serverUploadedSize -\n                        this.debouncedServerUploadedSize;\n                    this.debouncedServerUploadedSize = this.serverUploadedSize;\n                }),\n                1000\n            );\n\n            try {\n                await AdbScrcpyClient.pushServer(\n                    GLOBAL_STATE.device!,\n                    new ReadableStream<Consumable<Uint8Array>>({\n                        start(controller) {\n                            controller.enqueue(new Consumable(serverBuffer));\n                            controller.close();\n                        },\n                    })\n                        // In fact `pushServer` will pipe the stream through a DistributionStream,\n                        // but without this pipeThrough, the progress will not be updated.\n                        .pipeThrough(\n                            new DistributionStream(ADB_SYNC_MAX_PACKET_SIZE)\n                        )\n                        .pipeThrough(\n                            new ProgressStream(\n                                action((progress) => {\n                                    this.serverUploadedSize = progress;\n                                })\n                            )\n                        )\n                );\n\n                runInAction(() => {\n                    this.serverUploadSpeed =\n                        this.serverUploadedSize -\n                        this.debouncedServerUploadedSize;\n                    this.debouncedServerUploadedSize = this.serverUploadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n\n            const decoderDefinition =\n                SETTING_STATE.decoders.find(\n                    (x) => x.key === SETTING_STATE.clientSettings.decoder\n                ) ?? SETTING_STATE.decoders[0];\n\n            const videoCodecOptions = new CodecOptions();\n            if (!SETTING_STATE.clientSettings.ignoreDecoderCodecArgs) {\n                const capability =\n                    decoderDefinition.Constructor.capabilities[\n                        SETTING_STATE.settings.videoCodec!\n                    ];\n                if (capability) {\n                    videoCodecOptions.value.profile = capability.maxProfile;\n                    videoCodecOptions.value.level = capability.maxLevel;\n                }\n            }\n\n            // Disabled due to https://github.com/Genymobile/scrcpy/issues/2841\n            // Less recording delay\n            // codecOptions.value.iFrameInterval = 1;\n            // Less latency\n            // codecOptions.value.intraRefreshPeriod = 10000;\n\n            const options = new AdbScrcpyOptionsLatest(\n                new ScrcpyOptionsLatest({\n                    ...SETTING_STATE.settings,\n                    logLevel: ScrcpyLogLevel.Debug,\n                    scid: ScrcpyInstanceId.random(),\n                    sendDeviceMeta: false,\n                    sendDummyByte: false,\n                    videoCodecOptions,\n                })\n            );\n\n            runInAction(() => {\n                this.log = [];\n                this.log.push(\n                    `[client] Server version: ${SCRCPY_SERVER_VERSION}`\n                );\n                this.log.push(\n                    `[client] Server arguments: ${options\n                        .serialize()\n                        .join(\" \")}`\n                );\n            });\n\n            const client = await AdbScrcpyClient.start(\n                GLOBAL_STATE.device!,\n                DEFAULT_SERVER_PATH,\n                SCRCPY_SERVER_VERSION,\n                options\n            );\n\n            client.stdout.pipeTo(\n                new WritableStream<string>({\n                    write: action((line) => {\n                        this.log.push(line);\n                    }),\n                })\n            );\n\n            RECORD_STATE.recorder = new MatroskaMuxingRecorder();\n\n            client.videoStream.then(({ stream, metadata }) => {\n                runInAction(() => {\n                    RECORD_STATE.recorder.videoMetadata = metadata;\n                });\n\n                const decoder = new decoderDefinition.Constructor(\n                    metadata.codec\n                );\n\n                runInAction(() => {\n                    this.decoder = decoder;\n\n                    let lastFrameRendered = 0;\n                    let lastFrameSkipped = 0;\n                    this.fpsCounterIntervalId = setInterval(\n                        action(() => {\n                            const deltaRendered =\n                                decoder.frameRendered - lastFrameRendered;\n                            const deltaSkipped =\n                                decoder.frameSkipped - lastFrameSkipped;\n                            // prettier-ignore\n                            this.fps = `${\n                            deltaRendered\n                        }${\n                            deltaSkipped ? `+${deltaSkipped} skipped` : \"\"\n                        }`;\n                            lastFrameRendered = decoder.frameRendered;\n                            lastFrameSkipped = decoder.frameSkipped;\n                        }),\n                        1000\n                    );\n                });\n\n                let lastKeyframe = 0n;\n                const handler = new InspectStream<ScrcpyMediaStreamPacket>(\n                    (packet) => {\n                        RECORD_STATE.recorder.addVideoPacket(packet);\n\n                        if (packet.type === \"configuration\") {\n                            let croppedWidth: number;\n                            let croppedHeight: number;\n                            switch (metadata.codec) {\n                                case ScrcpyVideoCodecId.H264:\n                                    ({ croppedWidth, croppedHeight } =\n                                        h264ParseConfiguration(packet.data));\n                                    break;\n                                case ScrcpyVideoCodecId.H265:\n                                    ({ croppedWidth, croppedHeight } =\n                                        h265ParseConfiguration(packet.data));\n                                    break;\n                                default:\n                                    throw new Error(\"Codec not supported\");\n                            }\n\n                            runInAction(() => {\n                                this.log.push(\n                                    `[client] Video size changed: ${croppedWidth}x${croppedHeight}`\n                                );\n                                this.width = croppedWidth;\n                                this.height = croppedHeight;\n                            });\n                        } else if (\n                            packet.keyframe &&\n                            packet.pts !== undefined\n                        ) {\n                            if (lastKeyframe) {\n                                const interval =\n                                    (Number(packet.pts - lastKeyframe) / 1000) |\n                                    0;\n                                runInAction(() => {\n                                    this.log.push(\n                                        `[client] Keyframe interval: ${interval}ms`\n                                    );\n                                });\n                            }\n                            lastKeyframe = packet.pts!;\n                        }\n                    }\n                );\n\n                stream\n                    .pipeThrough(handler)\n                    .pipeTo(decoder.writable)\n                    .catch((e) => {\n                        console.log(\"video error\", e);\n                    });\n            });\n\n            client.audioStream?.then(async (metadata) => {\n                switch (metadata.type) {\n                    case \"disabled\":\n                        runInAction(() =>\n                            this.log.push(\n                                `[client] Demuxer audio: stream explicitly disabled by the device`\n                            )\n                        );\n                        return;\n                    case \"errored\":\n                        runInAction(() =>\n                            this.log.push(\n                                `[client] Demuxer audio: stream configuration error on the device`\n                            )\n                        );\n                        return;\n                    case \"success\":\n                        // Code is after this `switch`\n                        break;\n                    default:\n                        throw new Error(\n                            `Unexpected audio metadata type ${\n                                metadata[\"type\"] as unknown as string\n                            }`\n                        );\n                }\n\n                const [recordStream, playbackStream] = metadata.stream.tee();\n                switch (metadata.codec) {\n                    case ScrcpyAudioCodec.RAW: {\n                        const audioPlayer = new Int16PcmPlayer(48000);\n                        this.audioPlayer = audioPlayer;\n\n                        playbackStream\n                            .pipeTo(\n                                new WritableStream({\n                                    write: (chunk) => {\n                                        audioPlayer.feed(\n                                            new Int16Array(\n                                                chunk.data.buffer,\n                                                chunk.data.byteOffset,\n                                                chunk.data.byteLength /\n                                                    Int16Array.BYTES_PER_ELEMENT\n                                            )\n                                        );\n                                    },\n                                })\n                            )\n                            .catch(NOOP);\n\n                        await this.audioPlayer.start();\n                        break;\n                    }\n                    case ScrcpyAudioCodec.OPUS: {\n                        const audioPlayer = new Float32PcmPlayer(48000);\n                        this.audioPlayer = audioPlayer;\n\n                        playbackStream\n                            .pipeThrough(\n                                new OpusDecodeStream({\n                                    codec: metadata.codec.webCodecId,\n                                    numberOfChannels: 2,\n                                    sampleRate: 48000,\n                                })\n                            )\n                            .pipeTo(\n                                new WritableStream({\n                                    write: (chunk) => {\n                                        audioPlayer.feed(chunk);\n                                    },\n                                })\n                            )\n                            .catch(NOOP);\n                        await audioPlayer.start();\n                        break;\n                    }\n                    case ScrcpyAudioCodec.AAC: {\n                        const audioPlayer = new Float32PlanerPcmPlayer(48000);\n                        this.audioPlayer = audioPlayer;\n\n                        playbackStream\n                            .pipeThrough(\n                                new AacDecodeStream({\n                                    codec: metadata.codec.webCodecId,\n                                    numberOfChannels: 2,\n                                    sampleRate: 48000,\n                                })\n                            )\n                            .pipeTo(\n                                new WritableStream({\n                                    write: (chunk) => {\n                                        audioPlayer.feed(chunk);\n                                    },\n                                })\n                            )\n                            .catch(NOOP);\n                        await audioPlayer.start();\n                        break;\n                    }\n                    default:\n                        throw new Error(\n                            `Unsupported audio codec ${metadata.codec.optionValue}`\n                        );\n                }\n\n                runInAction(() => {\n                    RECORD_STATE.recorder.audioCodec = metadata.codec;\n                });\n\n                recordStream\n                    .pipeTo(\n                        new WritableStream({\n                            write: (packet) => {\n                                if (packet.type === \"data\") {\n                                    RECORD_STATE.recorder.addAudioPacket(\n                                        packet\n                                    );\n                                }\n                            },\n                        })\n                    )\n                    .catch(NOOP);\n            });\n\n            client.exit.then(this.dispose);\n\n            client\n                .deviceMessageStream!.pipeTo(\n                    new WritableStream({\n                        write(message) {\n                            switch (message.type) {\n                                case ScrcpyDeviceMessageType.Clipboard:\n                                    window.navigator.clipboard.writeText(\n                                        message.content\n                                    );\n                                    break;\n                            }\n                        },\n                    })\n                )\n                .catch(() => {});\n\n            if (SETTING_STATE.clientSettings.turnScreenOff) {\n                await client.controlMessageWriter!.setScreenPowerMode(\n                    AndroidScreenPowerMode.Off\n                );\n            }\n\n            runInAction(() => {\n                this.client = client;\n                this.hoverHelper = new ScrcpyHoverHelper();\n                this.running = true;\n            });\n\n            if (GLOBAL_STATE.backend instanceof AdbWebUsbBackend) {\n                this.keyboard = await AoaKeyboardInjector.register(\n                    GLOBAL_STATE.backend.device\n                );\n            } else {\n                this.keyboard = new ScrcpyKeyboardInjector(client);\n            }\n        } catch (e: any) {\n            GLOBAL_STATE.showErrorDialog(e);\n        } finally {\n            runInAction(() => {\n                this.connecting = false;\n            });\n        }\n    };\n\n    async stop() {\n        // Request to close client first\n        await this.client?.close();\n        this.dispose();\n    }\n\n    dispose() {\n        // Otherwise some packets may still arrive at decoder\n        this.decoder?.dispose();\n        this.decoder = undefined;\n\n        if (RECORD_STATE.recording) {\n            RECORD_STATE.recorder.stop();\n            RECORD_STATE.recording = false;\n        }\n\n        this.keyboard?.dispose();\n        this.keyboard = undefined;\n\n        this.audioPlayer?.stop();\n        this.audioPlayer = undefined;\n\n        this.fps = \"0\";\n        clearTimeout(this.fpsCounterIntervalId);\n\n        if (this.isFullScreen) {\n            document.exitFullscreen().catch(NOOP);\n            this.isFullScreen = false;\n        }\n\n        this.client = undefined;\n        this.running = false;\n    }\n\n    setFullScreenContainer(element: HTMLDivElement | null) {\n        this.fullScreenContainer = element;\n    }\n\n    setRendererContainer(element: HTMLDivElement | null) {\n        this.rendererContainer = element;\n    }\n\n    clientPositionToDevicePosition(clientX: number, clientY: number) {\n        const viewRect = this.rendererContainer!.getBoundingClientRect();\n        let pointerViewX = clamp((clientX - viewRect.x) / viewRect.width, 0, 1);\n        let pointerViewY = clamp(\n            (clientY - viewRect.y) / viewRect.height,\n            0,\n            1\n        );\n\n        if (this.rotation & 1) {\n            [pointerViewX, pointerViewY] = [pointerViewY, pointerViewX];\n        }\n        switch (this.rotation) {\n            case 1:\n                pointerViewY = 1 - pointerViewY;\n                break;\n            case 2:\n                pointerViewX = 1 - pointerViewX;\n                pointerViewY = 1 - pointerViewY;\n                break;\n            case 3:\n                pointerViewX = 1 - pointerViewX;\n                break;\n        }\n\n        return {\n            x: pointerViewX * this.width,\n            y: pointerViewY * this.height,\n        };\n    }\n}\n\nexport const STATE = new ScrcpyPageState();\n","import {\n    CommandBar,\n    ContextualMenuItemType,\n    ICommandBarItemProps,\n} from \"@fluentui/react\";\nimport {\n    AndroidKeyCode,\n    AndroidKeyEventAction,\n    AndroidScreenPowerMode,\n} from \"@yume-chan/scrcpy\";\nimport { action, computed } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { Icons } from \"../../utils\";\nimport { CommandBarSpacerItem } from \"../command-bar-spacer-item\";\nimport { RECORD_STATE } from \"./recorder\";\nimport { STATE } from \"./state\";\n\nconst ITEMS = computed(() => {\n    const result: ICommandBarItemProps[] = [];\n\n    result.push({\n        key: \"stop\",\n        iconProps: { iconName: Icons.Stop },\n        text: \"Stop\",\n        onClick: STATE.stop as VoidFunction,\n    });\n\n    result.push(\n        RECORD_STATE.recording\n            ? {\n                  key: \"Record\",\n                  iconProps: {\n                      iconName: Icons.Record,\n                      style: { color: \"red\" },\n                  },\n                  // prettier-ignore\n                  text: `${\n                      RECORD_STATE.hours ? `${RECORD_STATE.hours}:` : \"\"\n                  }${\n                      RECORD_STATE.minutes.toString().padStart(2, \"0\")\n                  }:${\n                      RECORD_STATE.seconds.toString().padStart(2, \"0\")\n                  }`,\n                  onClick: action(() => {\n                      STATE.fullScreenContainer!.focus();\n\n                      RECORD_STATE.recorder.stop();\n                      RECORD_STATE.recording = false;\n                  }),\n              }\n            : {\n                  key: \"Record\",\n                  disabled: !STATE.running,\n                  iconProps: { iconName: Icons.Record },\n                  text: \"Record\",\n                  onClick: action(() => {\n                      STATE.fullScreenContainer!.focus();\n\n                      RECORD_STATE.recorder.start();\n                      RECORD_STATE.recording = true;\n                  }),\n              }\n    );\n\n    result.push({\n        key: \"fullscreen\",\n        disabled: !STATE.running,\n        iconProps: { iconName: Icons.FullScreenMaximize },\n        iconOnly: true,\n        text: \"Fullscreen\",\n        onClick: action(() => {\n            STATE.fullScreenContainer!.focus();\n\n            STATE.fullScreenContainer!.requestFullscreen();\n            STATE.isFullScreen = true;\n        }),\n    });\n\n    result.push(\n        {\n            key: \"volumeUp\",\n            disabled: !STATE.running,\n            iconProps: { iconName: Icons.Speaker2 },\n            iconOnly: true,\n            text: \"Volume Up\",\n            onClick: (async () => {\n                STATE.fullScreenContainer!.focus();\n\n                // TODO: Auto repeat when holding\n                await STATE.client?.controlMessageWriter!.injectKeyCode({\n                    action: AndroidKeyEventAction.Down,\n                    keyCode: AndroidKeyCode.VolumeUp,\n                    repeat: 0,\n                    metaState: 0,\n                });\n                await STATE.client?.controlMessageWriter!.injectKeyCode({\n                    action: AndroidKeyEventAction.Up,\n                    keyCode: AndroidKeyCode.VolumeUp,\n                    repeat: 0,\n                    metaState: 0,\n                });\n            }) as () => void,\n        },\n        {\n            key: \"volumeDown\",\n            disabled: !STATE.running,\n            iconProps: { iconName: Icons.Speaker1 },\n            iconOnly: true,\n            text: \"Volume Down\",\n            onClick: (async () => {\n                STATE.fullScreenContainer!.focus();\n\n                await STATE.client?.controlMessageWriter!.injectKeyCode({\n                    action: AndroidKeyEventAction.Down,\n                    keyCode: AndroidKeyCode.VolumeDown,\n                    repeat: 0,\n                    metaState: 0,\n                });\n                await STATE.client?.controlMessageWriter!.injectKeyCode({\n                    action: AndroidKeyEventAction.Up,\n                    keyCode: AndroidKeyCode.VolumeDown,\n                    repeat: 0,\n                    metaState: 0,\n                });\n            }) as () => void,\n        },\n        {\n            key: \"volumeMute\",\n            disabled: !STATE.running,\n            iconProps: { iconName: Icons.SpeakerOff },\n            iconOnly: true,\n            text: \"Toggle Mute\",\n            onClick: (async () => {\n                STATE.fullScreenContainer!.focus();\n\n                await STATE.client?.controlMessageWriter!.injectKeyCode({\n                    action: AndroidKeyEventAction.Down,\n                    keyCode: AndroidKeyCode.VolumeMute,\n                    repeat: 0,\n                    metaState: 0,\n                });\n                await STATE.client?.controlMessageWriter!.injectKeyCode({\n                    action: AndroidKeyEventAction.Up,\n                    keyCode: AndroidKeyCode.VolumeMute,\n                    repeat: 0,\n                    metaState: 0,\n                });\n            }) as () => void,\n        }\n    );\n\n    result.push(\n        {\n            key: \"rotateDevice\",\n            disabled: !STATE.running,\n            iconProps: { iconName: Icons.Orientation },\n            iconOnly: true,\n            text: \"Rotate Device\",\n            onClick: () => {\n                STATE.fullScreenContainer!.focus();\n\n                STATE.client!.controlMessageWriter!.rotateDevice();\n            },\n        },\n        {\n            key: \"rotateVideoLeft\",\n            disabled: !STATE.running,\n            iconProps: { iconName: Icons.RotateLeft },\n            iconOnly: true,\n            text: \"Rotate Video Left\",\n            onClick: action(() => {\n                STATE.fullScreenContainer!.focus();\n\n                STATE.rotation -= 1;\n                if (STATE.rotation < 0) {\n                    STATE.rotation = 3;\n                }\n            }),\n        },\n        {\n            key: \"rotateVideoRight\",\n            disabled: !STATE.running,\n            iconProps: { iconName: Icons.RotateRight },\n            iconOnly: true,\n            text: \"Rotate Video Right\",\n            onClick: action(() => {\n                STATE.fullScreenContainer!.focus();\n\n                STATE.rotation = (STATE.rotation + 1) & 3;\n            }),\n        }\n    );\n\n    result.push(\n        {\n            key: \"turnScreenOff\",\n            disabled: !STATE.running,\n            iconProps: { iconName: Icons.Lightbulb },\n            iconOnly: true,\n            text: \"Turn Screen Off\",\n            onClick: () => {\n                STATE.fullScreenContainer!.focus();\n\n                STATE.client!.controlMessageWriter!.setScreenPowerMode(\n                    AndroidScreenPowerMode.Off\n                );\n            },\n        },\n        {\n            key: \"turnScreenOn\",\n            disabled: !STATE.running,\n            iconProps: { iconName: Icons.LightbulbFilament },\n            iconOnly: true,\n            text: \"Turn Screen On\",\n            onClick: () => {\n                STATE.fullScreenContainer!.focus();\n\n                STATE.client!.controlMessageWriter!.setScreenPowerMode(\n                    AndroidScreenPowerMode.Normal\n                );\n            },\n        }\n    );\n\n    if (STATE.running) {\n        result.push({\n            key: \"fps\",\n            text: `FPS: ${STATE.fps}`,\n            disabled: true,\n        });\n    }\n\n    result.push(\n        {\n            // HACK: make CommandBar overflow on far items\n            // https://github.com/microsoft/fluentui/issues/11842\n            key: \"spacer\",\n            onRender: () => <CommandBarSpacerItem />,\n        },\n        {\n            // HACK: add a separator in CommandBar overflow menu\n            // https://github.com/microsoft/fluentui/issues/10035\n            key: \"separator\",\n            disabled: true,\n            itemType: ContextualMenuItemType.Divider,\n        }\n    );\n\n    result.push(\n        {\n            key: \"NavigationBar\",\n            iconProps: { iconName: Icons.PanelBottom },\n            canCheck: true,\n            checked: STATE.navigationBarVisible,\n            text: \"Navigation Bar\",\n            iconOnly: true,\n            onClick: action(() => {\n                STATE.navigationBarVisible = !STATE.navigationBarVisible;\n            }),\n        },\n        {\n            key: \"Log\",\n            iconProps: { iconName: Icons.TextGrammarError },\n            canCheck: true,\n            checked: STATE.logVisible,\n            text: \"Log\",\n            iconOnly: true,\n            onClick: action(() => {\n                STATE.logVisible = !STATE.logVisible;\n            }),\n        },\n        {\n            key: \"DemoMode\",\n            iconProps: { iconName: Icons.Wand },\n            canCheck: true,\n            checked: STATE.demoModeVisible,\n            text: \"Demo Mode\",\n            iconOnly: true,\n            onClick: action(() => {\n                STATE.demoModeVisible = !STATE.demoModeVisible;\n            }),\n        }\n    );\n\n    return result;\n});\n\nexport const ScrcpyCommandBar = observer(function ScrcpyCommandBar() {\n    return <CommandBar items={ITEMS.get()} />;\n});\n","import { IconButton, Stack } from \"@fluentui/react\";\nimport { makeStyles, mergeClasses } from \"@griffel/react\";\nimport { AndroidKeyCode, AndroidKeyEventAction } from \"@yume-chan/scrcpy\";\nimport { observer } from \"mobx-react-lite\";\nimport { CSSProperties, PointerEvent, ReactNode } from \"react\";\nimport { Icons } from \"../../utils\";\nimport { STATE } from \"./state\";\n\nconst useClasses = makeStyles({\n    container: {\n        height: \"40px\",\n        backgroundColor: \"#999\",\n    },\n    bar: {\n        width: \"100%\",\n        maxWidth: \"300px\",\n    },\n    icon: {\n        color: \"white\",\n    },\n    back: {\n        transform: \"rotate(180deg)\",\n    },\n});\n\nfunction handlePointerDown(e: PointerEvent<HTMLDivElement>) {\n    if (!STATE.client) {\n        return false;\n    }\n\n    if (e.button !== 0) {\n        return false;\n    }\n\n    STATE.fullScreenContainer!.focus();\n    e.currentTarget.setPointerCapture(e.pointerId);\n    e.preventDefault();\n    e.stopPropagation();\n\n    return true;\n}\n\nfunction handlePointerUp(e: PointerEvent<HTMLDivElement>) {\n    if (!STATE.client) {\n        return false;\n    }\n\n    if (e.button !== 0) {\n        return false;\n    }\n\n    return true;\n}\n\nfunction handleBackPointerDown(e: PointerEvent<HTMLDivElement>) {\n    if (!handlePointerDown(e)) {\n        return;\n    }\n\n    STATE.client!.controlMessageWriter!.backOrScreenOn(\n        AndroidKeyEventAction.Down\n    );\n}\n\nfunction handleBackPointerUp(e: PointerEvent<HTMLDivElement>) {\n    if (!handlePointerUp(e)) {\n        return;\n    }\n\n    STATE.client!.controlMessageWriter!.backOrScreenOn(\n        AndroidKeyEventAction.Up\n    );\n}\n\nfunction handleHomePointerDown(e: PointerEvent<HTMLDivElement>) {\n    if (!handlePointerDown(e)) {\n        return;\n    }\n\n    STATE.client!.controlMessageWriter!.injectKeyCode({\n        action: AndroidKeyEventAction.Down,\n        keyCode: AndroidKeyCode.AndroidHome,\n        repeat: 0,\n        metaState: 0,\n    });\n}\n\nfunction handleHomePointerUp(e: PointerEvent<HTMLDivElement>) {\n    if (!handlePointerUp(e)) {\n        return;\n    }\n\n    STATE.client!.controlMessageWriter!.injectKeyCode({\n        action: AndroidKeyEventAction.Up,\n        keyCode: AndroidKeyCode.AndroidHome,\n        repeat: 0,\n        metaState: 0,\n    });\n}\n\nfunction handleAppSwitchPointerDown(e: PointerEvent<HTMLDivElement>) {\n    if (!handlePointerDown(e)) {\n        return;\n    }\n\n    STATE.client!.controlMessageWriter!.injectKeyCode({\n        action: AndroidKeyEventAction.Down,\n        keyCode: AndroidKeyCode.AndroidAppSwitch,\n        repeat: 0,\n        metaState: 0,\n    });\n}\n\nfunction handleAppSwitchPointerUp(e: PointerEvent<HTMLDivElement>) {\n    if (!handlePointerUp(e)) {\n        return;\n    }\n\n    STATE.client!.controlMessageWriter!.injectKeyCode({\n        action: AndroidKeyEventAction.Up,\n        keyCode: AndroidKeyCode.AndroidAppSwitch,\n        repeat: 0,\n        metaState: 0,\n    });\n}\n\nexport const NavigationBar = observer(function NavigationBar({\n    className,\n    style,\n    children,\n}: {\n    className: string;\n    style: CSSProperties;\n    children: ReactNode;\n}) {\n    const classes = useClasses();\n\n    if (!STATE.navigationBarVisible) {\n        return (\n            <div className={className} style={style}>\n                {children}\n            </div>\n        );\n    }\n\n    return (\n        <Stack\n            className={mergeClasses(classes.container, className)}\n            verticalFill\n            horizontalAlign=\"center\"\n            style={style}\n        >\n            {children}\n\n            <Stack\n                className={classes.bar}\n                verticalFill\n                horizontal\n                horizontalAlign=\"space-evenly\"\n                verticalAlign=\"center\"\n            >\n                <IconButton\n                    className={mergeClasses(classes.back, classes.icon)}\n                    iconProps={{ iconName: Icons.Play }}\n                    onPointerDown={handleBackPointerDown}\n                    onPointerUp={handleBackPointerUp}\n                />\n                <IconButton\n                    className={classes.icon}\n                    iconProps={{ iconName: Icons.Circle }}\n                    onPointerDown={handleHomePointerDown}\n                    onPointerUp={handleHomePointerUp}\n                />\n                <IconButton\n                    className={classes.icon}\n                    iconProps={{ iconName: Icons.Stop }}\n                    onPointerDown={handleAppSwitchPointerDown}\n                    onPointerUp={handleAppSwitchPointerUp}\n                />\n            </Stack>\n        </Stack>\n    );\n});\n","import { makeStyles } from \"@griffel/react\";\nimport {\n    AndroidMotionEventAction,\n    AndroidMotionEventButton,\n    ScrcpyPointerId,\n} from \"@yume-chan/scrcpy\";\nimport { MouseEvent, PointerEvent, useEffect, useState } from \"react\";\nimport { STATE } from \"./state\";\n\nconst useClasses = makeStyles({\n    video: {\n        transformOrigin: \"center center\",\n        touchAction: \"none\",\n    },\n});\n\nfunction handleWheel(e: WheelEvent) {\n    if (!STATE.client) {\n        return;\n    }\n\n    STATE.fullScreenContainer!.focus();\n    e.preventDefault();\n    e.stopPropagation();\n\n    const { x, y } = STATE.clientPositionToDevicePosition(e.clientX, e.clientY);\n    STATE.client!.controlMessageWriter!.injectScroll({\n        screenWidth: STATE.client!.screenWidth!,\n        screenHeight: STATE.client!.screenHeight!,\n        pointerX: x,\n        pointerY: y,\n        scrollX: -e.deltaX / 100,\n        scrollY: -e.deltaY / 100,\n        buttons: 0,\n    });\n}\n\nconst MOUSE_EVENT_BUTTON_TO_ANDROID_BUTTON = [\n    AndroidMotionEventButton.Primary,\n    AndroidMotionEventButton.Tertiary,\n    AndroidMotionEventButton.Secondary,\n    AndroidMotionEventButton.Back,\n    AndroidMotionEventButton.Forward,\n];\n\nfunction injectTouch(\n    action: AndroidMotionEventAction,\n    e: PointerEvent<HTMLDivElement>\n) {\n    if (!STATE.client) {\n        return;\n    }\n\n    const { pointerType } = e;\n    let pointerId: bigint;\n    if (pointerType === \"mouse\") {\n        // Android 13 has bug with mouse injection\n        // https://github.com/Genymobile/scrcpy/issues/3708\n        pointerId = ScrcpyPointerId.Finger;\n    } else {\n        pointerId = BigInt(e.pointerId);\n    }\n\n    const { x, y } = STATE.clientPositionToDevicePosition(e.clientX, e.clientY);\n\n    const messages = STATE.hoverHelper!.process({\n        action,\n        pointerId,\n        screenWidth: STATE.client.screenWidth!,\n        screenHeight: STATE.client.screenHeight!,\n        pointerX: x,\n        pointerY: y,\n        pressure: e.pressure,\n        actionButton: MOUSE_EVENT_BUTTON_TO_ANDROID_BUTTON[e.button],\n        // `MouseEvent.buttons` has the same order as Android `MotionEvent`\n        buttons: e.buttons,\n    });\n    for (const message of messages) {\n        STATE.client.controlMessageWriter!.injectTouch(message);\n    }\n}\n\nfunction handlePointerDown(e: PointerEvent<HTMLDivElement>) {\n    if (!STATE.client) {\n        return;\n    }\n\n    STATE.fullScreenContainer!.focus();\n    e.preventDefault();\n    e.stopPropagation();\n\n    e.currentTarget.setPointerCapture(e.pointerId);\n    injectTouch(AndroidMotionEventAction.Down, e);\n}\n\nfunction handlePointerMove(e: PointerEvent<HTMLDivElement>) {\n    if (!STATE.client) {\n        return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    injectTouch(\n        e.buttons === 0\n            ? AndroidMotionEventAction.HoverMove\n            : AndroidMotionEventAction.Move,\n        e\n    );\n}\n\nfunction handlePointerUp(e: PointerEvent<HTMLDivElement>) {\n    if (!STATE.client) {\n        return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    injectTouch(AndroidMotionEventAction.Up, e);\n}\n\nfunction handlePointerLeave(e: PointerEvent<HTMLDivElement>) {\n    if (!STATE.client) {\n        return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    // Because pointer capture on pointer down, this event only happens for hovering mouse and pen.\n    // Release the injected pointer, otherwise it will stuck at the last position.\n    injectTouch(AndroidMotionEventAction.HoverExit, e);\n    injectTouch(AndroidMotionEventAction.Up, e);\n}\n\nfunction handleContextMenu(e: MouseEvent<HTMLDivElement>) {\n    e.preventDefault();\n}\n\nexport function VideoContainer() {\n    const classes = useClasses();\n\n    const [container, setContainer] = useState<HTMLDivElement | null>(null);\n\n    useEffect(() => {\n        STATE.setRendererContainer(container);\n\n        if (!container) {\n            return;\n        }\n\n        container.addEventListener(\"wheel\", handleWheel, {\n            passive: false,\n        });\n\n        return () => {\n            container.removeEventListener(\"wheel\", handleWheel);\n        };\n    }, [container]);\n\n    return (\n        <div\n            ref={setContainer}\n            className={classes.video}\n            style={{\n                width: STATE.width,\n                height: STATE.height,\n                transform: `translate(${\n                    (STATE.rotatedWidth - STATE.width) / 2\n                }px, ${(STATE.rotatedHeight - STATE.height) / 2}px) rotate(${\n                    STATE.rotation * 90\n                }deg)`,\n            }}\n            onPointerDown={handlePointerDown}\n            onPointerMove={handlePointerMove}\n            onPointerUp={handlePointerUp}\n            onPointerCancel={handlePointerUp}\n            onPointerLeave={handlePointerLeave}\n            onContextMenu={handleContextMenu}\n        />\n    );\n}\n","export * from \"./command-bar\";\nexport * from \"./fetch-server\";\nexport * from \"./navigation-bar\";\nexport * from \"./settings\";\nexport * from \"./state\";\nexport * from \"./video-container\";\n","import { useEffect } from \"react\";\n\ntype CommonEventMaps<T> = T extends typeof globalThis\n    ? WindowEventMap\n    : T extends Window\n    ? WindowEventMap\n    : T extends Document\n    ? DocumentEventMap\n    : T extends HTMLElement\n    ? HTMLElementEventMap\n    : T extends SVGElement\n    ? SVGElementEventMap\n    : { [type: string]: unknown };\n\nconst useClientAddEventListener = <\n    T extends EventTarget,\n    U extends keyof CommonEventMaps<T>\n>(\n    target: T | (() => T),\n    type: U,\n    listener: (this: T, ev: CommonEventMaps<T>[U]) => any,\n    options?: AddEventListenerOptions,\n    deps?: readonly unknown[]\n) => {\n    useEffect(() => {\n        const targetValue = typeof target === \"function\" ? target() : target;\n        targetValue.addEventListener(type as any, listener as any, options);\n\n        return () =>\n            targetValue.removeEventListener(\n                type as any,\n                listener as any,\n                options\n            );\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, deps);\n};\n\nexport const useAddEventListener =\n    typeof window !== \"undefined\" ? useClientAddEventListener : () => {};\n","import { useLayoutEffect as useReactLayoutEffect } from \"react\";\n\nexport const useLayoutEffect =\n    typeof window !== \"undefined\" ? useReactLayoutEffect : () => {};\n","import { MutableRefObject, useRef } from \"react\";\n\nimport { useLayoutEffect } from \"./layout-effect\";\n\nconst UNINITIALIZED = Symbol(\"UNINITIALIZED\");\n\nexport function useConstLazy<T>(initializer: () => T): T {\n    const ref = useRef<T | typeof UNINITIALIZED>(UNINITIALIZED);\n    if (ref.current === UNINITIALIZED) {\n        ref.current = initializer();\n    }\n    return ref.current;\n}\n\nexport function useConst<T>(value: T): T {\n    const ref = useRef(value);\n    return ref.current;\n}\n\nexport function useLatestRef<T>(value: T): MutableRefObject<T> {\n    const ref = useRef(value);\n    useLayoutEffect(() => {\n        ref.current = value;\n    }, [value]);\n    return ref;\n}\n\nexport function useStableCallback<T extends (...args: any[]) => void>(\n    callback: T\n): T {\n    const callbackRef = useLatestRef(callback);\n    return useConst(function (...args) {\n        return callbackRef.current(...args);\n    } as T);\n}\n","import { useState } from \"react\";\n\nimport { useAddEventListener } from \"./add-event-listener\";\nimport { useStableCallback } from \"./stable-callback\";\n\nfunction useClientLocalStorage<T extends string = string>(\n    key: string,\n    fallbackValue: T\n) {\n    const [value, setValue] = useState<T>(\n        () => (localStorage.getItem(key) as T) || fallbackValue\n    );\n\n    useAddEventListener(\n        globalThis,\n        \"storage\",\n        () =>\n            setValue((localStorage.getItem(key) as T | null) ?? fallbackValue),\n        { passive: true },\n        [key, fallbackValue]\n    );\n\n    const handleChange = useStableCallback((value: T) => {\n        setValue(value);\n        localStorage.setItem(key, value);\n    });\n\n    return [value, handleChange] as const;\n}\n\nexport const useLocalStorage: typeof useClientLocalStorage =\n    typeof localStorage !== \"undefined\"\n        ? useClientLocalStorage\n        : (key, fallbackValue) => [fallbackValue, () => {}];\n","export * from \"./add-event-listener\";\nexport * from \"./layout-effect\";\nexport * from \"./local-storage\";\nexport * from \"./stable-callback\";\n","import {\n    Dialog,\n    LayerHost,\n    Link,\n    PrimaryButton,\n    ProgressIndicator,\n    Stack,\n    StackItem,\n} from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\nimport { makeStyles, shorthands } from \"@griffel/react\";\nimport { WebCodecsDecoder } from \"@yume-chan/scrcpy-decoder-webcodecs\";\nimport { action, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { KeyboardEvent, useEffect, useState } from \"react\";\nimport { DemoModePanel, DeviceView, ExternalLink } from \"../components\";\nimport {\n    NavigationBar,\n    SETTING_DEFINITIONS,\n    SETTING_STATE,\n    STATE,\n    ScrcpyCommandBar,\n    SettingItem,\n    VideoContainer,\n} from \"../components/scrcpy\";\nimport { useLocalStorage } from \"../hooks\";\nimport { GLOBAL_STATE } from \"../state\";\nimport { CommonStackTokens, RouteStackProps, formatSpeed } from \"../utils\";\n\nconst useClasses = makeStyles({\n    layerHost: {\n        position: \"absolute\",\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        pointerEvents: \"none\",\n        ...shorthands.margin(0),\n    },\n    fullScreenContainer: {\n        flexGrow: 1,\n        display: \"flex\",\n        flexDirection: \"column\",\n        backgroundColor: \"black\",\n        \":focus-visible\": {\n            ...shorthands.outline(\"0\"),\n        },\n    },\n    fullScreenStatusBar: {\n        display: \"flex\",\n        color: \"white\",\n        columnGap: \"12px\",\n        ...shorthands.padding(\"8px\", \"20px\"),\n    },\n    spacer: {\n        flexGrow: 1,\n    },\n});\n\nconst ConnectionDialog = observer(() => {\n    const classes = useClasses();\n    const layerHostId = useId(\"layerHost\");\n\n    const [isClient, setIsClient] = useState(false);\n\n    useEffect(() => {\n        setIsClient(true);\n    }, []);\n\n    if (!isClient) {\n        return null;\n    }\n\n    return (\n        <>\n            <LayerHost id={layerHostId} className={classes.layerHost} />\n\n            <Dialog\n                hidden={!STATE.connecting}\n                modalProps={{ layerProps: { hostId: layerHostId } }}\n                dialogContentProps={{ title: \"Connecting...\" }}\n            >\n                <Stack tokens={CommonStackTokens}>\n                    <ProgressIndicator\n                        label=\"Downloading scrcpy server...\"\n                        percentComplete={\n                            STATE.serverTotalSize\n                                ? STATE.serverDownloadedSize /\n                                  STATE.serverTotalSize\n                                : undefined\n                        }\n                        description={formatSpeed(\n                            STATE.debouncedServerDownloadedSize,\n                            STATE.serverTotalSize,\n                            STATE.serverDownloadSpeed\n                        )}\n                    />\n\n                    <ProgressIndicator\n                        label=\"Pushing scrcpy server to device...\"\n                        progressHidden={\n                            STATE.serverTotalSize === 0 ||\n                            STATE.serverDownloadedSize !== STATE.serverTotalSize\n                        }\n                        percentComplete={\n                            STATE.serverUploadedSize / STATE.serverTotalSize\n                        }\n                        description={formatSpeed(\n                            STATE.debouncedServerUploadedSize,\n                            STATE.serverTotalSize,\n                            STATE.serverUploadSpeed\n                        )}\n                    />\n\n                    <ProgressIndicator\n                        label=\"Starting scrcpy server on device...\"\n                        progressHidden={\n                            STATE.serverTotalSize === 0 ||\n                            STATE.serverUploadedSize !== STATE.serverTotalSize\n                        }\n                    />\n                </Stack>\n            </Dialog>\n        </>\n    );\n});\n\nasync function handleKeyEvent(e: KeyboardEvent<HTMLDivElement>) {\n    if (!STATE.client) {\n        return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    const { type, code } = e;\n    STATE.keyboard![type === \"keydown\" ? \"down\" : \"up\"](code);\n}\n\nfunction handleBlur() {\n    if (!STATE.client) {\n        return;\n    }\n\n    STATE.keyboard?.reset();\n}\n\nconst Scrcpy: NextPage = () => {\n    const classes = useClasses();\n\n    useEffect(() => {\n        // Detect WebCodecs support at client side\n        if (\n            SETTING_STATE.decoders.length === 1 &&\n            typeof window.VideoDecoder === \"function\"\n        ) {\n            runInAction(() => {\n                SETTING_STATE.decoders.unshift({\n                    key: \"webcodecs\",\n                    name: \"WebCodecs\",\n                    Constructor: WebCodecsDecoder,\n                });\n            });\n        }\n    }, []);\n\n    const [keyboardLockEnabled, setKeyboardLockEnabled] = useState(false);\n    useEffect(() => {\n        if (!(\"keyboard\" in navigator)) {\n            return;\n        }\n\n        // Keyboard Lock is only effective in fullscreen mode,\n        // but the `lock` method can be called at any time.\n\n        // @ts-expect-error\n        navigator.keyboard.lock();\n        setKeyboardLockEnabled(true);\n\n        return () => {\n            // @ts-expect-error\n            navigator.keyboard.unlock();\n        };\n    }, []);\n\n    const [hintHidden, setHintHidden] = useLocalStorage<`${boolean}`>(\n        \"scrcpy-hint-hidden\",\n        \"false\"\n    );\n\n    useEffect(() => {\n        window.addEventListener(\"blur\", handleBlur);\n\n        return () => {\n            window.removeEventListener(\"blur\", handleBlur);\n        };\n    }, []);\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Scrcpy - Tango</title>\n            </Head>\n\n            {STATE.running ? (\n                <>\n                    <ScrcpyCommandBar />\n\n                    <Stack horizontal grow styles={{ root: { height: 0 } }}>\n                        <div\n                            ref={STATE.setFullScreenContainer}\n                            className={classes.fullScreenContainer}\n                            tabIndex={0}\n                            onKeyDown={handleKeyEvent}\n                            onKeyUp={handleKeyEvent}\n                        >\n                            {keyboardLockEnabled &&\n                                hintHidden !== \"true\" &&\n                                STATE.isFullScreen && (\n                                    <div\n                                        className={classes.fullScreenStatusBar}\n                                    >\n                                        <div>\n                                            {GLOBAL_STATE.backend?.serial}\n                                        </div>\n                                        <div>FPS: {STATE.fps}</div>\n\n                                        <div className={classes.spacer} />\n\n                                        <div>\n                                            Press and hold ESC to exit full\n                                            screen\n                                        </div>\n\n                                        <Link\n                                            onClick={() =>\n                                                setHintHidden(\"true\")\n                                            }\n                                        >\n                                            {`Don't show again`}\n                                        </Link>\n                                    </div>\n                                )}\n\n                            <DeviceView\n                                width={STATE.rotatedWidth}\n                                height={STATE.rotatedHeight}\n                                BottomElement={NavigationBar}\n                            >\n                                <VideoContainer />\n                            </DeviceView>\n                        </div>\n\n                        <div\n                            style={{\n                                padding: 12,\n                                overflow: \"hidden auto\",\n                                display: STATE.logVisible ? \"block\" : \"none\",\n                                width: 500,\n                                fontFamily: \"monospace\",\n                                overflowY: \"auto\",\n                                whiteSpace: \"pre-wrap\",\n                                wordWrap: \"break-word\",\n                            }}\n                        >\n                            {STATE.log.map((line, index) => (\n                                <div key={index}>{line}</div>\n                            ))}\n                        </div>\n\n                        <DemoModePanel\n                            style={{\n                                display: STATE.demoModeVisible\n                                    ? \"block\"\n                                    : \"none\",\n                            }}\n                        />\n                    </Stack>\n                </>\n            ) : (\n                <>\n                    <div>\n                        <ExternalLink\n                            href=\"https://github.com/Genymobile/scrcpy\"\n                            spaceAfter\n                        >\n                            Scrcpy\n                        </ExternalLink>\n                        can mirror device display and audio with low latency and\n                        control the device, all without root access.\n                    </div>\n                    <div>\n                        This is a TypeScript re-implementation of the client\n                        part. Paired with official pre-built server binary.\n                    </div>\n\n                    <StackItem align=\"start\">\n                        <PrimaryButton\n                            text=\"Start\"\n                            disabled={!GLOBAL_STATE.device}\n                            onClick={STATE.start}\n                        />\n                    </StackItem>\n\n                    {SETTING_DEFINITIONS.get().map((definition) => (\n                        <SettingItem\n                            key={definition.key}\n                            definition={definition}\n                            value={\n                                (SETTING_STATE[definition.group] as any)[\n                                    definition.key\n                                ]\n                            }\n                            onChange={action(\n                                (definition, value) =>\n                                    ((SETTING_STATE[definition.group] as any)[\n                                        definition.key\n                                    ] = value)\n                            )}\n                        />\n                    ))}\n\n                    <ConnectionDialog />\n                </>\n            )}\n        </Stack>\n    );\n};\n\nexport default observer(Scrcpy);\n"],"names":["window","__NEXT_P","push","__webpack_require__","CommandBarSpacerItem","container","setContainer","useState","useEffect","parent","parentElement","originalFlexGrow","style","flexGrow","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","ref","cachedValue","worker","cachedInitializePromise","AndroidAv1Profile","AndroidAv1Level","AndroidAvcProfile","AndroidAvcLevel","AndroidHevcProfile","AndroidHevcLevel","AndroidMotionEventAction","AndroidMotionEventButton","ScrcpyPointerId","ScrcpyControlMessageType","AndroidKeyEventAction","AndroidKeyEventMeta","AndroidKeyCode","AndroidScreenPowerMode","ScrcpyDeviceMessageType","ScrcpyLogLevel1_16","ScrcpyVideoOrientation1_16","ScrcpyVideoCodecId","ScrcpyLogLevel1_18","ScrcpyVideoOrientation1_18","annexBSplitNalu","buffer","start","zeroCount","inEmulation","i","length","byte","prevZeroCount","subarray","NaluSodbBitReader","_nalu","_byteLength","_stopBitIndex","_zeroCount","_bytePosition","_bitPosition","_byte","byteLength","stopBitIndex","bytePosition","bitPosition","ended","constructor","nalu","j","readByte","next","value","read","result","skip","decodeExponentialGolombNumber","peek","Object","assign","readBytes","Uint8Array","peekBytes","h264SearchConfiguration","sequenceParameterSet","pictureParameterSet","naluType","h264ParseConfiguration","data","profile_idc","profileIndex","constraint_set","constraintSet","level_idc","levelIndex","pic_width_in_mbs_minus1","pic_height_in_map_units_minus1","frame_mbs_only_flag","frame_crop_left_offset","frame_crop_right_offset","frame_crop_top_offset","frame_crop_bottom_offset","h264ParseSequenceParameterSet","reader","nal_ref_idc","nal_unit_type","constraint_set0_flag","constraint_set1_flag","constraint_set2_flag","constraint_set3_flag","constraint_set4_flag","constraint_set5_flag","seq_parameter_set_id","chroma_format_idc","seq_scaling_matrix_present_flag","seq_scaling_list_present_flag","pic_order_cnt_type","num_ref_frames_in_pic_order_cnt_cycle","offset_for_ref_frame","frame_cropping_flag","encodedWidth","encodedHeight","cropLeft","cropRight","cropTop","cropBottom","croppedWidth","croppedHeight","h265ParseVideoParameterSet","vps_num_units_in_tick","vps_time_scale","vps_poc_proportional_to_timing_flag","vps_num_ticks_poc_diff_one_minus1","vps_num_hrd_parameters","hrd_layer_set_idx","cprms_present_flag","hrdParameters","vps_video_parameter_set_id","vps_base_layer_internal_flag","vps_base_layer_available_flag","vps_max_layers_minus1","vps_max_sub_layers_minus1","vps_temporal_id_nesting_flag","profileTierLevel","h265ParseProfileTierLevel","vps_sub_layer_ordering_info_present_flag","vps_max_dec_pic_buffering_minus1","vps_max_num_reorder_pics","vps_max_latency_increase_plus1","vps_max_layer_id","vps_num_layer_sets_minus1","layer_id_included_flag","vps_timing_info_present_flag","h265ParseHrdParameters","commonInfPresentFlag","maxNumSubLayersMinus1","nal_hrd_parameters_present_flag","vcl_hrd_parameters_present_flag","sub_pic_hrd_params_present_flag","tick_divisor_minus2","du_cpb_removal_delay_increment_length_minus1","sub_pic_cpb_params_in_pic_timing_sei_flag","dpb_output_delay_du_length_minus1","bit_rate_scale","cpb_size_scale","cpb_size_du_scale","initial_cpb_removal_delay_length_minus1","au_cpb_removal_delay_length_minus1","dpb_output_delay_length_minus1","fixed_pic_rate_general_flag","fixed_pic_rate_within_cvs_flag","elemental_duration_in_tc_minus1","low_delay_hrd_flag","cpb_cnt_minus1","nalHrdParameters","vclHrdParameters","cpb_cnt_minus_1","h265ParseSubLayerHrdParameters","vps_extension_flag","h265ParseSequenceParameterSet","separate_colour_plane_flag","conf_win_left_offset","conf_win_right_offset","conf_win_top_offset","conf_win_bottom_offset","sps_max_dec_pic_buffering_minus1","sps_max_num_reorder_pics","sps_max_latency_increase_plus1","sps_scaling_list_data_present_flag","scalingListData","pcm_sample_bit_depth_luma_minus1","pcm_sample_bit_depth_chroma_minus1","log2_min_pcm_luma_coding_block_size_minus3","log2_diff_max_min_pcm_luma_coding_block_size","pcm_loop_filter_disabled_flag","num_long_term_ref_pics_sps","lt_ref_pic_poc_lsb_sps","used_by_curr_pic_lt_sps_flag","vuiParameters","sps_range_extension_flag","sps_multilayer_extension_flag","sps_3d_extension_flag","sps_scc_extension_flag","sps_extension_4bits","spsMultilayerExtension","sps3dExtension","sps_extension_data_flag","sps_video_parameter_set_id","sps_max_sub_layers_minus1","sps_temporal_id_nesting_flag","sps_seq_parameter_set_id","pic_width_in_luma_samples","pic_height_in_luma_samples","conformance_window_flag","bit_depth_luma_minus8","bit_depth_chroma_minus8","log2_max_pic_order_cnt_lsb_minus4","sps_sub_layer_ordering_info_present_flag","log2_min_luma_coding_block_size_minus3","log2_diff_max_min_luma_coding_block_size","log2_min_luma_transform_block_size_minus2","log2_diff_max_min_luma_transform_block_size","max_transform_hierarchy_depth_inter","max_transform_hierarchy_depth_intra","scaling_list_enabled_flag","h265ParseScalingListData","scaling_list","sizeId","matrixId","scaling_list_pred_mode_flag","nextCoef","coefNum","Math","min","scaling_list_dc_coef_minus8","scaling_list_delta_coef","amp_enabled_flag","sample_adaptive_offset_enabled_flag","pcm_enabled_flag","num_short_term_ref_pic_sets","shortTermRefPicSets","h265ParseShortTermReferencePictureSet","stRpsIdx","sets","inter_ref_pic_set_prediction_flag","delta_idx_minus1","delta_rps_sign","abs_delta_rps_minus1","used_by_curr_pic_flag","use_delta_flag","num_negative_pics","num_positive_pics","delta_poc_s0_minus1","used_by_curr_pic_s0_flag","delta_poc_s1_minus1","used_by_curr_pic_s1_flag","RefRpsIdx","RefRps","NumDeltaPocs_RefRpsIdx","DeltaRps","Number","RefPocS0","RefPocS1","pocS0","pocS1","dPoc","prev","current","long_term_ref_pics_present_flag","sps_temporal_mvp_enabled_flag","strong_intra_smoothing_enabled_flag","vui_parameters_present_flag","h265ParseVuiParameters","aspect_ratio_idc","sar_width","sar_height","overscan_appropriate_flag","video_format","video_full_range_flag","colour_description_present_flag","colour_primaries","transfer_characteristics","matrix_coeffs","chroma_sample_loc_type_top_field","chroma_sample_loc_type_bottom_field","def_disp_win_left_offset","def_disp_win_right_offset","def_disp_win_top_offset","def_disp_win_bottom_offset","vui_num_units_in_tick","vui_time_scale","vui_poc_proportional_to_timing_flag","vui_num_ticks_poc_diff_one_minus1","vui_hrd_parameters_present_flag","tiles_fixed_structure_flag","motion_vectors_over_pic_boundaries_flag","restricted_ref_pic_lists_flag","min_spatial_segmentation_idc","max_bytes_per_pic_denom","max_bits_per_min_cu_denom","log2_max_mv_length_horizontal","log2_max_mv_length_vertical","aspect_ratio_info_present_flag","overscan_info_present_flag","video_signal_type_present_flag","chroma_loc_info_present_flag","neutral_chroma_indication_flag","field_seq_flag","frame_field_info_present_flag","default_display_window_flag","vui_timing_info_present_flag","bitstream_restriction_flag","sps_extension_present_flag","h265ParseSpsMultilayerExtension","inter_view_mv_vert_constraint_flag","h265ParseSps3dExtension","iv_di_mc_enabled_flag","iv_mv_scal_enabled_flag","log2_ivmc_sub_pb_size_minus3","iv_res_pred_enabled_flag","depth_ref_enabled_flag","vsp_mc_enabled_flag","dbbp_enabled_flag","tex_mc_enabled_flag","log2_texmc_sub_pb_size_minus3","intra_contour_enabled_flag","intra_dc_only_wedge_enabled_flag","cqt_cu_part_pred_enabled_flag","inter_dc_only_enabled_flag","skip_intra_enabled_flag","h265ParseProfileTier","max_12bit_constraint_flag","max_10bit_constraint_flag","max_8bit_constraint_flag","max_422chroma_constraint_flag","max_420chroma_constraint_flag","max_monochrome_constraint_flag","intra_constraint_flag","one_picture_only_constraint_flag","lower_bit_rate_constraint_flag","max_14bit_constraint_flag","inbld_flag","profile_space","tier_flag","profileCompatibilitySet","profile_compatibility_flag","progressive_source_flag","interlaced_source_flag","non_packed_constraint_flag","frame_only_constraint_flag","profilePresentFlag","generalProfileTier","general_level_idc","sub_layer_profile_present_flag","sub_layer_level_present_flag","subLayerProfileTier","sub_layer_level_idc","subLayerId","CpbCnt","bit_rate_value_minus1","cpb_size_value_minus1","cbr_flag","cpb_size_du_value_minus1","bit_rate_du_value_minus1","h265SearchConfiguration","videoParameterSet","count","header","h265ParseNaluHeader","nuh_layer_id","nuh_temporal_id_plus1","raw","rbsp","h265ParseConfiguration","generalProfileSpace","generalTierFlag","generalProfileIndex","generalProfileCompatibilitySet","generalConstraintSet","generalLevelIndex","SubWidthC","getSubWidthC","SubHeightC","getSubHeightC","BasicControlMessage","esm","AU","uint8","Mouse","Finger","VirtualMouse","VirtualFinger","ScrcpyControlMessageTypeValue","types","options","controlMessageTypes","get","type","indexOf","fillMessageType","message","ScrcpyHoverHelper","lastHoverMessage","process","pointerId","action","Up","undefined","HoverMove","InjectTouch","ScrcpyInjectKeyCodeControlMessage","ZP","W$","uint32","ScrcpyInjectTextControlMessage","string","lengthField","ScrcpySetScreenPowerModeControlMessage","ScrcpyControlMessageSerializer","_options","_typeValues","_scrollController","createScrollController","injectKeyCode","serialize","InjectKeyCode","injectText","text","InjectText","injectTouch","serializeInjectTouchControlMessage","injectScroll","serializeScrollMessage","InjectScroll","backOrScreenOn","serializeBackOrScreenOnControlMessage","BackOrScreenOn","setScreenPowerMode","mode","SetScreenPowerMode","rotateDevice","ScrcpyRotateDeviceControlMessage","RotateDevice","ScrcpyControlMessageWriter","_writer","_serializer","writer","write","stream_extra_esm","ConsumableWritableStream","releaseLock","close","ScrcpyAckClipboardDeviceMessage","uint64","extra","AckClipboard","ScrcpyClipboardDeviceMessage","Clipboard","ScrcpyDeviceMessageDeserializeStream","BufferedTransformStream","stream","readExactly","deserialize","CODEC_OPTION_TYPES","repeatPreviousFrameAfter","maxPtsGapToEncoder","CodecOptions","toOptionValue","entries","filter","map","key","input","replace","toLowerCase","join","clamp","max","ScrcpyFloatToUint16FieldDefinition","Pl","size","signed","array","littleEndian","ek","Uint16","dataView","offset","SCRCPY_CONTROL_MESSAGE_TYPES_1_16","ExpandNotificationPanel","CollapseNotificationPanel","GetClipboard","SetClipboard","ScrcpyMediaStreamRawPacket","uint8Array","SCRCPY_MEDIA_PACKET_FLAG_CONFIG","ScrcpyInjectTouchControlMessage1_16","uint16","field","ScrcpySetClipboardControlMessage1_15","ScrcpyAudioCodec","OPUS","AAC","RAW","optionValue","metadataValue","mimeType","webCodecId","DEFAULT_SERVER_PATH","toScrcpyOptionValue","empty","String","ScrcpyOptionsBase","_base","base","setListEncoders","setListDisplays","parseEncoder","line","parseDisplay","parseVideoStreamMetadata","parseAudioStreamMetadata","createMediaStreamTransformer","serializeSetClipboardControlMessage","ScrcpyInjectScrollControlMessage1_16","int32","ScrcpyScrollController1_16","accumulatedX","accumulatedY","processMessage","scrollX","scrollY","processed","ScrcpyOptions1_16","DEFAULTS","logLevel","Debug","maxSize","bitRate","maxFps","lockVideoOrientation","Unlocked","tunnelForward","crop","sendFrameMeta","control","displayId","showTouches","stayAwake","codecOptions","SERIALIZE_ORDER","order","parseCString","maxLength","FO","substring","parseUint16BE","parseUint32BE","Uint32","defaults","init","match","id","parseInt","buffered","BufferedReadableStream","metadata","codec","H264","deviceName","width","height","release","TransformStream","transform","chunk","controller","enqueue","deserializeStream","StructDeserializeStream","writable","readable","pipeThrough","packet","pts","Down","ScrcpyBackOrScreenOnControlMessage1_16","ScrcpyOptions1_17","encoderName","encoderNameRegex","name","ScrcpyBackOrScreenOnControlMessage1_18","fields","SCRCPY_CONTROL_MESSAGE_TYPES_1_18","slice","splice","ExpandSettingPanel","LOG_LEVEL_MAP","Verbose","Info","Warn","Error","VIDEO_ORIENTATION_MAP","Initial","Portrait","Landscape","PortraitFlipped","LandscapeFlipped","ScrcpyOptions1_18","powerOffOnClose","ScrcpySetClipboardControlMessage1_21","int8","ScrcpyOptions1_21","clipboardAutosync","serializedValue","defaultValue","ScrcpyInjectScrollControlMessage1_22","ScrcpyScrollController1_22","ScrcpyOptions1_22","downsizeOnError","sendDeviceMeta","sendDummyByte","KEYFRAME_PTS","ScrcpyOptions1_23","cleanup","keyframe","ScrcpyOptions1_24","powerOn","ScrcpyFloatToInt16FieldDefinition","Int16","ScrcpyInjectScrollControlMessage1_25","ScrcpyScrollController1_25","ScrcpyOptions1_25","ScrcpyInjectTouchControlMessage2_0","ScrcpyInstanceId","NONE","random","toString","ScrcpyOptions2_0","omit","obj","keys","includes","scid","videoCodec","videoBitRate","videoCodecOptions","videoEncoder","audio","audioCodec","audioBitRate","audioCodecOptions","audioEncoder","listEncoders","listDisplays","sendCodecMeta","display","resolution","H265","AV1","codecMetadataValue","PushReadableStream","getReader","done","ScrcpyLogLevel","ScrcpyVideoOrientation","ScrcpyOptionsLatest","toHex","padStart","toUpperCase","toUint32Le","WebCodecsDecoder","capabilities","h264","h265","_codec","_writable","_renderer","renderer","_frameRendered","frameRendered","_frameSkipped","frameSkipped","context","decoder","_config","currentFrameRendered","animationFrameId","document","createElement","getContext","VideoDecoder","output","drawImage","frame","error","e","WritableStream","configure","decode","onFramePresented","requestAnimationFrame","optimizeForLatency","console","log","set","EncodedVideoChunk","timestamp","dispose","cancelAnimationFrame","state","MatroskaVideoCodecNameMap","MatroskaAudioCodecNameMap","MatroskaMuxingRecorder","addVideoChunk","_firstTimestamp","sample","h264StreamToAvcSample","nalUnits","totalLength","unit","muxer","addVideoChunkRaw","configurationWritten","decoderConfig","description","videoCodecDescription","addVideoPacket","videoMetadata","h264ConfigurationToAvcDecoderConfigurationRecord","h265ConfigurationToHevcDecoderConfigurationRecord","general_profile_space","general_tier_flag","general_profile_idc","_packetsFromLastKeyframe","addAudioChunk","addAudioChunkRaw","addAudioPacket","_this_videoMetadata_width","_this_videoMetadata_height","running","target","ArrayBufferTarget","firstTimestampBehavior","video","sampleRate","numberOfChannels","bitDepth","WebMMuxer","stop","finalize","now","Date","saveFile","concat","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getWriter","RECORD_STATE","makeAutoObservable","recorder","recording","intervalId","hours","minutes","seconds","reaction","setInterval","clearInterval","NOOP","AdbScrcpyExitedError","AdbScrcpyClient","pushServer","adb","file","filename","sync","path","version","connection","createConnection","initialize","adb_esm","AdbReverseNotSupportedError","tunnelForwardOverride","subprocess","spawn","protocols","AdbSubprocessNoneProtocol","stdout","DecodeUtf8Stream","SplitStringStream","abortController","AbortController","pipe","pipeTo","signal","preventCancel","catch","streams","Promise","race","exit","then","getStreams","abort","concatStreams","item","videoStream","audioStream","controlStream","kill","getEncoders","getDisplays","_process","_stdout","_screenWidth","screenWidth","_screenHeight","screenHeight","_videoStream","_audioStream","_controlMessageWriter","controlMessageWriter","_deviceMessageStream","deviceMessageStream","createVideoStream","createAudioStream","initialStream","InspectStream","connection_NOOP","AdbScrcpyConnection","socketName","getSocketName","AdbScrcpyForwardConnection","_disposed","connect","createSocket","connectAndRetry","async_esm","gw","connectVideoStream","AdbScrcpyReverseConnection","address","reverse","remove","queue","add","socket","accept","types_AdbScrcpyOptionsBase","_1_16_AdbScrcpyOptions1_16","connectionOptions","client","encoders","encoder","displays","AdbScrcpyOptions2_0","AdbScrcpyOptionsLatest","PcmPlayer","_context","_worklet","_buffer","AudioContext","latencyHint","feed","source","feedCore","audioWorklet","addModule","U","AudioWorkletNode","sourceName","numberOfInputs","numberOfOutputs","outputChannelCount","destination","disconnect","Int16PcmPlayer","worklet","byteOffset","port","postMessage","Float32PcmPlayer","Float32PlanerPcmPlayer","buffers","channel","AacDecodeStream","config","AudioDecoder","Array","from","_","format","planeIndex","Float32Array","allocationSize","BYTES_PER_ELEMENT","copyTo","EncodedAudioChunk","flush","OpusDecodeStream","SERVER_URL","FetchWithProgress","downloaded","_downloaded","total","_total","onProgress","progressEvent","event","fetch","url","response","headers","fire","body","chunks","reduce","position","EventEmitter","promise","fetchServer","ScrcpyKeyboardInjector","setModifier","keyCode","_controlLeft","_controlRight","_shiftLeft","_shiftRight","_altLeft","_altRight","_metaLeft","_metaRight","_capsLock","_numLock","getMetaState","metaState","down","_this_client_controlMessageWriter","_keys","repeat","up","delete","reset","clear","Set","AoaKeyboardInjector","register","device","keyboard","AoaHidDevice","HidKeyboard","HidKeyCode","hidKeyboard","aoaKeyboard","sendInputReport","serializeInputReport","unregister","workerReady","pendingResolvers","streamId","PICTURE_READY_SUBSCRIPTIONS","Map","TinyH264Wrapper","event_esm","Xn","pictureReadyEvent","vp","onPictureReady","handler","addDisposable","handlePictureReady","renderStateId","decoder_NOOP","all","t","bind","YuvBuffer","default","YuvCanvas","TinyH264Decoder","maxProfile","Baseline","maxLevel","Level4","_yuvCanvas","_initializer","wrapper","hP","attach","chromaWidth","chromaHeight","cropWidth","cropHeight","displayWidth","displayHeight","createTinyH264Wrapper","Worker","tu","URL","p","u","b","addEventListener","resolver","resolve","uPlaneOffset","vPlaneOffset","lumaPlane","chromaPlane","drawFrame","useClasses","makeStyles","labelRight","marginLeft","maxWidth","SettingItem","observer","param","definition","onChange","classes","label","jsx_runtime","jsxs","Stack","horizontal","verticalAlign","span","TooltipHost","content","Icon","className","iconName","Icons","labelExtra","TextField","placeholder","Dropdown","selectedKey","option","Toggle","checked","disabled","SpinButton","labelPosition","Position","step","SETTING_STATE","decoders","Constructor","settings","clientSettings","observable","autorun","GLOBAL_STATE","runInAction","SETTING_DEFINITIONS","computed","group","IconButton","iconProps","onClick","STATE","some","x","encodersForCurrentVideoCodec","every","encodersForCurrentAudioCodec","rotatedWidth","rotation","rotatedHeight","serverBuffer","ReadableStream","Consumable","_this_client","_this_decoder","_this_keyboard","_this_audioPlayer","audioPlayer","fps","clearTimeout","fpsCounterIntervalId","isFullScreen","exitFullscreen","setFullScreenContainer","element","fullScreenContainer","setRendererContainer","rendererContainer","clientPositionToDevicePosition","clientX","clientY","viewRect","getBoundingClientRect","pointerViewX","pointerViewY","y","logVisible","demoModeVisible","navigationBarVisible","hoverHelper","connecting","serverTotalSize","serverDownloadedSize","debouncedServerDownloadedSize","serverDownloadSpeed","serverUploadedSize","debouncedServerUploadedSize","serverUploadSpeed","DistributionStream","ADB_SYNC_MAX_PACKET_SIZE","ProgressStream","progress","decoderDefinition","capability","profile","level","lastFrameRendered","lastFrameSkipped","deltaRendered","deltaSkipped","lastKeyframe","interval","recordStream","playbackStream","tee","Int16Array","navigator","clipboard","writeText","AdbWebUsbBackend","fullscreenElement","firstChild","appendChild","ITEMS","color","iconOnly","onRender","itemType","ContextualMenuItemType","canCheck","ScrcpyCommandBar","CommandBar","items","backgroundColor","bar","icon","back","handlePointerDown","button","currentTarget","setPointerCapture","preventDefault","stopPropagation","handlePointerUp","handleBackPointerDown","handleBackPointerUp","handleHomePointerDown","handleHomePointerUp","handleAppSwitchPointerDown","handleAppSwitchPointerUp","NavigationBar","children","mergeClasses","verticalFill","horizontalAlign","onPointerDown","onPointerUp","transformOrigin","touchAction","handleWheel","pointerX","pointerY","deltaX","deltaY","buttons","MOUSE_EVENT_BUTTON_TO_ANDROID_BUTTON","pointerType","BigInt","messages","pressure","actionButton","handlePointerMove","handlePointerLeave","handleContextMenu","VideoContainer","passive","removeEventListener","onPointerMove","onPointerCancel","onPointerLeave","onContextMenu","useClientAddEventListener","listener","deps","targetValue","useLayoutEffect","useReactLayoutEffect","Symbol","useLocalStorage","localStorage","fallbackValue","setValue","getItem","useAddEventListener","globalThis","handleChange","useStableCallback","callback","callbackRef","useLatestRef","useRef","useConst","_len","arguments","args","_key","setItem","layerHost","top","bottom","left","right","pointerEvents","shorthands","flexDirection","fullScreenStatusBar","columnGap","spacer","ConnectionDialog","layerHostId","useId","isClient","setIsClient","Fragment","LayerHost","Dialog","hidden","modalProps","layerProps","hostId","dialogContentProps","title","tokens","CommonStackTokens","ProgressIndicator","percentComplete","formatSpeed","progressHidden","handleKeyEvent","code","handleBlur","Scrcpy","keyboardLockEnabled","setKeyboardLockEnabled","lock","unlock","hintHidden","setHintHidden","RouteStackProps","Head","grow","styles","root","tabIndex","onKeyDown","onKeyUp","serial","Link","DeviceView","BottomElement","padding","overflow","fontFamily","overflowY","whiteSpace","wordWrap","index","DemoModePanel","ExternalLink","href","spaceAfter","StackItem","align","PrimaryButton","scrcpy"],"sourceRoot":""}